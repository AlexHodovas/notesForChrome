{"version":3,"sources":["components/buttons/DotButtonsSimulation.js","redux/actions.js","redux/reducers/hideFoldersReducer.js","redux/reducers/folderReducer.js","redux/reducers/saveFolderIdReducer.js","redux/reducers/pressAddFolderBtnReducer.js","redux/reducers/pressEditFolderNameBtnReducer.js","redux/reducers/noteReducer.js","redux/reducers/pressAddNoteNameBtnReducer.js","redux/reducers/pressEditNoteNameBtnReducer.js","redux/reducers/saveNoteIdReducer.js","redux/reducers/saveItemIdForDeletingReducer.js","redux/reducers/isDialogForNoteEditingOpenedReducer.js","redux/store.js","redux/localStorage.js","components/buttons/HideFoldersButton.js","components/buttons/DeleteSelectedItem.js","components/buttons/AddNote.js","components/AppHeader.js","components/buttons/DeleteFolderButton.js","components/buttons/EditFolderNameButton.js","components/ItemTypesForReactDND.js","components/Folder.js","components/Folders.js","components/buttons/AddFolderButton.js","components/DialogForEditingNoteBody.js","components/buttons/DeleteNoteButton.js","components/buttons/EditNoteNameButton.js","components/Note.js","components/Notes.js","App.js","index.js"],"names":["DotButtonsSimulation","className","userPressAddFolderButton","value","type","userPressEditFolderNameButton","changeFolderName","folderName","folderId","saveFolderIdForEditing","changeNotesInThisFolder","note","userPressAddNoteNameButton","userPressEditNoteNameButton","changeNoteName","noteName","noteId","saveNoteIdForEditing","changeNoteBody","noteBody","saveItemIdForDeleting","itemId","userPressDoubleClickForNoteBodyEditing","changeNoteBodyInNotesInThisFolder","updateFolderAllNotesWhenDeletingAnotherFolder","arrayOfNotesIdThatWillBeDeleting","folderAllNotesId","hideFoldersReducer","state","action","initialState","notesInThisFolder","folderReducer","folder","filter","map","index","length","selectedItemIdFromAction","selectedItemId","includes","saveFolderIdForEditingReducer","pressAddFolderBtnReducer","pressEditFolderNameBtnReducer","noteReducer","pressAddNoteNameBtnReducer","pressEditNoteNameBtnReducer","saveNoteIdForEditingReducer","isDialogForNoteEditingOpenedReducer","getIsFoldersHidden","isFoldersHidden","getFolders","folders","getIsUserPressAddFolderBtn","isUserPressAddFolderBtn","getIsUserPressEditFolderNameBtn","isUserPressEditFolderNameBtn","getSelectedFolderIdForEditing","selectedFolderIdForEditing","getNotes","notes","getIsUserPressAddNoteNameBtn","isUserPressAddNoteNameBtn","getIsUserPressEditNoteNameBtn","isUserPressEditNoteNameBtn","getSelectedNoteIdForEditing","selectedNoteIdForEditing","getSelectedItemIdForDeleting","selectedItemIdForDeleting","getIsDialogForNoteBodyEditingOpened","isDialogForNoteBodyEditingOpened","rootReducer","combineReducers","saveFolderIdReducer","saveNoteIdReducer","saveItemIdForDeletingReducer","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","subscribe","stringify","setItem","saveState","getState","setTimeout","console","log","StyledButton","withStyles","root","border","paddingTop","paddingBottom","paddingLeft","paddingRight","minWidth","backgroundColor","label","padding","Button","useStyles","makeStyles","theme","button","marginTop","marginLeft","connect","dispatch","hideFolders","classes","variant","color","startIcon","onClick","deleteSelectedItem","arrayOfIds","fildAllNotesInFolderThatWillBeDeleting","folderThatWillBeDeleting","find","noteIdsNotesThanWillBeDeleting","i","push","AppHeader","margin","deleteFolder","findAllNotesInFolderThatWillBeDeleting","undefined","IconButton","aria-label","fontSize","style","isUserPressEditFolderNameButton","userPressEditFolderNameButtonFromProps","allowedDropEffect","useState","newFolderName","setNewFolderName","useDrop","accept","ItemTypesForReactDND","drop","name","collect","monitor","isOver","canDrop","isActive","selectBackgroundColor","maxLength","autoFocus","placeholder","defaultValue","onChange","e","target","onKeyPress","key","cn","selected","ref","isUserPressAddFolderButton","addFolderFromProps","addFolder","currentFolder","setCurrentFolder","prevState","Date","boxShadow","textTransform","alignItems","newNoteBody","setNewNoteBody","Dialog","open","onClose","aria-labelledby","DialogContent","DialogContentText","noValidate","autoComplete","TextField","id","multiline","rows","DialogActions","deleteNote","deleteNoteInNotesInThisFolder","isUserPressEditNoteNameButton","userPressEditNoteNameButtonFromProps","folderIdOnDragEnd","changeNoteNameInNotesInThisFolder","deleteNoteInNotesInThisFolderOnDragEnd","newNoteName","setNewNoteName","item","useDrag","end","dropResult","getDropResult","dropEffect","droppedFolder","needFolder","some","opacity","isDragging","drag","onDoubleClick","borderRadius","width","height","borderBottomRightRadius","StyledTextFieldWhenFoldersHidden","addNoteFromProps","addNote","currentNote","setCurrentNote","handleInputChange","handleTextFieldChange","isItAllNotesFolder","folderAllNotes","notesInThisFolderInFolderAll","hidden","ReactDOM","render","StrictMode","DndProvider","backend","Backend","document","getElementById"],"mappings":"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","file":"static/js/main.4f820769.chunk.js","sourcesContent":["import React from \"react\";\n\nconst DotButtonsSimulation = () => (\n  <div className=\"containerBtnSimulation\">\n    <div className=\"dot red\"></div>\n    <div className=\"dot amber\"></div>\n    <div className=\"dot green\"></div>\n  </div>\n);\n\nexport default DotButtonsSimulation;\n","// folders types\nexport const HIDE_FOLDERS = \"HIDE_FOLDERS\";\nexport const ADD_FOLDER = \"ADD_FOLDER\";\nexport const DELETE_FOLDER = \"DELETE_FOLDER\";\nexport const USER_PRESS_ADD_FOLDER_BUTTON = \"USER_PRESS_ADD_FOLDER_BUTTON\";\nexport const USER_PRESS_EDIT_FOLDER_NAME_BUTTON =\n  \"USER_PRESS_EDIT_FOLDER_NAME_BUTTON\";\nexport const CHANGE_FOLDER_NAME = \"CHANGE_FOLDER_NAME\";\nexport const SAVE_FOLDER_ID_FOR_EDITING = \"SAVE_FOLDER_ID_FOR_EDITING\";\n\n// notes types\nexport const ADD_NOTE = \"ADD_NOTE\";\nexport const DELETE_NOTE = \"DELETE_NOTE\";\nexport const USER_PRESS_ADD_NOTE_NAME_BUTTON =\n  \"USER_PRESS_ADD_NOTE_NAME_BUTTON\";\nexport const USER_PRESS_EDIT_NOTE_NAME_BUTTON =\n  \"USER_PRESS_EDIT_NOTE_NAME_BUTTON\";\nexport const CHANGE_NOTE_NAME = \"CHANGE_NOTE_NAME\";\nexport const SAVE_NOTE_ID_FOR_EDITING = \"SAVE_NOTE_ID_FOR_EDITING\";\nexport const CHANGE_NOTE_BODY = \"CHANGE_NOTE_BODY\";\n\n// common types\nexport const SAVE_ITEM_ID_FOR_DELETING = \"SAVE_ITEM_ID_FOR_DELETING\";\nexport const IS_DIALOG_FOR_NOTE_EDITING_OPENED =\n  \"IS_DIALOG_FOR_NOTE_EDITING_OPENED\";\nexport const CHANGE_NOTE_BODY_IN_NOTES_IN_THIS_FOLDER =\n  \"CHANGE_NOTE_BODY_IN_NOTES_IN_THIS_FOLDER\";\nexport const CHANGE_NOTES_IN_THIS_FOLDER = \"CHANGE_NOTES_IN_THIS_FOLDER\";\nexport const CHANGE_NOTE_NAME_IN_NOTES_IN_THIS_FOLDER =\n  \"CHANGE_NOTE_NAME_IN_NOTES_IN_THIS_FOLDER\";\nexport const DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER =\n  \"DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER\";\nexport const DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER_ON_DRAG_END =\n  \"DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER_ON_DRAG_END\";\nexport const DELETE_SELECTED_ITEM = \"DELETE_SELECTED_ITEM\";\nexport const UPDATE_FOLDER_ALL_NOTES_WHEN_DELETING_ANOTHER_FOLDER =\n  \"UPDATE_FOLDER_ALL_NOTES_WHEN_DELETING_ANOTHER_FOLDER\";\n\n// folders actions\nexport const hideFolders = () => ({ type: HIDE_FOLDERS });\nexport const addFolder = folder => ({ type: ADD_FOLDER, folder });\nexport const deleteFolder = folderId => ({ type: DELETE_FOLDER, folderId });\nexport const userPressAddFolderButton = value => ({\n  type: USER_PRESS_ADD_FOLDER_BUTTON,\n  value\n});\nexport const userPressEditFolderNameButton = value => ({\n  type: USER_PRESS_EDIT_FOLDER_NAME_BUTTON,\n  value\n});\nexport const changeFolderName = (folderName, folderId) => ({\n  type: CHANGE_FOLDER_NAME,\n  folderName,\n  folderId\n});\nexport const saveFolderIdForEditing = folderId => ({\n  type: SAVE_FOLDER_ID_FOR_EDITING,\n  folderId\n});\nexport const changeNotesInThisFolder = (folderId, note) => ({\n  type: CHANGE_NOTES_IN_THIS_FOLDER,\n  folderId,\n  note\n});\n\n// notes actions\nexport const addNote = note => ({ type: ADD_NOTE, note });\nexport const userPressAddNoteNameButton = value => ({\n  type: USER_PRESS_ADD_NOTE_NAME_BUTTON,\n  value\n});\nexport const userPressEditNoteNameButton = value => ({\n  type: USER_PRESS_EDIT_NOTE_NAME_BUTTON,\n  value\n});\nexport const changeNoteName = (noteName, noteId) => ({\n  type: CHANGE_NOTE_NAME,\n  noteName,\n  noteId\n});\nexport const saveNoteIdForEditing = noteId => ({\n  type: SAVE_NOTE_ID_FOR_EDITING,\n  noteId\n});\nexport const deleteNote = noteId => ({ type: DELETE_NOTE, noteId });\nexport const changeNoteBody = (noteBody, noteId) => ({\n  type: CHANGE_NOTE_BODY,\n  noteBody,\n  noteId\n});\n\n// common actions\nexport const saveItemIdForDeleting = itemId => ({\n  type: SAVE_ITEM_ID_FOR_DELETING,\n  itemId\n});\nexport const userPressDoubleClickForNoteBodyEditing = value => ({\n  type: IS_DIALOG_FOR_NOTE_EDITING_OPENED,\n  value\n});\nexport const changeNoteBodyInNotesInThisFolder = (noteBody, noteId) => ({\n  type: CHANGE_NOTE_BODY_IN_NOTES_IN_THIS_FOLDER,\n  noteBody,\n  noteId\n});\nexport const changeNoteNameInNotesInThisFolder = (noteName, noteId) => ({\n  type: CHANGE_NOTE_NAME_IN_NOTES_IN_THIS_FOLDER,\n  noteName,\n  noteId\n});\nexport const deleteNoteInNotesInThisFolder = noteId => ({\n  type: DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER,\n  noteId\n});\nexport const deleteNoteInNotesInThisFolderOnDragEnd = (folderId, noteId) => ({\n  type: DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER_ON_DRAG_END,\n  folderId,\n  noteId\n});\nexport const deleteSelectedItem = selectedItemId => ({\n  type: DELETE_SELECTED_ITEM,\n  selectedItemId\n});\nexport const updateFolderAllNotesWhenDeletingAnotherFolder = (\n  arrayOfNotesIdThatWillBeDeleting,\n  folderAllNotesId\n) => ({\n  type: UPDATE_FOLDER_ALL_NOTES_WHEN_DELETING_ANOTHER_FOLDER,\n  arrayOfNotesIdThatWillBeDeleting,\n  folderAllNotesId\n});\n","import { HIDE_FOLDERS } from \"../actions\";\n\nconst hideFoldersReducer = (state = false, action) => {\n  switch (action.type) {\n    case HIDE_FOLDERS:\n      return !state;\n\n    default:\n      return state;\n  }\n};\n\nexport default hideFoldersReducer;\n","import {\n  ADD_FOLDER,\n  DELETE_FOLDER,\n  CHANGE_FOLDER_NAME,\n  CHANGE_NOTES_IN_THIS_FOLDER,\n  CHANGE_NOTE_BODY_IN_NOTES_IN_THIS_FOLDER,\n  CHANGE_NOTE_NAME_IN_NOTES_IN_THIS_FOLDER,\n  DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER,\n  DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER_ON_DRAG_END,\n  DELETE_SELECTED_ITEM,\n  UPDATE_FOLDER_ALL_NOTES_WHEN_DELETING_ANOTHER_FOLDER\n} from \"../actions\";\n\nconst initialState = [\n  {\n    folderId: \"folderAllNotes\",\n    folderName: \"All\",\n    notesInThisFolder: []\n  }\n];\n\nconst folderReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_FOLDER:\n      return [\n        ...state,\n        {\n          folderId: action.folder.folderId,\n          folderName: action.folder.folderName,\n          notesInThisFolder: []\n        }\n      ];\n\n    case DELETE_FOLDER:\n      return state.filter(folder => folder.folderId !== action.folderId);\n\n    case CHANGE_FOLDER_NAME:\n      return state.map(folder => {\n        if (\n          action.folderId !== folder.folderId ||\n          folder.folderName === action.folderName\n        ) {\n          return folder;\n        }\n\n        return {\n          ...folder,\n          folderName: action.folderName\n        };\n      });\n\n    case CHANGE_NOTES_IN_THIS_FOLDER:\n      return state.map((folder, index) => {\n        if (\n          index === 0 &&\n          (action.folderId === \"folderAllNotes\") === folder.folderId\n        ) {\n          return {\n            ...folder,\n            notesInThisFolder: [...folder.notesInThisFolder, action.note]\n          };\n        }\n\n        if (folder.folderId === action.folderId) {\n          return {\n            ...folder,\n            notesInThisFolder: [...folder.notesInThisFolder, action.note]\n          };\n        } else {\n          return folder;\n        }\n      });\n\n    case DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER_ON_DRAG_END:\n      return state.map((folder, index) => {\n        if (\n          index === 0 &&\n          action.folderId === \"folderAllNotes\" &&\n          action.folderId === folder.folderId\n        ) {\n          return folder;\n        }\n\n        if (folder.folderId === action.folderId) {\n          return {\n            ...folder,\n            notesInThisFolder: folder.notesInThisFolder.filter(\n              note => note.noteId !== action.noteId\n            )\n          };\n        } else {\n          return folder;\n        }\n      });\n\n    case CHANGE_NOTE_BODY_IN_NOTES_IN_THIS_FOLDER:\n      return state.map(folder => {\n        return {\n          ...folder,\n          notesInThisFolder: folder.notesInThisFolder.map(note => {\n            if (\n              action.noteId !== note.noteId ||\n              action.noteBody === note.noteBody\n            ) {\n              return note;\n            }\n\n            return {\n              ...note,\n              noteBody: action.noteBody\n            };\n          })\n        };\n      });\n\n    case CHANGE_NOTE_NAME_IN_NOTES_IN_THIS_FOLDER:\n      return state.map(folder => {\n        return {\n          ...folder,\n          notesInThisFolder: folder.notesInThisFolder.map(note => {\n            if (\n              action.noteId !== note.noteId ||\n              action.noteName === note.noteName\n            ) {\n              return note;\n            }\n\n            return {\n              ...note,\n              noteName: action.noteName\n            };\n          })\n        };\n      });\n\n    case DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER:\n      return state.map(folder => {\n        if (folder.notesInThisFolder.length === 0) {\n          return {\n            ...folder,\n            notesInThisFolder: []\n          };\n        } else {\n          return {\n            ...folder,\n            notesInThisFolder: folder.notesInThisFolder.filter(\n              note => note.noteId !== action.noteId\n            )\n          };\n        }\n      });\n\n    case DELETE_SELECTED_ITEM:\n      const selectedItemIdFromAction = action.selectedItemId;\n\n      if (selectedItemIdFromAction.includes(\"folder\")) {\n        return state.filter((folder, index) => {\n          if (\n            index === 0 &&\n            selectedItemIdFromAction === \"folderAllNotes\" &&\n            selectedItemIdFromAction === folder.folderId\n          ) {\n            return folder;\n          } else {\n            return folder.folderId !== selectedItemIdFromAction;\n          }\n        });\n      } else {\n        return state.map(folder => {\n          return {\n            ...folder,\n            notesInThisFolder: folder.notesInThisFolder.filter(\n              note => note.noteId !== selectedItemIdFromAction\n            )\n          };\n        });\n      }\n\n    case UPDATE_FOLDER_ALL_NOTES_WHEN_DELETING_ANOTHER_FOLDER:\n      return state.map((folder, index) => {\n        if (\n          index === 0 &&\n          action.folderAllNotesId === \"folderAllNotes\" &&\n          action.folderAllNotesId === folder.folderId\n        ) {\n          return {\n            ...folder,\n            notesInThisFolder: folder.notesInThisFolder.filter(note => {\n              if (\n                action.arrayOfNotesIdThatWillBeDeleting.length > 0 &&\n                !action.arrayOfNotesIdThatWillBeDeleting.includes(note.noteId)\n              ) {\n                return note;\n              }\n            })\n          };\n        } else {\n          return folder;\n        }\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default folderReducer;\n","import { SAVE_FOLDER_ID_FOR_EDITING } from \"../actions\";\n\nconst saveFolderIdForEditingReducer = (state = 'folderAllNotes', action) => {\n  switch (action.type) {\n    case SAVE_FOLDER_ID_FOR_EDITING:\n      return action.folderId;\n\n    default:\n      return state;\n  }\n};\n\nexport default saveFolderIdForEditingReducer;","import { USER_PRESS_ADD_FOLDER_BUTTON } from \"../actions\";\n\nconst pressAddFolderBtnReducer = (state = false, action) => {\n  switch (action.type) {\n    case USER_PRESS_ADD_FOLDER_BUTTON:\n      return action.value;\n\n    default:\n      return state;\n  }\n};\n\nexport default pressAddFolderBtnReducer;","import { USER_PRESS_EDIT_FOLDER_NAME_BUTTON } from \"../actions\";\n\nconst pressEditFolderNameBtnReducer = (state = false, action) => {\n  switch (action.type) {\n    case USER_PRESS_EDIT_FOLDER_NAME_BUTTON:\n      return action.value;\n\n    default:\n      return state;\n  }\n};\n\nexport default pressEditFolderNameBtnReducer;","import {\n  ADD_NOTE,\n  CHANGE_NOTE_NAME,\n  DELETE_NOTE,\n  CHANGE_NOTE_BODY\n} from \"../actions\";\n\nconst noteReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD_NOTE:\n      return [\n        ...state,\n        {\n          noteId: action.note.noteId,\n          noteName: action.note.noteName,\n          noteBody: action.note.noteBody\n        }\n      ];\n\n    case DELETE_NOTE:\n      return state.filter(note => note.noteId !== action.noteId);\n\n    case CHANGE_NOTE_NAME:\n      return state.map(note => {\n        if (\n          action.noteId !== note.noteId ||\n          note.noteName === action.noteName\n        ) {\n          return note;\n        }\n\n        return {\n          ...note,\n          noteName: action.noteName\n        };\n      });\n\n    case CHANGE_NOTE_BODY:\n      return state.map(note => {\n        if (\n          action.noteId !== note.noteId ||\n          note.noteBody === action.noteBody\n        ) {\n          return note;\n        }\n\n        return {\n          ...note,\n          noteBody: action.noteBody\n        };\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default noteReducer;\n","import { USER_PRESS_ADD_NOTE_NAME_BUTTON } from \"../actions\";\n\nconst pressAddNoteNameBtnReducer = (state = false, action) => {\n  switch (action.type) {\n    case USER_PRESS_ADD_NOTE_NAME_BUTTON:\n      return action.value;\n\n    default:\n      return state;\n  }\n};\n\nexport default pressAddNoteNameBtnReducer;\n","import { USER_PRESS_EDIT_NOTE_NAME_BUTTON } from \"../actions\";\n\nconst pressEditNoteNameBtnReducer = (state = false, action) => {\n  switch (action.type) {\n    case USER_PRESS_EDIT_NOTE_NAME_BUTTON:\n      return action.value;\n\n    default:\n      return state;\n  }\n};\n\nexport default pressEditNoteNameBtnReducer;","import { SAVE_NOTE_ID_FOR_EDITING } from \"../actions\";\n\nconst saveNoteIdForEditingReducer = (state = '', action) => {\n  switch (action.type) {\n    case SAVE_NOTE_ID_FOR_EDITING:\n      return action.noteId;\n\n    default:\n      return state;\n  }\n};\n\nexport default saveNoteIdForEditingReducer;","import { SAVE_ITEM_ID_FOR_DELETING } from \"../actions\";\n\nconst saveFolderIdForEditingReducer = (state = '', action) => {\n  switch (action.type) {\n    case SAVE_ITEM_ID_FOR_DELETING:\n      return action.itemId;\n\n    default:\n      return state;\n  }\n};\n\nexport default saveFolderIdForEditingReducer;","import { IS_DIALOG_FOR_NOTE_EDITING_OPENED } from \"../actions\";\n\nconst isDialogForNoteEditingOpenedReducer = (state = false, action) => {\n  switch (action.type) {\n    case IS_DIALOG_FOR_NOTE_EDITING_OPENED:\n      return action.value;\n\n    default:\n      return state;\n  }\n};\n\nexport default isDialogForNoteEditingOpenedReducer;\n","import { createStore, combineReducers } from \"redux\";\nimport { loadState, saveState } from \"./localStorage\";\n\n//reducers\nimport hideFoldersReducer from \"./reducers/hideFoldersReducer\";\nimport folderReducer from \"./reducers/folderReducer\";\nimport saveFolderIdReducer from \"./reducers/saveFolderIdReducer\";\nimport pressAddFolderBtnReducer from \"./reducers/pressAddFolderBtnReducer\";\nimport pressEditFolderNameBtnReducer from \"./reducers/pressEditFolderNameBtnReducer\";\n\nimport noteReducer from \"./reducers/noteReducer\";\nimport pressAddNoteNameBtnReducer from \"./reducers/pressAddNoteNameBtnReducer\";\nimport pressEditNoteNameBtnReducer from \"./reducers/pressEditNoteNameBtnReducer\";\nimport saveNoteIdReducer from \"./reducers/saveNoteIdReducer\";\n\nimport saveItemIdForDeletingReducer from \"./reducers/saveItemIdForDeletingReducer\";\nimport isDialogForNoteEditingOpenedReducer from \"./reducers/isDialogForNoteEditingOpenedReducer\";\n\n// selectors\nexport const getIsFoldersHidden = state => state.isFoldersHidden;\nexport const getFolders = state => state.folders;\nexport const getIsUserPressAddFolderBtn = state =>\n  state.isUserPressAddFolderBtn;\nexport const getIsUserPressEditFolderNameBtn = state =>\n  state.isUserPressEditFolderNameBtn;\nexport const getSelectedFolderIdForEditing = state =>\n  state.selectedFolderIdForEditing;\nexport const getNotes = state => state.notes;\nexport const getIsUserPressAddNoteNameBtn = state =>\n  state.isUserPressAddNoteNameBtn;\nexport const getIsUserPressEditNoteNameBtn = state =>\n  state.isUserPressEditNoteNameBtn;\nexport const getSelectedNoteIdForEditing = state =>\n  state.selectedNoteIdForEditing;\nexport const getSelectedItemIdForDeleting = state =>\n  state.selectedItemIdForDeleting;\nexport const getIsDialogForNoteBodyEditingOpened = state =>\n  state.isDialogForNoteBodyEditingOpened;\n\n//rootReducer\nconst rootReducer = combineReducers({\n  isFoldersHidden: hideFoldersReducer,\n  folders: folderReducer,\n  isUserPressAddFolderBtn: pressAddFolderBtnReducer,\n  isUserPressEditFolderNameBtn: pressEditFolderNameBtnReducer,\n  selectedFolderIdForEditing: saveFolderIdReducer,\n\n  notes: noteReducer,\n  isUserPressAddNoteNameBtn: pressAddNoteNameBtnReducer,\n  isUserPressEditNoteNameBtn: pressEditNoteNameBtnReducer,\n  selectedNoteIdForEditing: saveNoteIdReducer,\n\n  selectedItemIdForDeleting: saveItemIdForDeletingReducer,\n  isDialogForNoteBodyEditingOpened: isDialogForNoteEditingOpenedReducer\n});\n\nconst persistedState = loadState();\nconst store = createStore(rootReducer, persistedState);\n\nstore.subscribe(() => {\n  saveState({\n    isFoldersHidden: store.getState().isFoldersHidden,\n    folders: store.getState().folders,\n    isUserPressAddFolderBtn: store.getState().isUserPressAddFolderBtn,\n    isUserPressEditFolderNameBtn: store.getState().isUserPressEditFolderNameBtn,\n    selectedFolderIdForEditing: store.getState().selectedFolderIdForEditing,\n\n    notes: store.getState().notes,\n    isUserPressAddNoteNameBtn: store.getState().isUserPressAddNoteNameBtn,\n    isUserPressEditNoteNameBtn: store.getState().isUserPressEditNoteNameBtn,\n    selectedNoteIdForEditing: store.getState().selectedNoteIdForEditing,\n\n    selectedItemIdForDeleting: store.getState().selectedItemIdForDeleting,\n    isDialogForNoteBodyEditingOpened: store.getState()\n      .isDialogForNoteBodyEditingOpened\n  });\n});\n\nsetTimeout(() => {\n  console.log(\"smile :)\");\n}, 5000);\n\nexport default store;\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nexport const saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n  } catch {\n    // ignore write errors\n  }\n};","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport FolderIcon from \"@material-ui/icons/Folder\";\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\nimport { connect } from \"react-redux\";\nimport { getIsFoldersHidden } from \"../../redux/store\";\nimport { hideFolders } from \"../../redux/actions\";\n\nconst StyledButton = withStyles({\n  root: {\n    border: 0,\n    paddingTop: 2,\n    paddingBottom: 2,\n    paddingLeft: 12,\n    paddingRight: 0,\n    minWidth: 38,\n    backgroundColor: \"white\"\n  },\n  label: {\n    padding: 0\n  }\n})(Button);\n\nconst useStyles = makeStyles(theme => ({\n  button: {\n    marginTop: 6,\n    marginLeft: 150\n  }\n}));\n\nconst HideFoldersButton = ({ isFoldersHidden, hideFolders }) => {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <StyledButton\n        variant=\"contained\"\n        color=\"default\"\n        className={classes.button}\n        startIcon={isFoldersHidden ? <FolderIcon /> : <FolderOpenIcon />}\n        onClick={() => hideFolders()}\n      >\n        {\"\"}\n      </StyledButton>\n    </div>\n  );\n};\nconst mapStateToProps = state => ({\n  isFoldersHidden: getIsFoldersHidden(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  hideFolders: () => dispatch(hideFolders())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HideFoldersButton);\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport { connect } from \"react-redux\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\n\nimport {\n  getSelectedItemIdForDeleting,\n  getSelectedFolderIdForEditing,\n  getFolders\n} from \"../../redux/store\";\nimport {\n  deleteSelectedItem,\n  updateFolderAllNotesWhenDeletingAnotherFolder\n} from \"../../redux/actions\";\n\nconst StyledButton = withStyles({\n  root: {\n    border: 0,\n    paddingTop: 2,\n    paddingBottom: 2,\n    paddingLeft: 12,\n    paddingRight: 0,\n    minWidth: 38,\n    backgroundColor: \"white\"\n  },\n  label: {\n    padding: 0\n  }\n})(Button);\n\nconst useStyles = makeStyles(theme => ({\n  button: {\n    marginTop: 6,\n    marginLeft: 8\n  }\n}));\n\nconst DeleteSelectedItem = ({\n  deleteSelectedItem,\n  selectedItemIdForDeleting,\n  folders,\n  updateFolderAllNotesWhenDeletingAnotherFolder\n}) => {\n  const classes = useStyles();\n\n  const fildAllNotesInFolderThatWillBeDeleting = () => {\n    const folderThatWillBeDeleting = folders.find(\n      folder => folder.folderId === selectedItemIdForDeleting\n    );\n    const noteIdsNotesThanWillBeDeleting = [];\n\n    for (\n      let i = 0;\n      i < folderThatWillBeDeleting.notesInThisFolder.length;\n      i++\n    ) {\n      const note = folderThatWillBeDeleting.notesInThisFolder[i];\n      noteIdsNotesThanWillBeDeleting.push(note.noteId);\n    }\n\n    return noteIdsNotesThanWillBeDeleting;\n  };\n\n  return (\n    <div>\n      <StyledButton\n        variant=\"contained\"\n        color=\"default\"\n        className={classes.button}\n        startIcon={<DeleteForeverIcon />}\n        onClick={() => {\n          if (selectedItemIdForDeleting.includes(\"folder\")) {\n            console.log(fildAllNotesInFolderThatWillBeDeleting());\n            updateFolderAllNotesWhenDeletingAnotherFolder(\n              fildAllNotesInFolderThatWillBeDeleting(),\n              \"folderAllNotes\"\n            );\n          }\n          deleteSelectedItem(selectedItemIdForDeleting);\n        }}\n      >\n        {\"\"}\n      </StyledButton>\n    </div>\n  );\n};\nconst mapStateToProps = state => ({\n  selectedItemIdForDeleting: getSelectedItemIdForDeleting(state),\n  folders: getFolders(state),\n  selectedFolderIdForEditing: getSelectedFolderIdForEditing(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteSelectedItem: selectedItemId =>\n    dispatch(deleteSelectedItem(selectedItemId)),\n  updateFolderAllNotesWhenDeletingAnotherFolder: (\n    arrayOfIds,\n    folderAllNotesId\n  ) =>\n    dispatch(\n      updateFolderAllNotesWhenDeletingAnotherFolder(\n        arrayOfIds,\n        folderAllNotesId\n      )\n    )\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DeleteSelectedItem);\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport NoteAddIcon from \"@material-ui/icons/NoteAdd\";\nimport { connect } from \"react-redux\";\n\nimport { userPressAddNoteNameButton } from \"../../redux/actions\";\n\nconst StyledButton = withStyles({\n  root: {\n    border: 0,\n    paddingTop: 2,\n    paddingBottom: 2,\n    paddingLeft: 12,\n    paddingRight: 0,\n    minWidth: 38,\n    backgroundColor: \"white\"\n  },\n  label: {\n    padding: 0\n  }\n})(Button);\n\nconst useStyles = makeStyles(theme => ({\n  button: {\n    marginTop: 6,\n    marginLeft: 8\n  }\n}));\n\nconst AddNote = ({ userPressAddNoteNameButton }) => {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <StyledButton\n        variant=\"contained\"\n        color=\"default\"\n        className={classes.button}\n        startIcon={<NoteAddIcon />}\n        onClick={() => {\n          userPressAddNoteNameButton(true);\n        }}\n      >\n        {\"\"}\n      </StyledButton>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  userPressAddNoteNameButton: value =>\n    dispatch(userPressAddNoteNameButton(value))\n});\n\nexport default connect(null, mapDispatchToProps)(AddNote);\n","import React from \"react\";\nimport DotButtonsSimulation from './buttons/DotButtonsSimulation';\nimport HideFoldersButton from './buttons/HideFoldersButton';\nimport DeleteSelectedItem from './buttons/DeleteSelectedItem';\nimport AddNote from './buttons/AddNote';\n\nconst AppHeader = () => (\n  <div className=\"app-header\">\n    <DotButtonsSimulation />\n    <HideFoldersButton />\n    <DeleteSelectedItem />\n    <AddNote />\n  </div>\n)\n\nexport default AppHeader;","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { connect } from \"react-redux\";\nimport {\n  getSelectedItemIdForDeleting,\n  getSelectedFolderIdForEditing,\n  getFolders\n} from \"../../redux/store\";\nimport {\n  updateFolderAllNotesWhenDeletingAnotherFolder,\n  saveFolderIdForEditing,\n  deleteFolder\n} from \"../../redux/actions\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& > *\": {\n      margin: -6\n    }\n  }\n}));\n\nconst DeleteFolderButton = ({\n  deleteFolder,\n  folderId,\n  saveFolderIdForEditing,\n  folders,\n  updateFolderAllNotesWhenDeletingAnotherFolder,\n  selectedFolderIdForEditing\n}) => {\n  const classes = useStyles();\n\n  const findAllNotesInFolderThatWillBeDeleting = () => {\n    const folderThatWillBeDeleting = folders.find(\n      folder => folder.folderId === selectedFolderIdForEditing\n    );\n\n    if (folderThatWillBeDeleting === undefined) {\n      return [];\n    }\n    const noteIdsNotesThanWillBeDeleting = [];\n\n    for (\n      let i = 0;\n      i < folderThatWillBeDeleting.notesInThisFolder.length;\n      i++\n    ) {\n      const note = folderThatWillBeDeleting.notesInThisFolder[i];\n      noteIdsNotesThanWillBeDeleting.push(note.noteId);\n    }\n\n    return noteIdsNotesThanWillBeDeleting;\n  };\n\n  return (\n    <div\n      className={classes.root}\n      onClick={() => {\n        saveFolderIdForEditing(folderId);\n\n        if (findAllNotesInFolderThatWillBeDeleting().length > 0) {\n          if (selectedFolderIdForEditing.includes(\"folder\")) {\n            updateFolderAllNotesWhenDeletingAnotherFolder(\n              findAllNotesInFolderThatWillBeDeleting(),\n              \"folderAllNotes\"\n            );\n          }\n        }\n        deleteFolder(folderId);\n      }}\n    >\n      <IconButton aria-label=\"delete\">\n        <DeleteIcon fontSize=\"small\" />\n      </IconButton>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  selectedItemIdForDeleting: getSelectedItemIdForDeleting(state),\n  folders: getFolders(state),\n  selectedFolderIdForEditing: getSelectedFolderIdForEditing(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateFolderAllNotesWhenDeletingAnotherFolder: (\n    arrayOfIds,\n    folderAllNotesId\n  ) =>\n    dispatch(\n      updateFolderAllNotesWhenDeletingAnotherFolder(\n        arrayOfIds,\n        folderAllNotesId\n      )\n    ),\n  deleteFolder: folderId => dispatch(deleteFolder(folderId)),\n  saveFolderIdForEditing: folderId => dispatch(saveFolderIdForEditing(folderId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DeleteFolderButton);\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport { connect } from \"react-redux\";\n\nimport {\n  userPressEditFolderNameButton,\n  saveFolderIdForEditing\n} from \"../../redux/actions\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& > *\": {\n      margin: -6\n    }\n  }\n}));\n\nconst EditFolderNameButton = ({\n  userPressEditFolderNameButton,\n  folderId,\n  saveFolderIdForEditing\n}) => {\n  const classes = useStyles();\n\n  return (\n    <div\n      className={classes.root}\n      onClick={() => {\n        userPressEditFolderNameButton(true);\n        saveFolderIdForEditing(folderId);\n      }}\n    >\n      <IconButton aria-label=\"delete\">\n        <EditIcon fontSize=\"small\" />\n      </IconButton>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  userPressEditFolderNameButton: value =>\n    dispatch(userPressEditFolderNameButton(value)),\n  saveFolderIdForEditing: folderId => dispatch(saveFolderIdForEditing(folderId))\n});\n\nexport default connect(null, mapDispatchToProps)(EditFolderNameButton);\n","export default {\n  BOX: 'box',\n}","import React, { useState } from \"react\";\nimport cn from \"classnames\";\nimport { useDrop } from \"react-dnd\";\nimport { connect } from \"react-redux\";\nimport DeleteFolderButton from \"./buttons/DeleteFolderButton\";\nimport EditFolderNameButton from \"./buttons/EditFolderNameButton\";\nimport ItemTypesForReactDND from \"./ItemTypesForReactDND\";\n\nimport {\n  getSelectedFolderIdForEditing,\n  getIsUserPressEditFolderNameBtn\n} from \"../redux/store\";\nimport {\n  changeFolderName,\n  saveFolderIdForEditing,\n  userPressAddFolderButton,\n  userPressEditFolderNameButton,\n  saveItemIdForDeleting\n} from \"../redux/actions\";\n\nconst style = {\n  color: \"white\"\n};\n\nfunction selectBackgroundColor(isActive, canDrop, folderId) {\n  if (folderId === \"folderAllNotes\") {\n    return \"\";\n  }\n\n  if (isActive) {\n    return \"darkgreen\";\n  } else if (canDrop) {\n    return \"darkkhaki\";\n  } else {\n    return \"\";\n  }\n}\n\nconst Folder = ({\n  allowedDropEffect,\n  folder,\n  changeFolderName,\n  saveFolderIdForEditing,\n  selectedFolderIdForEditing,\n  isUserPressEditFolderNameButton,\n  userPressEditFolderNameButtonFromProps,\n  saveItemIdForDeleting\n}) => {\n  const { folderName, folderId } = folder;\n  const [newFolderName, setNewFolderName] = useState(\"\");\n\n  const handleInputChange = value => {\n    setNewFolderName(value);\n  };\n\n  const [{ canDrop, isOver }, drop] = useDrop({\n    accept: ItemTypesForReactDND.BOX,\n    drop: () => ({\n      name: folderId,\n      allowedDropEffect\n    }),\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  });\n  const isActive = canDrop && isOver;\n  const backgroundColor = selectBackgroundColor(isActive, canDrop, folderId);\n\n  if (\n    selectedFolderIdForEditing === folderId &&\n    isUserPressEditFolderNameButton\n  ) {\n    return (\n      <div>\n        <input\n          maxLength=\"20\"\n          autoFocus\n          placeholder=\"New Folder\"\n          defaultValue={folderName}\n          onChange={e => handleInputChange(e.target.value)}\n          onKeyPress={e => {\n            if (e.key === \"Enter\") {\n              changeFolderName(newFolderName, folderId);\n              userPressEditFolderNameButtonFromProps(false);\n            }\n          }}\n          type=\"text\"\n          className=\"editFolderNameInput\"\n        />\n      </div>\n    );\n  } else if (folderId === \"folderAllNotes\") {\n    return (\n      <div style={{ ...style, backgroundColor }}>\n        <li\n          onClick={() => {\n            saveFolderIdForEditing(folderId);\n            saveItemIdForDeleting(folderId);\n          }}\n          className={cn(\"folder-li\", {\n            selected: selectedFolderIdForEditing === folderId\n          })}\n        >\n          <div className=\"folder\">\n            <label className={cn(\"folder__label\")}>{folderName}</label>\n          </div>\n        </li>\n      </div>\n    );\n  } else {\n    return (\n      <div ref={drop} style={{ ...style, backgroundColor }}>\n        <li\n          onClick={() => {\n            saveFolderIdForEditing(folderId);\n            saveItemIdForDeleting(folderId);\n          }}\n          className={cn(\"folder-li\", {\n            selected: selectedFolderIdForEditing === folderId\n          })}\n        >\n          <div className=\"folder\">\n            <label className={cn(\"folder__label\")}>{folderName}</label>\n            <DeleteFolderButton folderId={folderId} />\n            <EditFolderNameButton folderId={folderId} />\n          </div>\n        </li>\n      </div>\n    );\n  }\n};\n\nconst mapStateToProps = state => ({\n  isUserPressEditFolderNameButton: getIsUserPressEditFolderNameBtn(state),\n  selectedFolderIdForEditing: getSelectedFolderIdForEditing(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  userPressAddFolderButton: value => dispatch(userPressAddFolderButton(value)),\n  userPressEditFolderNameButtonFromProps: value =>\n    dispatch(userPressEditFolderNameButton(value)),\n  changeFolderName: (folderName, folderId) =>\n    dispatch(changeFolderName(folderName, folderId)),\n  saveFolderIdForEditing: folderId =>\n    dispatch(saveFolderIdForEditing(folderId)),\n  saveItemIdForDeleting: folderId => dispatch(saveItemIdForDeleting(folderId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Folder);\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Folder from \"./Folder\";\nimport {\n  getFolders,\n  getIsUserPressAddFolderBtn,\n} from \"../redux/store\";\nimport {\n  addFolder,\n  userPressAddFolderButton,\n  changeFolderName,\n  saveFolderIdForEditing,\n} from \"../redux/actions\";\n\nconst Folders = ({\n  folders,\n  isUserPressAddFolderButton,\n  userPressAddFolderButton,\n  addFolderFromProps,\n  saveFolderIdForEditing,\n}) => {\n  const [currentFolder, setCurrentFolder] = useState({\n    folderId: null,\n    folderName: null,\n    notesInThisFolder: [],\n  });\n\n  const handleInputChange = value => {\n    setCurrentFolder(prevState => {\n      return {\n        ...prevState,\n        folderId: `folderID-${+new Date()}`,\n        folderName: value\n      };\n    });\n  };\n\n  return (\n    <>\n      <div>\n        {folders.length > 0 && (\n          <ul className=\"ul\">\n            {folders.map(folder => (\n              <Folder allowedDropEffect=\"move\" folder={folder} key={folder.folderId} />\n            ))}\n\n            {isUserPressAddFolderButton && (\n              <div>\n                <input\n                  maxLength=\"20\"\n                  autoFocus\n                  placeholder=\"New Folder\"\n                  onChange={e => handleInputChange(e.target.value)}\n                  onKeyPress={e => {\n                    if (e.key === \"Enter\") {\n                      addFolderFromProps(currentFolder);\n                      userPressAddFolderButton(false);\n                      saveFolderIdForEditing(currentFolder.folderId);\n                    }\n                  }}\n                  type=\"text\"\n                  className=\"folderNameInputWhenFoldersLengthMoreThanOne\"\n                />\n              </div>\n            )}\n          </ul>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  folders: getFolders(state),\n  isUserPressAddFolderButton: getIsUserPressAddFolderBtn(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addFolderFromProps: folder => dispatch(addFolder(folder)),\n  userPressAddFolderButton: value => dispatch(userPressAddFolderButton(value)),\n  changeFolderName: (folderName, folderId) =>\n    dispatch(changeFolderName(folderName, folderId)),\n  saveFolderIdForEditing: (folderId) =>\n    dispatch(saveFolderIdForEditing(folderId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Folders);","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport { connect } from \"react-redux\";\n\nimport { userPressAddFolderButton } from \"../../redux/actions\";\n\nconst StyledButton = withStyles({\n  root: {\n    backgroundColor: \"rgb(228, 226, 229)\",\n    boxShadow: \"none\",\n    border: \"none\",\n    textTransform: \"none\",\n    alignItems: \"center\",\n    \"&:hover\": {\n      backgroundColor: \"rgb(228, 226, 229)\",\n      border: \"none\",\n      boxShadow: \"none\"\n    }\n  },\n  label: {\n    padding: 0,\n    alignItems: \"none\"\n  }\n})(Button);\n\nconst AddFolderButton = ({ userPressAddFolderButton }) => {\n  return (\n    <div className=\"addFolderButton\">\n      <StyledButton\n        variant=\"contained\"\n        color=\"default\"\n        startIcon={<AddCircleIcon />}\n        onClick={() => {\n          userPressAddFolderButton(true);\n        }}\n      >\n        New&nbsp;Folder\n      </StyledButton>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  userPressAddFolderButton: value => dispatch(userPressAddFolderButton(value))\n});\n\nexport default connect(null, mapDispatchToProps)(AddFolderButton);\n","import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport { connect } from \"react-redux\";\n\nimport {\n  getIsDialogForNoteBodyEditingOpened,\n  getSelectedNoteIdForEditing,\n  getNotes\n} from \"../redux/store\";\nimport {\n  userPressDoubleClickForNoteBodyEditing,\n  changeNoteBody,\n  changeNoteBodyInNotesInThisFolder\n} from \"../redux/actions\";\n\nconst DialogForEditingNoteBody = ({\n  notes,\n  changeNoteBody,\n  isDialogForNoteBodyEditingOpened,\n  userPressDoubleClickForNoteBodyEditing,\n  selectedNoteIdForEditing,\n  changeNoteBodyInNotesInThisFolder\n}) => {\n  const [newNoteBody, setNewNoteBody] = useState(\"\");\n\n  const handleTextFieldChange = value => {\n    setNewNoteBody(value);\n    changeNoteBody(value, selectedNoteIdForEditing);\n  };\n\n  return (\n    <div>\n      <Dialog\n        open={isDialogForNoteBodyEditingOpened}\n        onClose={() => userPressDoubleClickForNoteBodyEditing(false)}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogContent>\n          <DialogContentText>\n            Please change your note and press confirm\n          </DialogContentText>\n          <form noValidate autoComplete=\"off\">\n            <TextField\n              id=\"outlined-multiline-static\"\n              label=\"Note\"\n              multiline\n              rows=\"6\"\n              variant=\"outlined\"\n              value={\n                notes.find(note => note.noteId === selectedNoteIdForEditing)\n                  .noteBody === null\n                  ? \"\"\n                  : notes.find(note => note.noteId === selectedNoteIdForEditing)\n                      .noteBody\n              }\n              onChange={e => handleTextFieldChange(e.target.value)}\n            />\n          </form>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() => {\n              userPressDoubleClickForNoteBodyEditing(false);\n              changeNoteBodyInNotesInThisFolder(\n                newNoteBody,\n                selectedNoteIdForEditing\n              );\n            }}\n            color=\"primary\"\n          >\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  isDialogForNoteBodyEditingOpened: getIsDialogForNoteBodyEditingOpened(state),\n  selectedNoteIdForEditing: getSelectedNoteIdForEditing(state),\n  notes: getNotes(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  userPressDoubleClickForNoteBodyEditing: value =>\n    dispatch(userPressDoubleClickForNoteBodyEditing(value)),\n  changeNoteBody: (noteBody, noteId) =>\n    dispatch(changeNoteBody(noteBody, noteId)),\n  changeNoteBodyInNotesInThisFolder: (noteBody, noteId) =>\n    dispatch(changeNoteBodyInNotesInThisFolder(noteBody, noteId))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DialogForEditingNoteBody);\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { connect } from \"react-redux\";\nimport { deleteNote, deleteNoteInNotesInThisFolder } from \"../../redux/actions\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& > *\": {\n      margin: -6\n    }\n  }\n}));\n\nconst DeleteNoteButton = ({\n  deleteNote,\n  noteId,\n  deleteNoteInNotesInThisFolder\n}) => {\n  const classes = useStyles();\n\n  return (\n    <div\n      className={classes.root}\n      onClick={() => {\n        deleteNote(noteId);\n        deleteNoteInNotesInThisFolder(noteId);\n      }}\n    >\n      <IconButton aria-label=\"delete\">\n        <DeleteIcon fontSize=\"small\" />\n      </IconButton>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  deleteNote: noteId => dispatch(deleteNote(noteId)),\n  deleteNoteInNotesInThisFolder: noteId =>\n    dispatch(deleteNoteInNotesInThisFolder(noteId))\n});\n\nexport default connect(null, mapDispatchToProps)(DeleteNoteButton);\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport { connect } from \"react-redux\";\n\nimport {\n  userPressEditNoteNameButton,\n  saveNoteIdForEditing\n} from \"../../redux/actions\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& > *\": {\n      margin: -6\n    }\n  }\n}));\n\nconst EditNoteNameButton = ({\n  noteId,\n  userPressEditNoteNameButton,\n  saveNoteIdForEditing\n}) => {\n  const classes = useStyles();\n\n  return (\n    <div\n      className={classes.root}\n      onClick={\n        () => {\n          userPressEditNoteNameButton(true);\n          saveNoteIdForEditing(noteId);\n        }\n      }\n    >\n      <IconButton aria-label=\"delete\">\n        <EditIcon fontSize=\"small\" />\n      </IconButton>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  userPressEditNoteNameButton: value => dispatch(userPressEditNoteNameButton(value)),\n  saveNoteIdForEditing: noteId => dispatch(saveNoteIdForEditing(noteId)),\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(EditNoteNameButton);\n","import React, { useState } from \"react\";\nimport cn from \"classnames\";\nimport { useDrag } from \"react-dnd\";\nimport { connect } from \"react-redux\";\nimport DeleteNoteButton from \"./buttons/DeleteNoteButton\";\nimport EditNoteNameButton from \"./buttons/EditNoteNameButton\";\nimport ItemTypesForReactDND from \"./ItemTypesForReactDND\";\n\nimport {\n  getSelectedNoteIdForEditing,\n  getIsUserPressEditNoteNameBtn,\n  getFolders\n} from \"../redux/store\";\nimport {\n  changeNoteName,\n  saveNoteIdForEditing,\n  userPressEditNoteNameButton,\n  userPressDoubleClickForNoteBodyEditing,\n  changeNotesInThisFolder,\n  changeNoteNameInNotesInThisFolder,\n  deleteNoteInNotesInThisFolderOnDragEnd,\n  saveItemIdForDeleting\n} from \"../redux/actions\";\n\nconst style = {\n  backgroundColor: \"white\"\n};\n\nconst Note = ({\n  note,\n  changeNoteName,\n  isUserPressEditNoteNameButton,\n  saveNoteIdForEditing,\n  selectedNoteIdForEditing,\n  userPressEditNoteNameButtonFromProps,\n  userPressDoubleClickForNoteBodyEditing,\n\n  changeNotesInThisFolder,\n  changeNoteNameInNotesInThisFolder,\n  deleteNoteInNotesInThisFolderOnDragEnd,\n  folders,\n  saveItemIdForDeleting\n}) => {\n  const { noteName, noteId } = note;\n  const [newNoteName, setNewNoteName] = useState(\"\");\n\n  const handleInputChange = value => {\n    setNewNoteName(value);\n  };\n\n  const item = { ...note, type: ItemTypesForReactDND.BOX };\n  const [{ opacity }, drag] = useDrag({\n    item,\n    end(item, monitor) {\n      const dropResult = monitor.getDropResult();\n      if (item && dropResult) {\n        const isDropAllowed =\n          dropResult.allowedDropEffect === \"any\" ||\n          dropResult.allowedDropEffect === dropResult.dropEffect;\n        if (isDropAllowed) {\n          // alert(\n          //   `You ${dropResult.dropEffect} noteName - ${noteName} - ${noteId}into ${dropResult.name}!`\n          // );\n          const folderIdOnDragEnd = monitor.getDropResult().name;\n          const droppedFolder = folders.find((folder, i) => {\n            let needFolder = null;\n            if (i > 0) {\n              needFolder = folder.notesInThisFolder.some(\n                note => note.noteId === noteId\n              );\n            }\n            return needFolder;\n          });\n\n          if (droppedFolder) {\n            if (droppedFolder.folderId) {\n              deleteNoteInNotesInThisFolderOnDragEnd(\n                droppedFolder.folderId,\n                noteId\n              );\n            }\n          }\n          changeNotesInThisFolder(folderIdOnDragEnd, note);\n        }\n      }\n    },\n    collect: monitor => ({\n      opacity: monitor.isDragging() ? 0.4 : 1\n    })\n  });\n\n  if (selectedNoteIdForEditing === noteId && isUserPressEditNoteNameButton) {\n    return (\n      <div>\n        <input\n          maxLength=\"20\"\n          autoFocus\n          placeholder=\"New Note\"\n          defaultValue={noteName}\n          onChange={e => handleInputChange(e.target.value)}\n          onKeyPress={e => {\n            if (e.key === \"Enter\") {\n              changeNoteName(newNoteName, noteId);\n              changeNoteNameInNotesInThisFolder(newNoteName, noteId);\n              userPressEditNoteNameButtonFromProps(false);\n            }\n          }}\n          type=\"text\"\n          className=\"editNoteNameInput\"\n        />\n      </div>\n    );\n  } else {\n    return (\n      <div ref={drag} style={{ ...style, opacity }}>\n        <li\n          onDoubleClick={() => userPressDoubleClickForNoteBodyEditing(true)}\n          onClick={() => {\n            saveNoteIdForEditing(noteId);\n            saveItemIdForDeleting(noteId);\n          }}\n          className={cn(\"note-li \", {\n            selected: selectedNoteIdForEditing === noteId\n          })}\n        >\n          <div className=\"note\">\n            <label className={cn(\"note__label\")}>{noteName}</label>\n            <DeleteNoteButton noteId={noteId} />\n            <EditNoteNameButton noteId={noteId} />\n          </div>\n        </li>\n      </div>\n    );\n  }\n};\n\nconst mapStateToProps = state => ({\n  isUserPressEditNoteNameButton: getIsUserPressEditNoteNameBtn(state),\n  selectedNoteIdForEditing: getSelectedNoteIdForEditing(state),\n\n  folders: getFolders(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  userPressEditNoteNameButtonFromProps: value =>\n    dispatch(userPressEditNoteNameButton(value)),\n  changeNoteName: (noteName, noteId) =>\n    dispatch(changeNoteName(noteName, noteId)),\n  saveNoteIdForEditing: noteId => dispatch(saveNoteIdForEditing(noteId)),\n  userPressDoubleClickForNoteBodyEditing: value =>\n    dispatch(userPressDoubleClickForNoteBodyEditing(value)),\n  changeNotesInThisFolder: (folderIdOnDragEnd, note) =>\n    dispatch(changeNotesInThisFolder(folderIdOnDragEnd, note)),\n  changeNoteNameInNotesInThisFolder: (noteName, noteId) =>\n    dispatch(changeNoteNameInNotesInThisFolder(noteName, noteId)),\n  deleteNoteInNotesInThisFolderOnDragEnd: (folderId, noteId) =>\n    dispatch(deleteNoteInNotesInThisFolderOnDragEnd(folderId, noteId)),\n  saveItemIdForDeleting: itemId => dispatch(saveItemIdForDeleting(itemId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Note);\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport DialogForEditingNoteBody from \"./DialogForEditingNoteBody\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport ItemTypesForReactDND from \"./ItemTypesForReactDND\";\nimport Note from \"./Note\";\nimport {\n  getNotes,\n  getFolders,\n  getIsUserPressAddNoteNameBtn,\n  getIsDialogForNoteBodyEditingOpened,\n  getSelectedNoteIdForEditing,\n  getIsFoldersHidden,\n  getSelectedFolderIdForEditing\n} from \"../redux/store\";\nimport {\n  addNote,\n  userPressAddNoteNameButton,\n  changeNoteName,\n  saveNoteIdForEditing,\n  changeNoteBody,\n  changeNotesInThisFolder,\n  changeNoteBodyInNotesInThisFolder\n} from \"../redux/actions\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: 0\n    },\n    \"& .MuiOutlinedInput-root\": {\n      borderRadius: 0,\n      paddingTop: 0,\n      width: 410,\n      height: 523,\n      borderBottomRightRadius: 10\n    }\n  }\n}));\n\nconst StyledTextFieldWhenFoldersHidden = withStyles({\n  root: {\n    \"& .MuiOutlinedInput-root\": {\n      width: 677\n    }\n  }\n})(TextField);\n\nconst Notes = ({\n  notes,\n  folders,\n  isUserPressAddNoteNameBtn,\n  userPressAddNoteNameButton,\n  addNoteFromProps,\n  isDialogForNoteBodyEditingOpened,\n  saveNoteIdForEditing,\n  changeNoteBody,\n  selectedNoteIdForEditing,\n  isFoldersHidden,\n  changeNotesInThisFolder,\n  changeNoteBodyInNotesInThisFolder,\n  selectedFolderIdForEditing\n}) => {\n  const classes = useStyles();\n\n  const [currentNote, setCurrentNote] = useState({\n    noteId: null,\n    noteName: null,\n    noteBody: null,\n    type: ItemTypesForReactDND.BOX\n  });\n\n  const handleInputChange = value => {\n    setCurrentNote(prevState => {\n      return {\n        ...prevState,\n        noteId: `noteId-${+new Date()}`,\n        noteName: value\n      };\n    });\n  };\n\n  const handleTextFieldChange = (value, noteId) => {\n    changeNoteBody(value, selectedNoteIdForEditing);\n    changeNoteBodyInNotesInThisFolder(value, selectedNoteIdForEditing);\n  };\n\n  const isItAllNotesFolder = () => {\n    const folderAllNotes = folders.filter(\n      folder =>\n        folder.folderId === selectedFolderIdForEditing &&\n        folder.folderId === \"folderAllNotes\"\n    );\n    const [folder] = folderAllNotes;\n\n    if (folder === undefined) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const notesInThisFolder = () => {\n    const folderAll = folders[0];\n    const notesInThisFolderInFolderAll = folderAll.notesInThisFolder;\n    const needFolder = folders.filter(\n      folder => folder.folderId === selectedFolderIdForEditing\n    );\n    const [folder] = needFolder;\n    if (folder === undefined) {\n      return notesInThisFolderInFolderAll;\n    }\n    const { notesInThisFolder } = folder;\n\n    if (notesInThisFolder !== undefined) {\n      return notesInThisFolder;\n    } else {\n      return [];\n    }\n  };\n\n  return (\n    <>\n      {isUserPressAddNoteNameBtn && notesInThisFolder().length < 1 && (\n        <input\n          maxLength=\"30\"\n          autoFocus\n          placeholder=\"New Note\"\n          onChange={e => handleInputChange(e.target.value)}\n          onKeyPress={e => {\n            if (e.key === \"Enter\") {\n              addNoteFromProps(currentNote);\n              userPressAddNoteNameButton(false);\n              setCurrentNote({\n                noteId: null,\n                noteName: null,\n                noteBody: null,\n                type: ItemTypesForReactDND.BOX\n              });\n              saveNoteIdForEditing(currentNote.noteId);\n\n              if (isItAllNotesFolder()) {\n                changeNotesInThisFolder(\"folderAllNotes\", currentNote);\n              } else {\n                changeNotesInThisFolder(\"folderAllNotes\", currentNote);\n                changeNotesInThisFolder(\n                  selectedFolderIdForEditing,\n                  currentNote\n                );\n              }\n            }\n          }}\n          type=\"text\"\n          className=\"firstNoteinput\"\n        />\n      )}\n      {notesInThisFolder().length > 0 && (\n        <>\n          <div className=\"notes\">\n            <ul className=\"ul\">\n              {notesInThisFolder().map(note => (\n                <Note note={note} key={note.noteId} />\n              ))}\n              {isUserPressAddNoteNameBtn && (\n                <div>\n                  <input\n                    maxLength=\"20\"\n                    autoFocus\n                    placeholder=\"New Note\"\n                    onChange={e => handleInputChange(e.target.value)}\n                    onKeyPress={e => {\n                      if (e.key === \"Enter\") {\n                        addNoteFromProps(currentNote);\n                        userPressAddNoteNameButton(false);\n                        saveNoteIdForEditing(currentNote.noteId);\n\n                        if (isItAllNotesFolder()) {\n                          changeNotesInThisFolder(\n                            \"folderAllNotes\",\n                            currentNote\n                          );\n                        } else {\n                          changeNotesInThisFolder(\n                            \"folderAllNotes\",\n                            currentNote\n                          );\n                          changeNotesInThisFolder(\n                            selectedFolderIdForEditing,\n                            currentNote\n                          );\n                        }\n                      }\n                    }}\n                    type=\"text\"\n                    className=\"folderNameInputWhenFoldersLengthMoreThanOne\"\n                  />\n                </div>\n              )}\n            </ul>\n\n            {isDialogForNoteBodyEditingOpened && <DialogForEditingNoteBody />}\n          </div>\n          {notes.find(note => note.noteId === selectedNoteIdForEditing) && (\n            <div className=\"note__body\">\n              <form className={classes.root} noValidate autoComplete=\"off\">\n                {!isFoldersHidden && (\n                  <TextField\n                    id=\"outlined-multiline-static\"\n                    label=\"Note\"\n                    multiline\n                    rows=\"22\"\n                    variant=\"outlined\"\n                    className={classes.root}\n                    value={\n                      notes.find(\n                        note => note.noteId === selectedNoteIdForEditing\n                      ).noteBody === null\n                        ? \"\"\n                        : notes.find(\n                            note => note.noteId === selectedNoteIdForEditing\n                          ).noteBody\n                    }\n                    onChange={e => handleTextFieldChange(e.target.value)}\n                  />\n                )}\n\n                {isFoldersHidden && (\n                  <StyledTextFieldWhenFoldersHidden\n                    id=\"outlined-multiline-static\"\n                    label=\"Note\"\n                    multiline\n                    rows=\"22\"\n                    variant=\"outlined\"\n                    className={classes.root}\n                    value={\n                      notes.find(\n                        note => note.noteId === selectedNoteIdForEditing\n                      ).noteBody === null\n                        ? \"\"\n                        : notes.find(\n                            note => note.noteId === selectedNoteIdForEditing\n                          ).noteBody\n                    }\n                    onChange={e => handleTextFieldChange(e.target.value)}\n                  />\n                )}\n              </form>\n            </div>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  notes: getNotes(state),\n  folders: getFolders(state),\n  isUserPressAddNoteNameBtn: getIsUserPressAddNoteNameBtn(state),\n  isDialogForNoteBodyEditingOpened: getIsDialogForNoteBodyEditingOpened(state),\n  selectedNoteIdForEditing: getSelectedNoteIdForEditing(state),\n  isFoldersHidden: getIsFoldersHidden(state),\n  selectedFolderIdForEditing: getSelectedFolderIdForEditing(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addNoteFromProps: note => dispatch(addNote(note)),\n  userPressAddNoteNameButton: value =>\n    dispatch(userPressAddNoteNameButton(value)),\n  changeFolderName: (noteName, noteId) =>\n    dispatch(changeNoteName(noteName, noteId)),\n  saveNoteIdForEditing: noteId => dispatch(saveNoteIdForEditing(noteId)),\n  changeNoteBody: (noteBody, noteId) =>\n    dispatch(changeNoteBody(noteBody, noteId)),\n  changeNotesInThisFolder: (folderId, note) =>\n    dispatch(changeNotesInThisFolder(folderId, note)),\n  changeNoteBodyInNotesInThisFolder: (noteBody, noteId) =>\n    dispatch(changeNoteBodyInNotesInThisFolder(noteBody, noteId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Notes);\n","import React from \"react\";\nimport cn from \"classnames\";\nimport { connect } from \"react-redux\";\nimport AppHeader from \"./components/AppHeader\";\nimport Folders from \"./components/Folders\";\nimport AddFolderButton from \"./components/buttons/AddFolderButton\";\nimport Notes from \"./components/Notes\";\n\nimport { getIsFoldersHidden } from \"./redux/store\";\n\nconst App = ({ isFoldersHidden }) => (\n  <div className=\"app-container\">\n    <AppHeader />\n    <div className=\"panels\">\n      <div\n        className={cn(\"panels__folders\", {\n          hidden: isFoldersHidden\n        })}\n      >\n        <Folders />\n        <AddFolderButton />\n      </div>\n      <div className=\"panels__notes\">\n        <Notes />\n      </div>\n    </div>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  isFoldersHidden: getIsFoldersHidden(state)\n});\n\nexport default connect(mapStateToProps, null)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\nimport App from \"./App\";\nimport \"./styles/main.scss\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <DndProvider backend={Backend}>\n        <App />\n      </DndProvider>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}