{"version":3,"sources":["components/buttons/DotButtonsSimulation.js","redux/reducers/hideFoldersReducer.js","redux/types.js","redux/reducers/folderReducer.js","redux/reducers/saveFolderIdReducer.js","redux/reducers/pressAddFolderBtnReducer.js","redux/reducers/pressEditFolderNameBtnReducer.js","redux/reducers/pressAddNoteNameBtnReducer.js","redux/reducers/pressEditNoteNameBtnReducer.js","redux/reducers/saveNoteIdReducer.js","redux/reducers/saveSelectedItemIdReducer.js","redux/reducers/dialogReducer.js","redux/store.js","redux/actions.js","components/buttons/HideFoldersBtn.js","helpers/allNotesIdInDeletedFolder.js","components/buttons/DeleteSelectedItemBtn.js","components/buttons/AddNoteBtn.js","components/buttons/AddFolderBtn.js","components/AppHeader.js","components/buttons/DeleteFolderBtn.js","components/buttons/EditFolderNameBtn.js","components/Folder.js","components/Folders.js","components/buttons/DeleteNoteBtn.js","components/buttons/EditNoteNameBtn.js","components/Note.js","helpers/findNoteBody.js","helpers/notesInThisFolder.js","helpers/findNoteName.js","components/Dialog.js","components/Notes.js","App.js","index.js"],"names":["useStyles","makeStyles","dot","display","width","height","background","borderRadius","margin","DotsContainer","styled","Box","marginLeft","RedCircle","border","AmberCircle","GreenCircle","DotButtonsSimulation","classes","className","hideFoldersReducer","state","action","type","initialState","folderId","folderName","notesInThisFolder","folderReducer","folder","filter","map","index","note","noteId","noteBody","noteName","length","selectedItemIdFromAction","selectedItemId","includes","arrayOfNotesIdThatWillBeDeleting","folderAllNotesId","saveFolderIdReducer","pressAddFolderBtnReducer","value","pressEditFolderNameBtnReducer","pressAddNoteNameBtnReducer","pressEditNoteNameBtnReducer","saveNoteIdReducer","saveSelectedItemIdReducer","itemId","dialogReducer","getFolders","folders","getIsFoldersHidden","isFoldersHidden","getIsUserPressAddFolderBtn","isUserPressAddFolderBtn","getIsUserPressEditFolderNameBtn","isUserPressEditFolderNameBtn","getIsUserPressAddNoteNameBtn","isUserPressAddNoteNameBtn","getIsUserPressEditNoteNameBtn","isUserPressEditNoteNameBtn","getSelectedFolderId","selectedFolderId","getSelectedNoteId","selectedNoteId","getSelectedItemId","getIsDialogOpened","isDialogOpened","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","setTimeout","console","log","pressAddFolderBtn","pressEditFolderNameBtn","changeFolderName","saveFolderId","addNote","changeNoteBody","changeNoteName","pressAddNoteNameBtn","pressEditNoteNameBtn","saveNoteId","saveSelectedItemId","openDialog","updateFolderAll","StyledButton","withStyles","root","paddingTop","paddingBottom","paddingLeft","paddingRight","minWidth","backgroundColor","label","padding","Button","button","marginTop","connect","dispatch","hideFolders","variant","color","startIcon","onClick","allNotesIdInDeletedFolder","selectedElementId","deletedFolder","find","ids","i","push","mobileButton","marginRight","deleteSelectedItem","arrayOfIds","mobile","position","bottom","boxShadow","textTransform","alignItems","AppHeaderWrapper","borderTopRightRadius","borderTopLeftRadius","borderBottom","AppHeader","AddFolderBtn","DeleteSelectedItemBtn","deleteFolder","IconButton","aria-label","fontSize","style","editFolderNameInput","folderNameInput","FolderStyled","itemTypesForReactDND","isUserPressEditFolderNameButton","allowedDropEffect","useState","newFolderName","setNewFolderName","useDrop","accept","drop","name","collect","monitor","isOver","canDrop","isActive","selectBackgroundColor","maxLength","autoFocus","placeholder","defaultValue","onChange","e","target","onBlur","cn","selected","ref","input","paddingRigh","mobileInput","isUserPressAddFolderButton","addFolder","selectedId","currentFolder","setCurrentFolder","key","prevState","Date","trim","deleteNote","NoteWrapper","editNoteNameInput","noteLabel","styleForMobile","isUserPressEditNoteNameButton","folderIdOnDragEnd","deleteNoteOnDragEnd","newNoteName","setNewNoteName","item","useDrag","end","dropResult","getDropResult","dropEffect","droppedFolder","needFolder","some","opacity","isDragging","drag","onDoubleClick","DeleteNoteBtn","findNoteBody","notes","selectedNoteIdForEditing","notesInThisFolderInFolderAll","findNoteName","Dialog","open","onClose","aria-labelledby","DialogContent","DialogContentText","noValidate","autoComplete","flexDirection","TextField","rows","multiline","id","marginBottom","NoteBodyWrapper","borderLeft","borderBottomRightRadius","borderBottomLeftRadius","firstNoteinput","StyledTextFieldWhenFoldersHidden","currentNote","setCurrentNote","handleInputChange","handleTextFieldChange","isItAllNotesFolder","folderAllNotes","Panels","theme","notesPanel","notesWhenFoldersHidden","breakpoints","between","borderRight","hidden","useTheme","useMediaQuery","up","ReactDOM","render","StrictMode","DndProvider","backend","Backend","document","getElementById"],"mappings":"4OAIMA,EAAYC,aAAW,iBAAO,CAClCC,IAAK,CACHC,QAAS,eACTC,MAAO,GACPC,OAAQ,GACRC,WAAY,UACZC,aAAc,MACdC,OAAQ,oBAINC,EAAgBC,YAAOC,IAAPD,CAAY,CAChCE,WAAY,KAGRC,EAAYH,YAAOC,IAAPD,CAAY,CAC5BJ,WAAY,UACZQ,OAAQ,sBAGJC,EAAcL,YAAOC,IAAPD,CAAY,CAC9BJ,WAAY,UACZQ,OAAQ,sBAGJE,EAAcN,YAAOC,IAAPD,CAAY,CAC9BJ,WAAY,UACZQ,OAAQ,sBAeKG,EAZc,WAC3B,IAAMC,EAAUlB,IAEhB,OACE,kBAACS,EAAD,KACE,kBAACI,EAAD,CAAWM,UAAWD,EAAQhB,MAC9B,kBAACa,EAAD,CAAaI,UAAWD,EAAQhB,MAChC,kBAACc,EAAD,CAAaG,UAAWD,EAAQhB,Q,kEC7BvBkB,EAVY,WAA4B,IAA3BC,EAA0B,wDAAXC,EAAW,uCACpD,OAAQA,EAAOC,MACb,ICHwB,eDItB,OAAQF,EAEV,QACE,OAAOA,I,gBEKPG,EAAe,CACnB,CACEC,SAAU,iBACVC,WAAY,MACZC,kBAAmB,KAoLRC,EAhLO,WAAmC,IAAlCP,EAAiC,uDAAzBG,EAAcF,EAAW,uCACtD,OAAQA,EAAOC,MACb,IDrBsB,aCsBpB,MAAM,GAAN,mBACKF,GADL,CAEE,CACEI,SAAUH,EAAOO,OAAOJ,SACxBC,WAAYJ,EAAOO,OAAOH,WAC1BC,kBAAmB,MAIzB,ID9ByB,gBC+BvB,OAAON,EAAMS,QAAO,SAACD,GAAD,OAAYA,EAAOJ,WAAaH,EAAOG,YAE7D,ID9B8B,qBC+B5B,OAAOJ,EAAMU,KAAI,SAACF,GAChB,OACEP,EAAOG,WAAaI,EAAOJ,UAC3BI,EAAOH,aAAeJ,EAAOI,WAEtBG,EAGF,eACFA,EADL,CAEEH,WAAYJ,EAAOI,gBAIzB,IDzCoB,WC0ClB,OAAOL,EAAMU,KAAI,SAACF,EAAQG,GACxB,OACY,IAAVA,GACqB,mBAApBV,EAAOG,WAAmCI,EAAOJ,UAQhDI,EAAOJ,WAAaH,EAAOG,SANtB,eACFI,EADL,CAEEF,kBAAkB,GAAD,mBAAME,EAAOF,mBAAb,CAAgCL,EAAOW,SASrDJ,KAGX,IDhDmC,0BCiDjC,OAAOR,EAAMU,KAAI,SAACF,EAAQG,GACxB,OACY,IAAVA,GACoB,mBAApBV,EAAOG,UACPH,EAAOG,WAAaI,EAAOJ,SAEpBI,EAGLA,EAAOJ,WAAaH,EAAOG,SACtB,eACFI,EADL,CAEEF,kBAAmBE,EAAOF,kBAAkBG,QAC1C,SAACG,GAAD,OAAUA,EAAKC,SAAWZ,EAAOY,YAKhCL,KAGX,IDhF4B,mBCiF1B,OAAOR,EAAMU,KAAI,SAACF,GAChB,OAAO,eACFA,EADL,CAEEF,kBAAmBE,EAAOF,kBAAkBI,KAAI,SAACE,GAC/C,OACEX,EAAOY,SAAWD,EAAKC,QACvBZ,EAAOa,WAAaF,EAAKE,SAElBF,EAGF,eACFA,EADL,CAEEE,SAAUb,EAAOa,mBAM3B,IDrG4B,mBCsG1B,OAAOd,EAAMU,KAAI,SAACF,GAChB,OAAO,eACFA,EADL,CAEEF,kBAAmBE,EAAOF,kBAAkBI,KAAI,SAACE,GAC/C,OACEX,EAAOY,SAAWD,EAAKC,QACvBZ,EAAOc,WAAaH,EAAKG,SAElBH,EAGF,eACFA,EADL,CAEEG,SAAUd,EAAOc,mBAM3B,ID1HuB,cC2HrB,OAAOf,EAAMU,KAAI,SAACF,GAChB,OAAwC,IAApCA,EAAOF,kBAAkBU,OACpB,eACFR,EADL,CAEEF,kBAAmB,KAGd,eACFE,EADL,CAEEF,kBAAmBE,EAAOF,kBAAkBG,QAC1C,SAACG,GAAD,OAAUA,EAAKC,SAAWZ,EAAOY,eAM3C,IDlIgC,uBCmI9B,IAAMI,EAA2BhB,EAAOiB,eAExC,OAAID,EAAyBE,SAAS,UAC7BnB,EAAMS,QAAO,SAACD,EAAQG,GAC3B,OACY,IAAVA,GAC6B,mBAA7BM,GACAA,IAA6BT,EAAOJ,SAE7BI,EAEAA,EAAOJ,WAAaa,KAIxBjB,EAAMU,KAAI,SAAAF,GACf,OAAO,eACFA,EADL,CAEEF,kBAAmBE,EAAOF,kBAAkBG,QAC1C,SAACG,GAAD,OAAUA,EAAKC,SAAWI,UAMpC,ID1J6B,oBC2J3B,OAAsD,IAAnDhB,EAAOmB,iCAAiCJ,OAAqBhB,EAEzDA,EAAMU,KAAI,SAACF,GAChB,MAAgC,mBAA5BP,EAAOoB,iBACF,eACFb,EADL,CAEEF,kBAAmBE,EAAOF,kBAAkBG,QAC1C,SAACG,GAAD,OAAWX,EAAOmB,iCAAiCD,SAASP,EAAKC,aAIhEL,KAIX,QACE,OAAOR,ICrLEsB,EAVa,WAAuC,IAAtCtB,EAAqC,uDAA7B,iBAAkBC,EAAW,uCAChE,OAAQA,EAAOC,MACb,IFG0B,iBEFxB,OAAOD,EAAOG,SAEhB,QACE,OAAOJ,ICIEuB,EAVkB,WAA4B,IAA3BvB,EAA0B,wDAAXC,EAAW,uCAC1D,OAAQA,EAAOC,MACb,IHAgC,uBGC9B,OAAOD,EAAOuB,MAEhB,QACE,OAAOxB,ICIEyB,EAVuB,WAA4B,IAA3BzB,EAA0B,wDAAXC,EAAW,uCAC/D,OAAQA,EAAOC,MACb,IJCsC,6BIApC,OAAOD,EAAOuB,MAEhB,QACE,OAAOxB,ICIE0B,EAVoB,WAA4B,IAA3B1B,EAA0B,wDAAXC,EAAW,uCAC5D,OAAQA,EAAOC,MACb,ILUmC,0BKTjC,OAAOD,EAAOuB,MAEhB,QACE,OAAOxB,ICIE2B,EAVqB,WAA4B,IAA3B3B,EAA0B,wDAAXC,EAAW,uCAC7D,OAAQA,EAAOC,MACb,INWoC,2BMVlC,OAAOD,EAAOuB,MAEhB,QACE,OAAOxB,ICIE4B,EAVW,WAAyB,IAAxB5B,EAAuB,uDAAf,GAAIC,EAAW,uCAChD,OAAQA,EAAOC,MACb,IPYwB,eOXtB,OAAOD,EAAOY,OAEhB,QACE,OAAOb,ICIE6B,EAVmB,WAAyB,IAAxB7B,EAAuB,uDAAf,GAAIC,EAAW,uCACxD,OAAQA,EAAOC,MACb,IReiC,wBQd/B,OAAOD,EAAO6B,OAEhB,QACE,OAAO9B,ICIE+B,EAVO,WAA4B,IAA3B/B,EAA0B,wDAAXC,EAAW,uCAC/C,OAAQA,EAAOC,MACb,ITiB4B,mBShB1B,OAAOD,EAAOuB,MAEhB,QACE,OAAOxB,ICQAgC,EAAa,SAAChC,GAAD,OAAWA,EAAMiC,SAC9BC,EAAqB,SAAClC,GAAD,OAAWA,EAAMmC,iBACtCC,EAA6B,SAACpC,GAAD,OACxCA,EAAMqC,yBACKC,EAAkC,SAACtC,GAAD,OAC7CA,EAAMuC,8BACKC,EAA+B,SAACxC,GAAD,OAC1CA,EAAMyC,2BACKC,EAAgC,SAAC1C,GAAD,OAC3CA,EAAM2C,4BACKC,EAAsB,SAAC5C,GAAD,OAAWA,EAAM6C,kBACvCC,EAAoB,SAAC9C,GAAD,OAAWA,EAAM+C,gBACrCC,EAAoB,SAAChD,GAAD,OAAWA,EAAMkB,gBACrC+B,EAAoB,SAACjD,GAAD,OAAWA,EAAMkD,gBAE5CC,EAAcC,0BAAgB,CAClCnB,QAAS1B,EACT4B,gBAAiBpC,EACjBsC,wBAAyBd,EACzBkB,0BAA2Bf,EAC3Ba,6BAA8Bd,EAC9BkB,2BAA4BhB,EAC5BuB,eAAgBnB,EAChBc,iBAAkBvB,EAClByB,eAAgBnB,EAChBV,eAAgBW,IAGZwB,GAAQC,sBACZH,EACAI,8BACEC,8BAIJC,YAAW,WACTC,QAAQC,IAAI,cACX,KAEYN,UC7BFO,GAAoB,SAACpC,GAAD,MAAY,CAC3CtB,KXvBkC,uBWwBlCsB,UAEWqC,GAAyB,SAACrC,GAAD,MAAY,CAChDtB,KX1BwC,6BW2BxCsB,UAEWsC,GAAmB,SAACzD,EAAYD,GAAb,MAA2B,CACzDF,KX7BgC,qBW8BhCG,aACAD,aAEW2D,GAAe,SAAC3D,GAAD,MAAe,CACzCF,KXjC4B,iBWkC5BE,aAIW4D,GAAU,SAAC5D,EAAUQ,GAAX,MAAqB,CAC1CV,KXpCsB,WWqCtBE,WACAQ,SAMWqD,GAAiB,SAACnD,EAAUD,GAAX,MAAuB,CACnDX,KX1C8B,mBW2C9BY,WACAD,WAEWqD,GAAiB,SAACnD,EAAUF,GAAX,MAAuB,CACnDX,KXhD8B,mBWiD9Ba,WACAF,WAEWsD,GAAsB,SAAC3C,GAAD,MAAY,CAC7CtB,KXnDqC,0BWoDrCsB,UAEW4C,GAAuB,SAAC5C,GAAD,MAAY,CAC9CtB,KXtDsC,2BWuDtCsB,UAEW6C,GAAa,SAACxD,GAAD,MAAa,CACrCX,KXzD0B,eW0D1BW,WAIWyD,GAAqB,SAACxC,GAAD,MAAa,CAC7C5B,KX5DmC,wBW6DnC4B,WAEWyC,GAAa,SAAC/C,GAAD,MAAY,CACpCtB,KX9D8B,mBW+D9BsB,UAWWgD,GAAkB,SAC7BpD,EACAC,GAF6B,MAGzB,CACJnB,KX7E+B,oBW8E/BkB,mCACAC,qBC5FIoD,GAAeC,YAAW,CAC9BC,KAAM,CACJlF,OAAQ,EACRmF,WAAY,EACZC,cAAe,EACfC,YAAa,GACbC,aAAc,EACdC,SAAU,GACVC,gBAAiB,SAEnBC,MAAO,CACLC,QAAS,IAXQT,CAalBU,KAEGzG,GAAYC,YAAW,CAC3ByG,OAAQ,CACNC,UAAW,EACX/F,WAAY,OA6BDgG,gBARS,SAACvF,GAAD,MAAY,CAClCmC,gBAAiBD,EAAmBlC,OAGX,SAACwF,GAAD,MAAe,CACxCC,YAAa,kBAAMD,ED9Ba,CAAEtF,KXtBR,qBYuDbqF,EAzBQ,SAAC,GAAsC,IAApCpD,EAAmC,EAAnCA,gBAAiBsD,EAAkB,EAAlBA,YACnC5F,EAAUlB,KAEhB,OACE,6BACE,kBAAC8F,GAAD,CACEiB,QAAQ,YACRC,MAAM,UACN7F,UAAWD,EAAQwF,OACnBO,UAAWzD,EAAkB,kBAAC,IAAD,MAAiB,kBAAC,IAAD,MAC9C0D,QAAS,kBAAMJ,MAEd,Q,oBC3CM,SAASK,GAA0B7D,EAAS8D,GACzD,IAAMC,EAAgB/D,EAAQgE,MAC5B,SAACzF,GAAD,OAAYA,EAAOJ,WAAa2F,KAElC,IAAKC,EAAe,MAAO,GAG3B,IAFA,IAAME,EAAM,GAEHC,EAAI,EAAGA,EAAIH,EAAc1F,kBAAkBU,OAAQmF,IAAK,CAC/D,IAAMvF,EAAOoF,EAAc1F,kBAAkB6F,GAC7CD,EAAIE,KAAKxF,EAAKC,QAGhB,OAAOqF,ECCT,I,MAAMzB,GAAeC,YAAW,CAC9BC,KAAM,CACJlF,OAAQ,EACRmF,WAAY,EACZC,cAAe,EACfC,YAAa,GACbC,aAAc,EACdC,SAAU,GACVC,gBAAiB,SAEnBC,MAAO,CACLC,QAAS,IAXQT,CAalBU,KAEGzG,GAAYC,YAAW,CAC3ByG,OAAQ,CACNC,UAAW,EACX/F,WAAY,GAEd8G,aAAc,CACZf,UAAW,EACX/F,WAAY,GACZ+G,YAAa,MAkDFf,gBAXS,SAACvF,GAAD,MAAY,CAClCkB,eAAgB8B,EAAkBhD,GAClCiC,QAASD,EAAWhC,OAGK,SAACwF,GAAD,MAAe,CACxCe,mBAAoB,SAACrF,GAAD,OAAoBsE,EHUR,SAACtE,GAAD,MAAqB,CACrDhB,KXxEkC,uBWyElCgB,kBGZiDqF,CAAmBrF,KACpEsD,gBAAiB,SAACgC,EAAYnF,GAAb,OACfmE,EAAShB,GAAgBgC,EAAYnF,QAG1BkE,EA9CY,SAAC,GAMrB,IALLgB,EAKI,EALJA,mBACArF,EAII,EAJJA,eACAe,EAGI,EAHJA,QACAuC,EAEI,EAFJA,gBACAiC,EACI,EADJA,OAEM5G,EAAUlB,KAWhB,OACE,6BACE,kBAAC,GAAD,CACE+G,QAAQ,YACRC,MAAM,UACN7F,UAAW2G,EAAS5G,EAAQwG,aAAexG,EAAQwF,OACnDO,UAAW,kBAAC,KAAD,MACXC,QAAS,WAfT3E,EAAeC,SAAS,WAC1BqD,EACEsB,GAA0B7D,EAASf,GACnC,kBAcEqF,EAAmBrF,KAGpB,Q,oBC9DHuD,GAAeC,YAAW,CAC9BC,KAAM,CACJlF,OAAQ,EACRmF,WAAY,EACZC,cAAe,EACfC,YAAa,GACbC,aAAc,EACdC,SAAU,GACVC,gBAAiB,SAEnBC,MAAO,CACLC,QAAS,IAXQT,CAalBU,KAEGzG,GAAYC,aAAW,iBAAO,CAClCyG,OAAQ,CACNC,UAAW,EACX/F,WAAY,OA4BDgG,eAAQ,MAJI,SAACC,GAAD,MAAe,CACxCrB,oBAAqB,SAAC3C,GAAD,OAAWgE,EAASrB,GAAoB3C,QAGhD+D,EAxBC,SAAC,GAA6B,IAA3BpB,EAA0B,EAA1BA,oBACXtE,EAAUlB,KAEhB,OACE,6BACE,kBAAC,GAAD,CACE+G,QAAQ,YACRC,MAAM,UACN7F,UAAWD,EAAQwF,OACnBO,UAAW,kBAAC,KAAD,MACXC,QAAS,WACP1B,GAAoB,KAGrB,Q,oBCpCHM,GAAeC,YAAW,CAC9BC,KAAM,CACJ+B,SAAU,WACVC,OAAQ,GACR1B,gBAAiB,qBACjB2B,UAAW,OACXnH,OAAQ,OACRoH,cAAe,OACfC,WAAY,SACZ,UAAW,CACT7B,gBAAiB,qBACjBxF,OAAQ,OACRmH,UAAW,SAGf1B,MAAO,CACLC,QAAS,EACT2B,WAAY,SAjBKpC,CAmBlBU,KAEGzG,GAAYC,YAAW,CAC3B+F,KAAM,CACJ+B,SAAU,SACVnH,WAAY,MAqCDgG,eAAQ,MAJI,SAACC,GAAD,MAAe,CACxC5B,kBAAmB,SAACpC,GAAD,OAAWgE,EAAS5B,GAAkBpC,QAG5C+D,EAjCS,SAAC,GAAmC,IAAjC3B,EAAgC,EAAhCA,kBAAmB6C,EAAa,EAAbA,OACtC5G,EAAUlB,KAEhB,OAAI8H,EAEA,kBAAC,GAAD,CACEf,QAAQ,YACRC,MAAM,UACNC,UAAW,kBAAC,KAAD,MACXC,QAAS,kBAAMjC,GAAkB,IACjC9D,UAAWD,EAAQ8E,MALrB,iBAYA,kBAAC,GAAD,CACEe,QAAQ,YACRC,MAAM,UACNC,UAAW,kBAAC,KAAD,MACXC,QAAS,kBAAMjC,GAAkB,KAJnC,oBC5CAmD,GAAmB1H,YAAOC,IAAPD,CAAY,CACnCP,QAAS,OACTmG,gBAAiB,qBACjBjG,OAAQ,GACRgI,qBAAsB,GACtBC,oBAAqB,GACrBC,aAAc,iCAaDC,GAVG,SAAC,GAAD,IAAGV,EAAH,EAAGA,OAAH,OAChB,kBAACM,GAAD,MACIN,GAAU,kBAAC,EAAD,MACXA,GAAU,kBAACW,GAAD,CAAcX,OAAQA,KAC/BA,GAAU,kBAAC,GAAD,MACZ,kBAACY,GAAD,CAAuBZ,OAAQA,IAC/B,kBAAC,GAAD,Q,qECTE9H,GAAYC,aAAW,iBAAO,CAClC+F,KAAM,CACJ,QAAS,CACPxF,QAAS,QAsDAoG,gBAZS,SAACvF,GAAD,MAAY,CAClCiC,QAASD,EAAWhC,GACpB6C,iBAAkBD,EAAoB5C,OAGb,SAACwF,GAAD,MAAe,CACxChB,gBAAiB,SAACgC,EAAYnF,GAAb,OACfmE,EAAShB,GAAgBgC,EAAYnF,KACvCiG,aAAc,SAAClH,GAAD,OAAcoF,EP3CF,SAACpF,GAAD,MAAe,CAAEF,KXtBhB,gBWsBqCE,YO2C3BkH,CAAalH,KAClD2D,aAAc,SAAC3D,GAAD,OAAcoF,EAASzB,GAAa3D,QAGrCmF,EAjDY,SAAC,GAOrB,IANL+B,EAMI,EANJA,aACAlH,EAKI,EALJA,SACA6B,EAII,EAJJA,QACAuC,EAGI,EAHJA,gBACAT,EAEI,EAFJA,aACAlB,EACI,EADJA,iBAEMhD,EAAUlB,KAahB,OACE,yBACEmB,UAAWD,EAAQ8E,KACnBkB,QAAS,WACP9B,EAAa3D,GAbf0F,GAA0B7D,EAASY,GAAkB7B,OAAS,GAE9DwD,EACEsB,GAA0B7D,EAASY,GACnC,kBAWAyE,EAAalH,KAGf,kBAACmH,GAAA,EAAD,CAAYC,aAAW,UACrB,kBAAC,KAAD,CAAYC,SAAS,e,oBC9CvB9I,GAAYC,aAAW,iBAAO,CAClC+F,KAAM,CACJ,QAAQ,aACNxF,QAAS,GAER,2BAA6B,CAC5BI,WAAY,UAiCLgG,eAAQ,MALI,SAACC,GAAD,MAAe,CACxC3B,uBAAwB,SAACrC,GAAD,OAAWgE,EAAS3B,GAAuBrC,KACnEuC,aAAc,SAAC3D,GAAD,OAAcoF,EAASzB,GAAa3D,QAGrCmF,EA3BW,SAAC,GAIpB,IAHL1B,EAGI,EAHJA,uBACAzD,EAEI,EAFJA,SACA2D,EACI,EADJA,aAEMlE,EAAUlB,KAEhB,OACE,yBACEmB,UAAWD,EAAQ8E,KACnBkB,QAAS,WACPhC,GAAuB,GACvBE,EAAa3D,KAGf,kBAACmH,GAAA,EAAD,CAAYC,aAAW,UACrB,kBAAC,KAAD,CAAUC,SAAS,eChBrBC,GAAQ,CACZ/B,MAAO,SAGHhH,GAAYC,YAAW,CAC3BsG,OAAK,IACHpG,QAAS,QACTkG,SAAU,IACVyC,SAAU,GACVtC,QAAS,EACTJ,aAAc,GALX,eAOF,4BAA8B,CAC7BC,SAAU,QART,eAUF,2BAA6B,CAC5ByC,SAAU,GACVtC,QAAS,mBACTH,SAAU,QAbT,eAeF,2BAA6B,CAC5BA,SAAU,QAhBT,eAkBF,2BAA6B,CAC5BA,SAAU,QAnBT,eAqBF,2BAA6B,CAC5BA,SAAU,QAtBT,IAyBL2C,qBAAmB,IACjBF,SAAU,GACVtI,OAAQ,QACRgG,QAAS,GAHQ,eAKhB,2BAA6B,CAC5BsC,SAAU,GACV1I,MAAO,MACP+F,YAAa,KARE,eAUhB,2BAA6B,CAC5B/F,MAAO,QAXQ,IAcnB6I,gBAAiB,CACf7I,MAAO,IACP0I,SAAU,GACVnC,UAAW,GACXH,QAAS,KAIP0C,GAAexI,YAAOC,IAAPD,CAAY,CAC/BP,QAAS,OACTgI,WAAY,aAUd,IAAMgB,GAA8B,MAiHrBvC,gBAbS,SAACvF,GAAD,MAAY,CAClC+H,gCAAiCzF,EAAgCtC,GACjE6C,iBAAkBD,EAAoB5C,OAGb,SAACwF,GAAD,MAAe,CACxC3B,uBAAwB,SAACrC,GAAD,OAAWgE,EAAS3B,GAAuBrC,KACnEsC,iBAAkB,SAACzD,EAAYD,GAAb,OAChBoF,EAAS1B,GAAiBzD,EAAYD,KACxC2D,aAAc,SAAC3D,GAAD,OAAcoF,EAASzB,GAAa3D,KAClDkE,mBAAoB,SAAClE,GAAD,OAAcoF,EAASlB,GAAmBlE,QAGjDmF,EA/GA,SAAC,GAST,IARLyC,EAQI,EARJA,kBACAxH,EAOI,EAPJA,OACAsD,EAMI,EANJA,iBACAC,EAKI,EALJA,aACAlB,EAII,EAJJA,iBACAkF,EAGI,EAHJA,gCACAlE,EAEI,EAFJA,uBACAS,EACI,EADJA,mBAEMzE,EAAUlB,KACR0B,EAAyBG,EAAzBH,WAAYD,EAAaI,EAAbJ,SAFhB,EAGsC6H,mBAAS,IAH/C,oBAGGC,EAHH,KAGkBC,EAHlB,OASgCC,aAAQ,CAC1CC,OAAQP,GACRQ,KAAM,iBAAO,CACXC,KAAMnI,EACN4H,sBAEFQ,QAAS,SAACC,GAAD,MAAc,CACrBC,OAAQD,EAAQC,SAChBC,QAASF,EAAQE,cAjBjB,2BASKA,EATL,EASKA,QAASD,EATd,EAScA,OAAUJ,EATxB,KAqBErD,EAvCR,SAA+B2D,EAAUD,GACvC,OAAIC,EAAiB,YACjBD,EAAgB,YAEb,GAmCiBE,CADPF,GAAWD,EAC4BC,GAExD,OACG9F,IAAqBzC,GAAa2H,EAGjC,6BACE,2BACEe,UAAU,KACVC,WAAS,EACTC,YAAY,aACZC,aAAc5I,EACd6I,SAAU,SAACC,GA5BO,IAAC3H,IA6BC2H,EAAEC,OAAO5H,MA5BnC2G,EAAiB3G,GA6BTsC,EAAiBoE,EAAe9H,IAElCiJ,OAAQ,WACNxF,GAAuB,IAEzB3D,KAAK,OACLJ,UAAWD,EAAQ8H,uBAMV,mBAAbvH,EAEA,yBAAKsH,MAAK,eAAOA,GAAP,CAAczC,qBACtB,wBACEyC,MAAO,CAAE1I,OAAQ,OAAQF,QAAS,QAClC+G,QAAS,WACP9B,EAAa3D,GACbkE,EAAmBlE,IAErBN,UAAWwJ,KAAG,YAAa,CACzBC,SAAU1G,IAAqBzC,KAGjC,kBAACyH,GAAD,KACE,2BAAO/H,UAAWD,EAAQqF,OAAQ7E,MAQ1C,yBAAKmJ,IAAKlB,EAAMZ,MAAK,eAAOA,GAAP,CAAczC,qBACjC,wBACEY,QAAS,WACP9B,EAAa3D,GACbkE,EAAmBlE,IAErBN,UAAWwJ,KAAG,YAAa,CACzBC,SAAU1G,IAAqBzC,KAGjC,kBAACyH,GAAD,KACE,2BAAO/H,UAAWD,EAAQqF,OAAQ7E,GAClC,kBAAC,GAAD,CAAoBD,SAAUA,IAC9B,kBAAC,GAAD,CAAsBA,SAAUA,UCpKpCzB,GAAYC,YAAW,CAC3B6K,MAAM,aACJ1K,MAAO,MACPD,QAAS,QACT2I,SAAU,GACVtC,QAAS,EACTuE,YAAa,GAEZ,4BAA8B,CAC7B3K,MAAO,QAGX4K,YAAY,aACV5K,MAAO,MACPD,QAAS,QACT2I,SAAU,GACVtC,QAAS,EACTL,YAAa,IAEZ,2BAA6B,CAC5B/F,MAAO,UA0FEwG,gBAdS,SAACvF,GAAD,MAAY,CAClCiC,QAASD,EAAWhC,GACpB4J,2BAA4BxH,EAA2BpC,OAG9B,SAACwF,GAAD,MAAe,CACxCqE,UAAW,SAACrJ,GAAD,OAAYgF,EV3FA,SAAChF,GAAD,MAAa,CAAEN,KXtBd,aWsBgCM,UU2FxBqJ,CAAUrJ,KAC1CoD,kBAAmB,SAACpC,GAAD,OAAWgE,EAAS5B,GAAkBpC,KACzDsC,iBAAkB,SAACzD,EAAYD,GAAb,OAChBoF,EAAS1B,GAAiBzD,EAAYD,KACxC2D,aAAc,SAAC3D,GAAD,OAAcoF,EAASzB,GAAa3D,KAClDkE,mBAAoB,SAACwF,GAAD,OAAgBtE,EAASlB,GAAmBwF,QAGnDvE,EArFC,SAAC,GAQV,IAPLtD,EAOI,EAPJA,QACA2H,EAMI,EANJA,2BACAhG,EAKI,EALJA,kBACAiG,EAII,EAJJA,UACA9F,EAGI,EAHJA,aACA0C,EAEI,EAFJA,OACAnC,EACI,EADJA,mBAEMzE,EAAUlB,KADZ,EAEsCsJ,mBAAS,CACjD7H,SAAU,KACVC,WAAY,KACZC,kBAAmB,KALjB,oBAEGyJ,EAFH,KAEkBC,EAFlB,KAkBJ,OACE,oCACE,6BACG/H,EAAQjB,OAAS,GAChB,wBAAI0G,MAAO,CAAEpC,UAAW,MACrBrD,EAAQvB,KAAI,SAACF,GAAD,OACX,kBAAC,GAAD,CACEwH,kBAAkB,OAClBxH,OAAQA,EACRyJ,IAAKzJ,EAAOJ,SACZqG,OAAQA,OAIXmD,GACC,6BACE,2BACEd,UAAU,KACVC,WAAS,EACTC,YAAY,aACZE,SAAU,SAACC,GAAD,OA9BC3H,EA8BwB2H,EAAEC,OAAO5H,WA7B1DwI,GAAiB,SAACE,GAChB,OAAO,eACFA,EADL,CAEE9J,SAAS,YAAD,QAAe,IAAI+J,MAC3B9J,WAAYmB,OALQ,IAACA,GA+BX6H,OAAQ,WACNzF,GAAkB,GAEa,OAA7BmG,EAAc1J,YACsB,KAApC0J,EAAc1J,WAAW+J,SAI3BP,EAAUE,GACVhG,EAAagG,EAAc3J,UAC3BkE,EAAmByF,EAAc3J,YAEnCF,KAAK,OACLJ,UAAW2G,EAAS5G,EAAQ8J,YAAc9J,EAAQ4J,e,oBC3F9D9K,GAAYC,aAAW,iBAAO,CAClC+F,KAAM,CACJ,QAAS,CACPxF,QAAS,QA2BAoG,eAAQ,MAJI,SAACC,GAAD,MAAe,CACxC6E,WAAY,SAACxJ,GAAD,OAAY2E,EXgBA,SAAC3E,GAAD,MAAa,CACrCX,KXxCyB,cWyCzBW,UWlBiCwJ,CAAWxJ,QAG/B0E,EAtBU,SAAC,GAGnB,IAFL1E,EAEI,EAFJA,OACAwJ,EACI,EADJA,WAEMxK,EAAUlB,KAEhB,OACE,yBACEmB,UAAWD,EAAQ8E,KACnBkB,QAAS,kBAAMwE,EAAWxJ,KAE1B,kBAAC0G,GAAA,EAAD,CAAYC,aAAW,UACrB,kBAAC,KAAD,CAAYC,SAAS,eCnBvB9I,GAAYC,aAAW,iBAAO,CAClC+F,KAAM,CACJ,QAAQ,aACNxF,QAAS,GAER,2BAA6B,CAC5BI,WAAY,UA6BLgG,eAAQ,MALI,SAACC,GAAD,MAAe,CACxCpB,qBAAsB,SAAC5C,GAAD,OAAWgE,EAASpB,GAAqB5C,KAC/D6C,WAAY,SAACxD,GAAD,OAAY2E,EAASnB,GAAWxD,QAG/B0E,EAvBS,SAAC,GAAkD,IAAhD1E,EAA+C,EAA/CA,OAAQuD,EAAuC,EAAvCA,qBAAsBC,EAAiB,EAAjBA,WACjDxE,EAAUlB,KAEhB,OACE,yBACEmB,UAAWD,EAAQ8E,KACnBkB,QAAS,WACPzB,GAAqB,GACrBC,EAAWxD,KAGb,kBAAC0G,GAAA,EAAD,CAAYC,aAAW,UACrB,kBAAC,KAAD,CAAUC,SAAS,eCRrB6C,GAAcjL,YAAOC,IAAPD,CAAY,CAC9BP,QAAS,OACTC,MAAO,IACP+H,WAAY,aAGRnI,GAAYC,aAAW,yBAAO,CAClC2L,mBAAiB,GACfvF,SAAU,IACVyC,SAAU,GACVtI,OAAQ,QACRH,OAAQ,IAJO,cAMd,2BAA6B,CAC5ByI,SAAU,GACV1I,MAAO,OACPoG,QAAS,EACTL,YAAa,KAVA,cAYd,2BAA6B,CAC5B/F,MAAO,QAbM,GAgBjByL,WAAS,GACP1L,QAAS,QACTkG,SAAU,IACVyC,SAAU,GACVtC,QAAS,EACTJ,aAAc,GALP,cAON,2BAA6B,CAC5B0C,SAAU,GACVtC,QAAS,mBACTH,SAAU,SAVL,cAYN,2BAA6B,CAC5BA,SAAU,SAbL,cAeN,2BAA6B,CAC5BA,SAAU,SAhBL,cAkBN,2BAA6B,CAC5BA,SAAU,OACVF,YAAa,KApBR,OAyBL4C,GAAQ,CACZzC,gBAAiB,QACjBlG,MAAO,eAGH0L,GAAiB,CACrBxF,gBAAiB,QACjBlG,MAAO,QAGH+I,GAA8B,MA+HrBvC,gBAjBS,SAACvF,GAAD,MAAY,CAClC0K,8BAA+BhI,EAA8B1C,GAC7D+C,eAAgBD,EAAkB9C,GAClCiC,QAASD,EAAWhC,OAGK,SAACwF,GAAD,MAAe,CACxCpB,qBAAsB,SAAC5C,GAAD,OAAWgE,EAASpB,GAAqB5C,KAC/D6C,WAAY,SAACxD,GAAD,OAAY2E,EAASnB,GAAWxD,KAC5C0D,WAAY,SAAC/C,GAAD,OAAWgE,EAASjB,GAAW/C,KAC3CwC,QAAS,SAAC2G,EAAmB/J,GAApB,OAA6B4E,EAASxB,GAAQ2G,EAAmB/J,KAC1EsD,eAAgB,SAACnD,EAAUF,GAAX,OAAsB2E,EAAStB,GAAenD,EAAUF,KACxE+J,oBAAqB,SAACxK,EAAUS,GAAX,OACnB2E,EbvH+B,SAACpF,EAAUS,GAAX,MAAuB,CACxDX,KXhEqC,0BWiErCE,WACAS,UaoHW+J,CAAoBxK,EAAUS,KACzCyD,mBAAoB,SAACxC,GAAD,OAAY0D,EAASlB,GAAmBxC,QAG/CyD,EA7HF,SAAC,GAaP,IAZL3E,EAYI,EAZJA,KACA8J,EAWI,EAXJA,8BACArG,EAUI,EAVJA,WACAtB,EASI,EATJA,eACAqB,EAQI,EARJA,qBACAG,EAOI,EAPJA,WACAP,EAMI,EANJA,QACAE,EAKI,EALJA,eACA0G,EAII,EAJJA,oBACA3I,EAGI,EAHJA,QACAqC,EAEI,EAFJA,mBACAmC,EACI,EADJA,OAEM5G,EAAUlB,KACRoC,EAAqBH,EAArBG,SAAUF,EAAWD,EAAXC,OAFd,EAGkCoH,mBAAS,IAH3C,oBAGG4C,EAHH,KAGgBC,EAHhB,KASEC,EAAI,eAAQnK,EAAR,CAAcV,KAAM4H,KAT1B,EAUwBkD,aAAQ,CAClCD,OACAE,IAFkC,SAE9BF,EAAMtC,GACR,IAAMyC,EAAazC,EAAQ0C,gBAC3B,GAAIJ,GAAQG,IAEyB,QAAjCA,EAAWlD,mBACXkD,EAAWlD,oBAAsBkD,EAAWE,YAC3B,CAQjB,IAAMT,EAAoBlC,EAAQ0C,gBAAgB5C,KAC5C8C,EAAgBpJ,EAAQgE,MAAK,SAACzF,EAAQ2F,GAC1C,IAAImF,EAAa,KAMjB,OALInF,EAAI,IACNmF,EAAa9K,EAAOF,kBAAkBiL,MACpC,SAAC3K,GAAD,OAAUA,EAAKC,SAAWA,MAGvByK,KAGLD,GAAiBA,EAAcjL,UACjCwK,EAAoBS,EAAcjL,SAASS,GAE7CmD,EAAQ2G,EAAmB/J,KAIjC4H,QAAS,SAACC,GAAD,MAAc,CACrB+C,QAAS/C,EAAQgD,aAAe,GAAM,MA7CtC,oBAUKD,EAVL,KAUKA,QAAWE,EAVhB,KAiDJ,OAAI3I,IAAmBlC,GAAU6J,EAE7B,6BACE,2BACE3B,WAAS,EACTD,UAAU,KACV5I,KAAK,OACL8I,YAAY,WACZC,aAAclI,EACdjB,UAAWD,EAAQ0K,kBACnBrB,SAAU,SAACC,GAAD,OAtDS3H,EAsDgB2H,EAAEC,OAAO5H,WArDlDsJ,EAAetJ,GADS,IAACA,GAuDnB6H,OAAQ,WACNjF,GAAqB,GACD,KAAhByG,GACJ3G,EAAe2G,EAAahK,OAOlC,yBACE2I,IAAKkC,EACLhE,MAAOjB,EAAM,eAAQgE,GAAR,CAAwBe,YAAxB,eAAyC9D,GAAzC,CAAgD8D,aAE7D,wBACEG,cAAe,kBAAMpH,GAAW,IAChCsB,QAAS,WACPxB,EAAWxD,GACXyD,EAAmBzD,IAErBf,UAAWwJ,KAAG,WAAY,CACxBC,SAAUxG,IAAmBlC,KAG/B,kBAACyJ,GAAD,KACE,2BAAOxK,UAAWD,EAAQ2K,WAAYzJ,GACtC,kBAAC6K,GAAD,CAAe/K,OAAQA,IACvB,kBAAC,GAAD,CAAiBA,OAAQA,UCxLtB,SAASgL,GAAaC,EAAOC,GAC1C,IAAMjL,EAAWgL,EAAM7F,MAAK,SAACrF,GAAD,OAAUA,EAAKC,SAAWkL,KAA0BjL,SAChF,OAAiB,OAAbA,EAA0B,GAEvBA,ECJM,SAASR,GAAkB2B,EAASY,GACjD,IACMmJ,EADY/J,EAAQ,GACqB3B,kBACzCgL,EAAarJ,EAAQxB,QACzB,SAAAD,GAAM,OAAIA,EAAOJ,WAAayC,KAEzBrC,EAN2D,aAMjD8K,EANiD,MAOlE,IAAK9K,EAAQ,OAAOwL,EAP8C,IAQ1D1L,EAAsBE,EAAtBF,kBACR,OAAIA,GAEG,G,kCCXM,SAAS2L,GAAaH,EAAOC,GAC1C,IAAMhL,EAAW+K,EAAM7F,MAAK,SAACrF,GAAD,OAAUA,EAAKC,SAAWkL,KAA0BhL,SAChF,OAAiB,OAAbA,EAA0B,GAEvBA,ECkBT,IA2EewE,gBAbS,SAACvF,GAAD,MAAY,CAClCiC,QAASD,EAAWhC,GACpBkD,eAAgBD,EAAkBjD,GAClC+C,eAAgBD,EAAkB9C,GAClC6C,iBAAkBD,EAAoB5C,OAGb,SAACwF,GAAD,MAAe,CACxCjB,WAAY,SAAC/C,GAAD,OAAWgE,EAASjB,GAAW/C,KAC3C0C,eAAgB,SAACnD,EAAUF,GAAX,OAAsB2E,EAAStB,GAAenD,EAAUF,KACxEoD,eAAgB,SAACnD,EAAUD,GAAX,OAAsB2E,EAASvB,GAAenD,EAAUD,QAG3D0E,EA3Ec,SAAC,GAQvB,IAPLtD,EAOI,EAPJA,QACAiB,EAMI,EANJA,eACAqB,EAKI,EALJA,WACAxB,EAII,EAJJA,eACAkB,EAGI,EAHJA,eACAC,EAEI,EAFJA,eACArB,EACI,EADJA,iBAUA,OACE,6BACE,kBAACqJ,GAAA,EAAD,CACEC,KAAMjJ,EACNkJ,QAAS,kBAAM7H,GAAW,IAC1B8H,kBAAgB,qBAEhB,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,gCACA,0BACEC,YAAU,EACVC,aAAa,MACb/E,MAAO,CAAE5I,QAAS,OAAQ4N,cAAe,UACzCrD,OAAQ,WAAO9E,GAAW,KAE1B,kBAACoI,GAAA,EAAD,CACEC,KAAK,IACLC,WAAS,EACT3H,MAAM,YACNQ,QAAQ,WACRoH,GAAG,4BACHtL,MAAOyK,GACL3L,GAAkB2B,EAAQY,GAAmBE,GAE/CmG,SAAU,SAACC,GAAD,OA5BU3H,EA4BoB2H,EAAEC,OAAO5H,WA3B3D0C,EAAe1C,EAAOuB,GADO,IAACvB,GA6BpBkG,MAAO,CAAEqF,aAAc,UAEzB,kBAACJ,GAAA,EAAD,CACEC,KAAK,IACLC,WAAS,EACT3H,MAAM,OACNQ,QAAQ,WACRoH,GAAG,4BACHtL,MAAOqK,GACLvL,GAAkB2B,EAAQY,GAAmBE,GAE/CmG,SAAU,SAACC,GAAD,OA5CU3H,EA4CoB2H,EAAEC,OAAO5H,WA3C3DyC,EAAezC,EAAOuB,GADO,IAACvB,YCN5BwL,GAAkB3N,YAAOC,IAAPD,CAAY,CAClC4N,WAAY,iCAGRtO,GAAYC,aAAW,6BAAO,CAClC+F,KAAM,CACJ,uBAAuB,aACrBxF,OAAQ,GACP,2BAA6B,CAC5BmG,UAAW,KAGf,+BACEpG,aAAc,EACd0F,WAAY,EACZ7F,MAAO,IACPC,OAAQ,IACRkO,wBAAyB,IAL3B,cAOG,4BAA8B,CAC7BnO,MAAO,IACPC,OAAQ,KATZ,cAWG,2BAA6B,CAC5BA,OAAQ,MAZZ,cAcG,2BAA6B,CAC5BD,MAAO,OACPC,OAAQ,MAhBZ,cAkBG,2BAA6B,CAC5BD,MAAO,OACPoO,uBAAwB,KApB5B,GAuBA,qCACEnO,OAAQ,KADV,cAGG,4BAA8B,CAC7B4F,WAAY,GACZ5F,OAAQ,KALZ,cAOG,2BAA6B,CAC5B4F,WAAY,GACZ5F,OAAQ,MATZ,IAaFoO,gBAAc,GACZ9H,UAAW,GACXvG,MAAO,IACPC,OAAQ,GACRyI,SAAU,IAJE,cAMX,2BAA6B,CAC5B1I,MAAO,MACPD,QAAS,QACT2I,SAAU,GACVtC,QAAS,EACTL,YAAa,KAXH,cAaX,2BAA6B,CAC5B/F,MAAO,SAdG,cAgBX,2BAA6B,CAC5BA,MAAO,SAjBG,GAoBd0K,OAAK,GACH1K,MAAO,MACPD,QAAS,QACT2I,SAAU,GACVzI,OAAQ,IAJL,cAMF,2BAA6B,CAC5BD,MAAO,MACPD,QAAS,QACT2I,SAAU,GACVtC,QAAS,EACTL,YAAa,KAXZ,cAaF,2BAA6B,CAC5B/F,MAAO,SAdN,OAmBDsO,GAAmC3I,aAAW,yBAAO,CACzDC,KAAM,CACJ,+BACE5F,MAAO,KADT,cAGG,4BAA8B,CAC9BA,MAAO,IACPC,OAAQ,MALX,cAQG,2BAA6B,CAC5BD,MAAO,MATX,GAaA,qDACG,4BAA8B,CAC7B6F,WAAY,GACZ5F,OAAQ,MAHZ,cAMG,2BAA6B,CAC5BA,OAAQ,MAPZ,OAfqC0F,CA0BrCiI,MAgLWpH,gBAhBS,SAACvF,GAAD,MAAY,CAClCiC,QAASD,EAAWhC,GACpByC,0BAA2BD,EAA6BxC,GACxDkD,eAAgBD,EAAkBjD,GAClCmC,gBAAiBD,EAAmBlC,GACpC6C,iBAAkBD,EAAoB5C,GACtC+C,eAAgBD,EAAkB9C,OAGT,SAACwF,GAAD,MAAe,CACxCrB,oBAAqB,SAAC3C,GAAD,OAAWgE,EAASrB,GAAoB3C,KAC7D6C,WAAY,SAACxD,GAAD,OAAY2E,EAASnB,GAAWxD,KAC5CmD,QAAS,SAAC5D,EAAUQ,GAAX,OAAoB4E,EAASxB,GAAQ5D,EAAUQ,KACxDqD,eAAgB,SAACnD,EAAUD,GAAX,OAAsB2E,EAASvB,GAAenD,EAAUD,QAG3D0E,EA9KD,SAAC,GAYR,IAXLtD,EAWI,EAXJA,QACAQ,EAUI,EAVJA,0BACA0B,EASI,EATJA,oBACAjB,EAQI,EARJA,eACAmB,EAOI,EAPJA,WACAtB,EAMI,EANJA,eACAZ,EAKI,EALJA,gBACA6B,EAII,EAJJA,QACAC,EAGI,EAHJA,eACApB,EAEI,EAFJA,iBACA4D,EACI,EADJA,OAEM5G,EAAUlB,KADZ,EAEkCsJ,mBAAS,CAC7CpH,OAAQ,KACRE,SAAU,KACVD,SAAU,OALR,oBAEGwM,EAFH,KAEgBC,EAFhB,KAQEC,EAAoB,SAAChM,GACzB+L,GAAe,SAACrD,GACd,OAAO,eACFA,EADL,CAEErJ,OAAO,UAAD,QAAa,IAAIsJ,MACvBpJ,SAAUS,QAKViM,EAAwB,SAACjM,GAC7ByC,EAAezC,EAAOuB,IAGlB2K,EAAqB,WACzB,IAAMC,EAAiB1L,EAAQxB,QAC7B,SAACD,GAAD,OACEA,EAAOJ,WAAayC,GACA,mBAApBrC,EAAOJ,YAGX,QAP+B,aAMduN,EANc,OAW3B7B,EAAQxL,GAAkB2B,EAASY,GAEzC,OACE,oCACGJ,GAA6BqJ,EAAM9K,OAAS,GAC3C,2BACE+H,WAAS,EACT7I,KAAK,OACL4I,UAAU,KACVE,YAAY,WACZlJ,UAAWD,EAAQuN,eACnBlE,SAAU,SAACC,GAAD,OAAOqE,EAAkBrE,EAAEC,OAAO5H,QAC5C6H,OAAQ,WACNlF,GAAoB,GAGO,OAAzBmJ,EAAYvM,UACoB,KAAhCuM,EAAYvM,SAASqJ,SAKvBmD,EAAe,CACb1M,OAAQ,KACRE,SAAU,KACVD,SAAU,OAEZuD,EAAWiJ,EAAYzM,QAEnB6M,IACF1J,EAAQ,iBAAkBsJ,IAE1BtJ,EAAQ,iBAAkBsJ,GAC1BtJ,EAAQnB,EAAkByK,QAKjCxB,EAAM9K,OAAS,GACd,oCACE,yBAAKlB,UAAWD,EAAQ8E,MACtB,4BACGmH,EAAMpL,KAAI,SAACE,GAAD,OACT,kBAAC,GAAD,CAAMA,KAAMA,EAAMqJ,IAAKrJ,EAAKC,OAAQ4F,OAAQA,OAE7ChE,GACC,6BACE,2BACEsG,WAAS,EACT7I,KAAK,OACL4I,UAAU,KACVE,YAAY,WACZlJ,UAAWD,EAAQ4J,MACnBP,SAAU,SAAAC,GAAC,OAAIqE,EAAkBrE,EAAEC,OAAO5H,QAC1C6H,OAAQ,WACNlF,GAAoB,GAGO,OAAzBmJ,EAAYvM,UACoB,KAAhCuM,EAAYvM,SAASqJ,SAIvB/F,EAAWiJ,EAAYzM,QAEnB6M,IACF1J,EAAQ,iBAAkBsJ,IAE1BtJ,EAAQ,iBAAkBsJ,GAC1BtJ,EAAQnB,EAAiByK,UAOpCpK,GAAkB,kBAAC,GAAD,OAEpB4I,EAAM7F,MAAK,SAACrF,GAAD,OAAUA,EAAKC,SAAWkC,MACpC,kBAACiK,GAAD,KACE,0BAAMlN,UAAWD,EAAQ8E,KAAM6H,YAAU,EAACC,aAAa,QACnDtK,GACA,kBAACwK,GAAA,EAAD,CACEC,KAAK,KACLC,WAAS,EACT3H,MAAM,OACNQ,QAAQ,WACRoH,GAAG,4BACHtL,MAAOqK,GAAaC,EAAO/I,GAC3BmG,SAAU,SAACC,GAAD,OAAOsE,EAAsBtE,EAAEC,OAAO5H,UAInDW,GACC,kBAACkL,GAAD,CACET,KAAK,KACLC,WAAS,EACT3H,MAAM,OACNQ,QAAQ,WACRoH,GAAG,4BACHtL,MAAOqK,GAAaC,EAAO/I,GAC3BmG,SAAU,SAACC,GAAD,OAAOsE,EAAsBtE,EAAEC,OAAO5H,iBClR9DoM,GAASvO,YAAOC,IAAPD,CAAY,CACzBP,QAAS,SAGLH,GAAYC,aAAW,SAACiP,GAAD,YAAY,CACvClJ,MAAI,GACFxF,OAAQ,aACRJ,MAAO,IACPC,OAAQ,IACRS,OAAQ,oBACRP,aAAc,GACd0H,UAAW,4DANT,cAQD,4BAA8B,CAC7B7H,MAAO,MATP,cAWD,2BAA6B,CAC5BI,OAAQ,EACRH,OAAQ,IACRD,MAAO,OACPkG,gBAAiB,uBAfjB,GAkBJ6I,WAAW,aACThP,QAAS,OACTC,MAAO,QACN,4BAA8B,CAC7B2N,cAAe,SACf3N,MAAO,MAGXgP,uBAAuB,aACrBjP,QAAS,OACTC,MAAO,QAEN8O,EAAMG,YAAYC,QAAQ,KAAM,OAAS,CACxCvB,cAAe,QAInBzK,QAAQ,aACNlD,MAAO,IACPC,OAAQ,IACR0H,SAAU,WACVvB,QAAS,GACT+I,YAAa,+BACbjJ,gBAAiB,qBACjBkI,uBAAwB,IAEvB,4BAA8B,CAC7BpO,MAAO,MAGXoP,OAAQ,CACNrP,QAAS,YAgDEyG,gBAJS,SAACvF,GAAD,MAAY,CAClCmC,gBAAiBD,EAAmBlC,MAGE,KAAzBuF,EA5CH,SAAC,GAAyB,IAAvBpD,EAAsB,EAAtBA,gBACPtC,EAAUlB,KACVkP,EAAQO,cAGd,OAFgBC,YAAcR,EAAMG,YAAYM,GAAG,OAa/C,oCACE,yBAAKxO,UAAWD,EAAQ8E,MACtB,kBAAC,GAAD,MACA,kBAACiJ,GAAD,KACE,yBAAK9N,UAAWqC,EAAkBtC,EAAQsO,OAAStO,EAAQoC,SACzD,kBAAC,GAAD,MACA,kBAACmF,GAAD,OAEF,yBACEtH,UACEqC,EACItC,EAAQkO,uBACRlO,EAAQiO,YAGd,kBAAC,GAAD,UAxBR,yBAAKhO,UAAWD,EAAQ8E,MACtB,kBAAC,GAAD,CAAW8B,QAAQ,IACnB,kBAAC,GAAD,CAASA,QAAQ,IACjB,6BACA,kBAAC,GAAD,CAAOA,QAAQ,Q,OCxEvB8H,IAASC,OACP,kBAAC,IAAD,CAAUnL,MAAOA,IACf,kBAAC,IAAMoL,WAAP,KACE,kBAACC,EAAA,EAAD,CAAaC,QAASC,KACpB,kBAAC,GAAD,SAINC,SAASC,eAAe,U","file":"static/js/main.9c6406f6.chunk.js","sourcesContent":["import React from \"react\"\nimport Box from \"@material-ui/core/Box\"\nimport { styled, makeStyles } from \"@material-ui/core/styles\"\n\nconst useStyles = makeStyles(() => ({\n  dot: {\n    display: \"inline-block\",\n    width: 10,\n    height: 10,\n    background: \"#f9f9f9\",\n    borderRadius: \"50%\",\n    margin: \"12px 8px 0 0\",\n  },\n}))\n\nconst DotsContainer = styled(Box)({\n  marginLeft: 10,\n})\n\nconst RedCircle = styled(Box)({\n  background: \"#FF6057\",\n  border: \"1px solid #E14640\",\n})\n\nconst AmberCircle = styled(Box)({\n  background: \"#FFBD2E\",\n  border: \"1px solid #DFA123\",\n})\n\nconst GreenCircle = styled(Box)({\n  background: \"#27C93F\",\n  border: \"1px solid #1DAD2B\",\n})\n\nconst DotButtonsSimulation = () => {\n  const classes = useStyles()\n\n  return (\n    <DotsContainer>\n      <RedCircle className={classes.dot} />\n      <AmberCircle className={classes.dot} />\n      <GreenCircle className={classes.dot} />\n    </DotsContainer>\n  )\n}\n\nexport default DotButtonsSimulation","import { HIDE_FOLDERS } from \"../types\"\n\nconst hideFoldersReducer = (state = false, action) => {\n  switch (action.type) {\n    case HIDE_FOLDERS:\n      return !state\n\n    default:\n      return state\n  }\n}\n\nexport default hideFoldersReducer\n","// folders types\nexport const HIDE_FOLDERS = \"HIDE_FOLDERS\"\nexport const ADD_FOLDER = \"ADD_FOLDER\"\nexport const DELETE_FOLDER = \"DELETE_FOLDER\"\nexport const PRESS_ADD_FOLDER_BTN = \"PRESS_ADD_FOLDER_BTN\"\nexport const PRESS_EDIT_FOLDER_NAME_BTN = \"PRESS_EDIT_FOLDER_NAME_BTN\"\nexport const CHANGE_FOLDER_NAME = \"CHANGE_FOLDER_NAME\"\nexport const SAVE_FOLDER_ID = \"SAVE_FOLDER_ID\"\n\n// notes types\nexport const ADD_NOTE = \"ADD_NOTE\"\nexport const DELETE_NOTE = \"DELETE_NOTE\"\nexport const CHANGE_NOTE_NAME = \"CHANGE_NOTE_NAME\"\nexport const CHANGE_NOTE_BODY = \"CHANGE_NOTE_BODY\"\nexport const PRESS_ADD_NOTE_NAME_BTN = \"PRESS_ADD_NOTE_NAME_BTN\"\nexport const PRESS_EDIT_NOTE_NAME_BTN = \"PRESS_EDIT_NOTE_NAME_BTN\"\nexport const SAVE_NOTE_ID = \"SAVE_NOTE_ID\"\n\n// common types\nexport const SAVE_SELECTED_ITEM_ID = \"SAVE_SELECTED_ITEM_ID\"\nexport const DELETE_SELECTED_ITEM = \"DELETE_SELECTED_ITEM\"\nexport const IS_DIALOG_OPENED = \"IS_DIALOG_OPENED\"\nexport const UPDATE_FOLDER_ALL = \"UPDATE_FOLDER_ALL\"\nexport const DELETE_NOTE_ON_DRAG_END = \"DELETE_NOTE_ON_DRAG_END\"\n","import {\n  ADD_FOLDER,\n  ADD_NOTE,\n  DELETE_FOLDER,\n  CHANGE_FOLDER_NAME,\n  CHANGE_NOTE_BODY,\n  CHANGE_NOTE_NAME,\n  DELETE_NOTE,\n  DELETE_NOTE_ON_DRAG_END,\n  DELETE_SELECTED_ITEM,\n  UPDATE_FOLDER_ALL,\n} from \"../types\"\n\nconst initialState = [\n  {\n    folderId: \"folderAllNotes\",\n    folderName: \"All\",\n    notesInThisFolder: [],\n  },\n]\n\nconst folderReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_FOLDER:\n      return [\n        ...state,\n        {\n          folderId: action.folder.folderId,\n          folderName: action.folder.folderName,\n          notesInThisFolder: [],\n        },\n      ]\n\n    case DELETE_FOLDER:\n      return state.filter((folder) => folder.folderId !== action.folderId)\n\n    case CHANGE_FOLDER_NAME:\n      return state.map((folder) => {\n        if (\n          action.folderId !== folder.folderId ||\n          folder.folderName === action.folderName\n        ) {\n          return folder\n        }\n\n        return {\n          ...folder,\n          folderName: action.folderName\n        }\n      })\n\n    case ADD_NOTE:\n      return state.map((folder, index) => {\n        if (\n          index === 0 &&\n          (action.folderId === \"folderAllNotes\") === folder.folderId\n        ) {\n          return {\n            ...folder,\n            notesInThisFolder: [...folder.notesInThisFolder, action.note],\n          }\n        }\n\n        if (folder.folderId === action.folderId) return {\n          ...folder,\n          notesInThisFolder: [...folder.notesInThisFolder, action.note]\n        }\n\n        return folder\n      })\n\n    case DELETE_NOTE_ON_DRAG_END:\n      return state.map((folder, index) => {\n        if (\n          index === 0 &&\n          action.folderId === \"folderAllNotes\" &&\n          action.folderId === folder.folderId\n        ) {\n          return folder\n        }\n\n        if (folder.folderId === action.folderId) {\n          return {\n            ...folder,\n            notesInThisFolder: folder.notesInThisFolder.filter(\n              (note) => note.noteId !== action.noteId\n            )\n          }\n        }\n\n        return folder\n      })\n\n    case CHANGE_NOTE_BODY:\n      return state.map((folder) => {\n        return {\n          ...folder,\n          notesInThisFolder: folder.notesInThisFolder.map((note) => {\n            if (\n              action.noteId !== note.noteId ||\n              action.noteBody === note.noteBody\n            ) {\n              return note\n            }\n\n            return {\n              ...note,\n              noteBody: action.noteBody,\n            }\n          })\n        }\n      })\n\n    case CHANGE_NOTE_NAME:\n      return state.map((folder) => {\n        return {\n          ...folder,\n          notesInThisFolder: folder.notesInThisFolder.map((note) => {\n            if (\n              action.noteId !== note.noteId ||\n              action.noteName === note.noteName\n            ) {\n              return note\n            }\n\n            return {\n              ...note,\n              noteName: action.noteName,\n            }\n          }),\n        }\n      })\n\n    case DELETE_NOTE:\n      return state.map((folder) => {\n        if (folder.notesInThisFolder.length === 0) {\n          return {\n            ...folder,\n            notesInThisFolder: [],\n          }\n        } else {\n          return {\n            ...folder,\n            notesInThisFolder: folder.notesInThisFolder.filter(\n              (note) => note.noteId !== action.noteId\n            )\n          }\n        }\n      })\n\n    case DELETE_SELECTED_ITEM:\n      const selectedItemIdFromAction = action.selectedItemId\n\n      if (selectedItemIdFromAction.includes(\"folder\")) {\n        return state.filter((folder, index) => {\n          if (\n            index === 0 &&\n            selectedItemIdFromAction === \"folderAllNotes\" &&\n            selectedItemIdFromAction === folder.folderId\n          ) {\n            return folder\n          } else {\n            return folder.folderId !== selectedItemIdFromAction\n          }\n        })\n      } else {\n        return state.map(folder => {\n          return {\n            ...folder,\n            notesInThisFolder: folder.notesInThisFolder.filter(\n              (note) => note.noteId !== selectedItemIdFromAction\n            )\n          }\n        })\n      }\n\n    case UPDATE_FOLDER_ALL:\n      if(action.arrayOfNotesIdThatWillBeDeleting.length === 0) return state\n       \n      return state.map((folder) => {\n        if (action.folderAllNotesId === \"folderAllNotes\") {\n          return {\n            ...folder,\n            notesInThisFolder: folder.notesInThisFolder.filter(\n              (note) => !action.arrayOfNotesIdThatWillBeDeleting.includes(note.noteId)\n            )\n          }\n        }\n        return folder\n        \n      })\n\n    default:\n      return state\n  }\n}\n\nexport default folderReducer\n","import { SAVE_FOLDER_ID } from \"../types\"\n\nconst saveFolderIdReducer = (state = \"folderAllNotes\", action) => {\n  switch (action.type) {\n    case SAVE_FOLDER_ID:\n      return action.folderId\n\n    default:\n      return state\n  }\n}\n\nexport default saveFolderIdReducer","import { PRESS_ADD_FOLDER_BTN } from \"../types\"\n\nconst pressAddFolderBtnReducer = (state = false, action) => {\n  switch (action.type) {\n    case PRESS_ADD_FOLDER_BTN:\n      return action.value\n\n    default:\n      return state\n  }\n}\n\nexport default pressAddFolderBtnReducer","import { PRESS_EDIT_FOLDER_NAME_BTN } from \"../types\"\n\nconst pressEditFolderNameBtnReducer = (state = false, action) => {\n  switch (action.type) {\n    case PRESS_EDIT_FOLDER_NAME_BTN:\n      return action.value\n\n    default:\n      return state\n  }\n}\n\nexport default pressEditFolderNameBtnReducer","import { PRESS_ADD_NOTE_NAME_BTN } from \"../types\"\n\nconst pressAddNoteNameBtnReducer = (state = false, action) => {\n  switch (action.type) {\n    case PRESS_ADD_NOTE_NAME_BTN:\n      return action.value\n\n    default:\n      return state\n  }\n}\n\nexport default pressAddNoteNameBtnReducer\n","import { PRESS_EDIT_NOTE_NAME_BTN } from \"../types\"\n\nconst pressEditNoteNameBtnReducer = (state = false, action) => {\n  switch (action.type) {\n    case PRESS_EDIT_NOTE_NAME_BTN:\n      return action.value\n\n    default:\n      return state\n  }\n};\n\nexport default pressEditNoteNameBtnReducer","import { SAVE_NOTE_ID } from \"../types\"\n\nconst saveNoteIdReducer = (state = \"\", action) => {\n  switch (action.type) {\n    case SAVE_NOTE_ID:\n      return action.noteId\n\n    default:\n      return state\n  }\n}\n\nexport default saveNoteIdReducer","import { SAVE_SELECTED_ITEM_ID } from \"../types\"\n\nconst saveSelectedItemIdReducer = (state = \"\", action) => {\n  switch (action.type) {\n    case SAVE_SELECTED_ITEM_ID:\n      return action.itemId\n\n    default:\n      return state\n  }\n}\n\nexport default saveSelectedItemIdReducer","import { IS_DIALOG_OPENED } from \"../types\"\n\nconst dialogReducer = (state = false, action) => {\n  switch (action.type) {\n    case IS_DIALOG_OPENED:\n      return action.value\n\n    default:\n      return state\n  }\n};\n\nexport default dialogReducer\n","import { createStore, combineReducers, applyMiddleware } from \"redux\"\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\n//reducers\nimport hideFoldersReducer from \"./reducers/hideFoldersReducer\"\nimport folderReducer from \"./reducers/folderReducer\"\nimport saveFolderIdReducer from \"./reducers/saveFolderIdReducer\"\nimport pressAddFolderBtnReducer from \"./reducers/pressAddFolderBtnReducer\"\nimport pressEditFolderNameBtnReducer from \"./reducers/pressEditFolderNameBtnReducer\"\nimport pressAddNoteNameBtnReducer from \"./reducers/pressAddNoteNameBtnReducer\"\nimport pressEditNoteNameBtnReducer from \"./reducers/pressEditNoteNameBtnReducer\"\nimport saveNoteIdReducer from \"./reducers/saveNoteIdReducer\"\nimport saveSelectedItemIdReducer from \"./reducers/saveSelectedItemIdReducer\"\nimport dialogReducer from \"./reducers/dialogReducer\"\n\n// selectors\nexport const getFolders = (state) => state.folders\nexport const getIsFoldersHidden = (state) => state.isFoldersHidden\nexport const getIsUserPressAddFolderBtn = (state) =>\n  state.isUserPressAddFolderBtn\nexport const getIsUserPressEditFolderNameBtn = (state) =>\n  state.isUserPressEditFolderNameBtn\nexport const getIsUserPressAddNoteNameBtn = (state) =>\n  state.isUserPressAddNoteNameBtn\nexport const getIsUserPressEditNoteNameBtn = (state) =>\n  state.isUserPressEditNoteNameBtn\nexport const getSelectedFolderId = (state) => state.selectedFolderId\nexport const getSelectedNoteId = (state) => state.selectedNoteId\nexport const getSelectedItemId = (state) => state.selectedItemId\nexport const getIsDialogOpened = (state) => state.isDialogOpened\n\nconst rootReducer = combineReducers({\n  folders: folderReducer,\n  isFoldersHidden: hideFoldersReducer,\n  isUserPressAddFolderBtn: pressAddFolderBtnReducer,\n  isUserPressAddNoteNameBtn: pressAddNoteNameBtnReducer,\n  isUserPressEditFolderNameBtn: pressEditFolderNameBtnReducer,\n  isUserPressEditNoteNameBtn: pressEditNoteNameBtnReducer,\n  isDialogOpened: dialogReducer,\n  selectedFolderId: saveFolderIdReducer,\n  selectedNoteId: saveNoteIdReducer,\n  selectedItemId: saveSelectedItemIdReducer,\n})\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware()\n  ),\n)\n\nsetTimeout(() => {\n  console.log(\"smile :)\")\n}, 5000)\n\nexport default store\n","import {\n  HIDE_FOLDERS,\n  ADD_FOLDER,\n  DELETE_FOLDER,\n  PRESS_ADD_FOLDER_BTN,\n  PRESS_EDIT_FOLDER_NAME_BTN,\n  CHANGE_FOLDER_NAME,\n  SAVE_FOLDER_ID,\n  ADD_NOTE,\n  DELETE_NOTE,\n  PRESS_ADD_NOTE_NAME_BTN,\n  PRESS_EDIT_NOTE_NAME_BTN,\n  SAVE_NOTE_ID,\n  SAVE_SELECTED_ITEM_ID,\n  DELETE_SELECTED_ITEM,\n  IS_DIALOG_OPENED,\n  UPDATE_FOLDER_ALL,\n  CHANGE_NOTE_BODY,\n  CHANGE_NOTE_NAME,\n  DELETE_NOTE_ON_DRAG_END,\n} from \"./types\";\n\n// folders actions\nexport const hideFolders = () => ({ type: HIDE_FOLDERS });\nexport const addFolder = (folder) => ({ type: ADD_FOLDER, folder });\nexport const deleteFolder = (folderId) => ({ type: DELETE_FOLDER, folderId });\nexport const pressAddFolderBtn = (value) => ({\n  type: PRESS_ADD_FOLDER_BTN,\n  value,\n});\nexport const pressEditFolderNameBtn = (value) => ({\n  type: PRESS_EDIT_FOLDER_NAME_BTN,\n  value,\n});\nexport const changeFolderName = (folderName, folderId) => ({\n  type: CHANGE_FOLDER_NAME,\n  folderName,\n  folderId,\n});\nexport const saveFolderId = (folderId) => ({\n  type: SAVE_FOLDER_ID,\n  folderId,\n});\n\n// notes actions\nexport const addNote = (folderId, note) => ({\n  type: ADD_NOTE,\n  folderId,\n  note,\n});\nexport const deleteNote = (noteId) => ({\n  type: DELETE_NOTE,\n  noteId,\n});\nexport const changeNoteBody = (noteBody, noteId) => ({\n  type: CHANGE_NOTE_BODY,\n  noteBody,\n  noteId,\n});\nexport const changeNoteName = (noteName, noteId) => ({\n  type: CHANGE_NOTE_NAME,\n  noteName,\n  noteId,\n});\nexport const pressAddNoteNameBtn = (value) => ({\n  type: PRESS_ADD_NOTE_NAME_BTN,\n  value,\n});\nexport const pressEditNoteNameBtn = (value) => ({\n  type: PRESS_EDIT_NOTE_NAME_BTN,\n  value,\n});\nexport const saveNoteId = (noteId) => ({\n  type: SAVE_NOTE_ID,\n  noteId,\n});\n\n// common actions\nexport const saveSelectedItemId = (itemId) => ({\n  type: SAVE_SELECTED_ITEM_ID,\n  itemId,\n});\nexport const openDialog = (value) => ({\n  type: IS_DIALOG_OPENED,\n  value,\n});\nexport const deleteNoteOnDragEnd = (folderId, noteId) => ({\n  type: DELETE_NOTE_ON_DRAG_END,\n  folderId,\n  noteId,\n});\nexport const deleteSelectedItem = (selectedItemId) => ({\n  type: DELETE_SELECTED_ITEM,\n  selectedItemId,\n});\nexport const updateFolderAll = (\n  arrayOfNotesIdThatWillBeDeleting,\n  folderAllNotesId\n) => ({\n  type: UPDATE_FOLDER_ALL,\n  arrayOfNotesIdThatWillBeDeleting,\n  folderAllNotesId,\n});\n","import React from \"react\"\nimport Button from \"@material-ui/core/Button\"\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\"\nimport FolderIcon from \"@material-ui/icons/Folder\"\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\"\nimport { connect } from \"react-redux\"\nimport { getIsFoldersHidden } from \"../../redux/store\"\nimport { hideFolders } from \"../../redux/actions\"\n\nconst StyledButton = withStyles({\n  root: {\n    border: 0,\n    paddingTop: 2,\n    paddingBottom: 2,\n    paddingLeft: 12,\n    paddingRight: 0,\n    minWidth: 38,\n    backgroundColor: \"white\",\n  },\n  label: {\n    padding: 0,\n  },\n})(Button)\n\nconst useStyles = makeStyles({\n  button: {\n    marginTop: 6,\n    marginLeft: 150,\n  },\n})\n\nconst HideFoldersBtn = ({ isFoldersHidden, hideFolders }) => {\n  const classes = useStyles()\n\n  return (\n    <div>\n      <StyledButton\n        variant=\"contained\"\n        color=\"default\"\n        className={classes.button}\n        startIcon={isFoldersHidden ? <FolderIcon /> : <FolderOpenIcon />}\n        onClick={() => hideFolders()}\n      >\n        {\"\"}\n      </StyledButton>\n    </div>\n  )\n}\nconst mapStateToProps = (state) => ({\n  isFoldersHidden: getIsFoldersHidden(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  hideFolders: () => dispatch(hideFolders()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HideFoldersBtn)\n","export default function allNotesIdInDeletedFolder(folders, selectedElementId) {\n  const deletedFolder = folders.find(\n    (folder) => folder.folderId === selectedElementId\n  )\n  if (!deletedFolder) return []\n  const ids = []\n\n  for (let i = 0; i < deletedFolder.notesInThisFolder.length; i++) {\n    const note = deletedFolder.notesInThisFolder[i]\n    ids.push(note.noteId)\n  }\n\n  return ids\n}","import React from \"react\"\nimport Button from \"@material-ui/core/Button\"\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\"\nimport { connect } from \"react-redux\"\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\"\nimport allNotesIdInDeletedFolder from \"../../helpers/allNotesIdInDeletedFolder\"\n\nimport {\n  getFolders,\n  getSelectedItemId,\n} from \"../../redux/store\"\nimport { deleteSelectedItem, updateFolderAll } from \"../../redux/actions\"\n\nconst StyledButton = withStyles({\n  root: {\n    border: 0,\n    paddingTop: 2,\n    paddingBottom: 2,\n    paddingLeft: 12,\n    paddingRight: 0,\n    minWidth: 38,\n    backgroundColor: \"white\",\n  },\n  label: {\n    padding: 0,\n  },\n})(Button)\n\nconst useStyles = makeStyles({\n  button: {\n    marginTop: 6,\n    marginLeft: 8,\n  },\n  mobileButton: {\n    marginTop: 6,\n    marginLeft: 30,\n    marginRight: 20,\n  },\n})\n\nconst DeleteSelectedItem = ({\n  deleteSelectedItem,\n  selectedItemId,\n  folders,\n  updateFolderAll,\n  mobile,\n}) => {\n  const classes = useStyles()\n\n  const checkNeedFolderUpdate = () => {\n    if (selectedItemId.includes(\"folder\")) {\n      updateFolderAll(\n        allNotesIdInDeletedFolder(folders, selectedItemId),\n        \"folderAllNotes\"\n      )\n    }\n  }\n\n  return (\n    <div>\n      <StyledButton\n        variant=\"contained\"\n        color=\"default\"\n        className={mobile ? classes.mobileButton : classes.button}\n        startIcon={<DeleteForeverIcon />}\n        onClick={() => {\n          checkNeedFolderUpdate()\n          deleteSelectedItem(selectedItemId)\n        }}\n      >\n        {\"\"}\n      </StyledButton>\n    </div>\n  )\n}\nconst mapStateToProps = (state) => ({\n  selectedItemId: getSelectedItemId(state),\n  folders: getFolders(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteSelectedItem: (selectedItemId) => dispatch(deleteSelectedItem(selectedItemId)),\n  updateFolderAll: (arrayOfIds, folderAllNotesId) =>\n    dispatch(updateFolderAll(arrayOfIds, folderAllNotesId)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DeleteSelectedItem)\n","import React from \"react\"\nimport Button from \"@material-ui/core/Button\"\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\"\nimport NoteAddIcon from \"@material-ui/icons/NoteAdd\"\nimport { connect } from \"react-redux\"\n\nimport { pressAddNoteNameBtn } from \"../../redux/actions\"\n\nconst StyledButton = withStyles({\n  root: {\n    border: 0,\n    paddingTop: 2,\n    paddingBottom: 2,\n    paddingLeft: 12,\n    paddingRight: 0,\n    minWidth: 38,\n    backgroundColor: \"white\",\n  },\n  label: {\n    padding: 0,\n  },\n})(Button)\n\nconst useStyles = makeStyles(() => ({\n  button: {\n    marginTop: 6,\n    marginLeft: 8,\n  },\n}))\n\nconst AddNote = ({ pressAddNoteNameBtn }) => {\n  const classes = useStyles()\n\n  return (\n    <div>\n      <StyledButton\n        variant=\"contained\"\n        color=\"default\"\n        className={classes.button}\n        startIcon={<NoteAddIcon />}\n        onClick={() => {\n          pressAddNoteNameBtn(true)\n        }}\n      >\n        {\"\"}\n      </StyledButton>\n    </div>\n  )\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  pressAddNoteNameBtn: (value) => dispatch(pressAddNoteNameBtn(value)),\n})\n\nexport default connect(null, mapDispatchToProps)(AddNote)\n","import React from \"react\"\nimport Button from \"@material-ui/core/Button\"\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\"\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\"\nimport { connect } from \"react-redux\"\n\nimport { pressAddFolderBtn } from \"../../redux/actions\"\n\nconst StyledButton = withStyles({\n  root: {\n    position: \"absolute\",\n    bottom: 15,\n    backgroundColor: \"rgb(228, 226, 229)\",\n    boxShadow: \"none\",\n    border: \"none\",\n    textTransform: \"none\",\n    alignItems: \"center\",\n    \"&:hover\": {\n      backgroundColor: \"rgb(228, 226, 229)\",\n      border: \"none\",\n      boxShadow: \"none\",\n    },\n  },\n  label: {\n    padding: 0,\n    alignItems: \"none\",\n  },\n})(Button)\n\nconst useStyles = makeStyles({\n  root: {\n    position: \"static\",\n    marginLeft: 10,\n  },\n})\n\nconst AddFolderButton = ({ pressAddFolderBtn, mobile }) => {\n  const classes = useStyles()\n\n  if (mobile) {\n    return (\n      <StyledButton\n        variant=\"contained\"\n        color=\"default\"\n        startIcon={<AddCircleIcon />}\n        onClick={() => pressAddFolderBtn(true)}\n        className={classes.root}\n      >\n        New&nbsp;Folder\n      </StyledButton>\n    )\n  } else {\n    return (\n      <StyledButton\n        variant=\"contained\"\n        color=\"default\"\n        startIcon={<AddCircleIcon />}\n        onClick={() => pressAddFolderBtn(true)}\n      >\n        New&nbsp;Folder\n      </StyledButton>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  pressAddFolderBtn: (value) => dispatch(pressAddFolderBtn(value)),\n})\n\nexport default connect(null, mapDispatchToProps)(AddFolderButton)\n","import React from \"react\"\nimport Box from \"@material-ui/core/Box\"\nimport { styled } from \"@material-ui/core/styles\"\nimport DotButtonsSimulation from \"./buttons/DotButtonsSimulation\"\nimport HideFoldersBtn from \"./buttons/HideFoldersBtn\"\nimport DeleteSelectedItemBtn from \"./buttons/DeleteSelectedItemBtn\"\nimport AddNote from \"./buttons/AddNoteBtn\"\nimport AddFolderBtn from \"./buttons/AddFolderBtn\"\n\nconst AppHeaderWrapper = styled(Box)({\n  display: \"flex\",\n  backgroundColor: \"rgb(228, 226, 229)\",\n  height: 38,\n  borderTopRightRadius: 10,\n  borderTopLeftRadius: 10,\n  borderBottom: \"1px solid rgb(190, 190, 190)\"\n})\n\nconst AppHeader = ({ mobile }) => (\n  <AppHeaderWrapper>\n    {!mobile && <DotButtonsSimulation />}\n    {mobile && <AddFolderBtn mobile={mobile} />}\n    {!mobile && <HideFoldersBtn />}\n    <DeleteSelectedItemBtn mobile={mobile} />\n    <AddNote />\n  </AppHeaderWrapper>\n)\n\nexport default AppHeader\n","import React from \"react\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport DeleteIcon from \"@material-ui/icons/Delete\"\nimport { connect } from \"react-redux\"\nimport allNotesIdInDeletedFolder from \"../../helpers/allNotesIdInDeletedFolder\"\nimport {\n  getSelectedFolderId,\n  getFolders,\n} from \"../../redux/store\"\nimport {\n  updateFolderAll,\n  saveFolderId,\n  deleteFolder,\n} from \"../../redux/actions\"\nconst useStyles = makeStyles(() => ({\n  root: {\n    \"& > *\": {\n      margin: -6,\n    },\n  },\n}))\n\nconst DeleteFolderButton = ({\n  deleteFolder,\n  folderId,\n  folders,\n  updateFolderAll,\n  saveFolderId,\n  selectedFolderId,\n}) => {\n  const classes = useStyles()\n\n  const checkNeedFolderUpdate = () => {\n    if (\n      allNotesIdInDeletedFolder(folders, selectedFolderId).length > 0\n    ) {\n      updateFolderAll(\n        allNotesIdInDeletedFolder(folders, selectedFolderId),\n        \"folderAllNotes\"\n      )\n    }\n  }\n\n  return (\n    <div\n      className={classes.root}\n      onClick={() => {\n        saveFolderId(folderId)\n        checkNeedFolderUpdate()\n        deleteFolder(folderId)\n      }}\n    >\n      <IconButton aria-label=\"delete\">\n        <DeleteIcon fontSize=\"small\" />\n      </IconButton>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  folders: getFolders(state),\n  selectedFolderId: getSelectedFolderId(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateFolderAll: (arrayOfIds, folderAllNotesId) =>\n    dispatch(updateFolderAll(arrayOfIds, folderAllNotesId)),\n  deleteFolder: (folderId) => dispatch(deleteFolder(folderId)),\n  saveFolderId: (folderId) => dispatch(saveFolderId(folderId)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DeleteFolderButton)\n","import React from \"react\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport EditIcon from \"@material-ui/icons/Edit\"\nimport { connect } from \"react-redux\"\n\nimport { pressEditFolderNameBtn, saveFolderId } from \"../../redux/actions\"\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    \"& > *\": {\n      margin: -6,\n\n      [\"@media (max-width:599px)\"]: {// eslint-disable-line no-useless-computed-key\n        marginLeft: 20,\n      },\n    },\n  },\n}))\n\nconst EditFolderNameBtn = ({\n  pressEditFolderNameBtn,\n  folderId,\n  saveFolderId,\n}) => {\n  const classes = useStyles()\n\n  return (\n    <div\n      className={classes.root}\n      onClick={() => {\n        pressEditFolderNameBtn(true)\n        saveFolderId(folderId)\n      }}\n    >\n      <IconButton aria-label=\"delete\">\n        <EditIcon fontSize=\"small\" />\n      </IconButton>\n    </div>\n  )\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  pressEditFolderNameBtn: (value) => dispatch(pressEditFolderNameBtn(value)),\n  saveFolderId: (folderId) => dispatch(saveFolderId(folderId)),\n})\n\nexport default connect(null, mapDispatchToProps)(EditFolderNameBtn)\n","import React, { useState } from \"react\"\nimport cn from \"classnames\"\nimport { useDrop } from \"react-dnd\"\nimport { connect } from \"react-redux\"\nimport Box from \"@material-ui/core/Box\"\nimport { styled, makeStyles } from \"@material-ui/core/styles\"\nimport DeleteFolderButton from \"./buttons/DeleteFolderBtn\"\nimport EditFolderNameButton from \"./buttons/EditFolderNameBtn\"\n\nimport {\n  getSelectedFolderId,\n  getIsUserPressEditFolderNameBtn,\n} from \"../redux/store\"\nimport {\n  changeFolderName,\n  saveFolderId,\n  pressEditFolderNameBtn,\n  saveSelectedItemId,\n} from \"../redux/actions\"\n\nconst style = {\n  color: \"white\",\n}\n\nconst useStyles = makeStyles({\n  label: {\n    display: \"block\",\n    minWidth: 140,\n    fontSize: 14,\n    padding: 5,\n    paddingRight: 0,\n\n    [\"@media (max-width:1040px)\"]: {// eslint-disable-line no-useless-computed-key\n      minWidth: \"60%\",\n    },\n    [\"@media (max-width:599px)\"]: {// eslint-disable-line no-useless-computed-key\n      fontSize: 16,\n      padding: \"10px 0 10px 20px\",\n      minWidth: \"75%\",\n    },\n    [\"@media (max-width:500px)\"]: {// eslint-disable-line no-useless-computed-key\n      minWidth: \"70%\",\n    },\n    [\"@media (max-width:405px)\"]: {// eslint-disable-line no-useless-computed-key\n      minWidth: \"65%\",\n    },\n    [\"@media (max-width:350px)\"]: {// eslint-disable-line no-useless-computed-key\n      minWidth: \"55%\",\n    }\n  },\n  editFolderNameInput: {\n    fontSize: 14,\n    margin: \"5px 0\",\n    padding: 5,\n\n    [\"@media (max-width:599px)\"]: {// eslint-disable-line no-useless-computed-key\n      fontSize: 16,\n      width: \"94%\",\n      paddingLeft: 20,\n    },\n    [\"@media (max-width:500px)\"]: {// eslint-disable-line no-useless-computed-key\n      width: \"90%\",\n    }\n  },\n  folderNameInput: {\n    width: 200,\n    fontSize: 14,\n    marginTop: 10,\n    padding: 5,\n  },\n})\n\nconst FolderStyled = styled(Box)({\n  display: \"flex\",\n  alignItems: \"flex-end\",\n})\n\nfunction selectBackgroundColor(isActive, canDrop) {\n  if (isActive) return \"darkgreen\"\n  if (canDrop) return \"darkkhaki\"\n\n  return \"\"\n}\n\nconst itemTypesForReactDND = { BOX: \"box\" }\n\nconst Folder = ({\n  allowedDropEffect,\n  folder,\n  changeFolderName,\n  saveFolderId,\n  selectedFolderId,\n  isUserPressEditFolderNameButton,\n  pressEditFolderNameBtn,\n  saveSelectedItemId,\n}) => {\n  const classes = useStyles()\n  const { folderName, folderId } = folder\n  const [newFolderName, setNewFolderName] = useState(\"\")\n\n  const handleInputChange = (value) => {\n    setNewFolderName(value)\n  };\n\n  const [{ canDrop, isOver }, drop] = useDrop({\n    accept: itemTypesForReactDND.BOX,\n    drop: () => ({\n      name: folderId,\n      allowedDropEffect,\n    }),\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n    })\n  })\n  const isActive = canDrop && isOver\n  const backgroundColor = selectBackgroundColor(isActive, canDrop)\n\n  if (\n    (selectedFolderId === folderId) && isUserPressEditFolderNameButton\n  ) {\n    return (\n      <div>\n        <input\n          maxLength=\"20\"\n          autoFocus\n          placeholder=\"New Folder\"\n          defaultValue={folderName}\n          onChange={(e) => {\n            handleInputChange(e.target.value)\n            changeFolderName(newFolderName, folderId)\n          }}\n          onBlur={() => {\n            pressEditFolderNameBtn(false)\n          }}\n          type=\"text\"\n          className={classes.editFolderNameInput}\n        />\n      </div>\n    )\n  }\n\n  if (folderId === \"folderAllNotes\") {\n    return (\n      <div style={{ ...style, backgroundColor }}>\n        <li \n          style={{ height: \"32px\", display: \"flex\" }}\n          onClick={() => {\n            saveFolderId(folderId);\n            saveSelectedItemId(folderId);\n          }}\n          className={cn(\"folder-li\", {\n            selected: selectedFolderId === folderId\n          })}\n        >\n          <FolderStyled>\n            <label className={classes.label}>{folderName}</label>\n          </FolderStyled>\n        </li>\n      </div>\n    )\n  }\n\n  return (\n    <div ref={drop} style={{ ...style, backgroundColor }}>\n      <li\n        onClick={() => {\n          saveFolderId(folderId);\n          saveSelectedItemId(folderId);\n        }}\n        className={cn(\"folder-li\", {\n          selected: selectedFolderId === folderId\n        })}\n      >\n        <FolderStyled>\n          <label className={classes.label}>{folderName}</label>\n          <DeleteFolderButton folderId={folderId} />\n          <EditFolderNameButton folderId={folderId} />\n        </FolderStyled>\n      </li>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  isUserPressEditFolderNameButton: getIsUserPressEditFolderNameBtn(state),\n  selectedFolderId: getSelectedFolderId(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  pressEditFolderNameBtn: (value) => dispatch(pressEditFolderNameBtn(value)),\n  changeFolderName: (folderName, folderId) =>\n    dispatch(changeFolderName(folderName, folderId)),\n  saveFolderId: (folderId) => dispatch(saveFolderId(folderId)),\n  saveSelectedItemId: (folderId) => dispatch(saveSelectedItemId(folderId)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Folder)\n","import React, { useState } from \"react\"\nimport { connect } from \"react-redux\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport Folder from \"./Folder\"\nimport { getFolders, getIsUserPressAddFolderBtn } from \"../redux/store\"\nimport {\n  addFolder,\n  pressAddFolderBtn,\n  changeFolderName,\n  saveFolderId,\n  saveSelectedItemId,\n} from \"../redux/actions\"\n\nconst useStyles = makeStyles({\n  input: {\n    width: \"92%\",\n    display: \"block\",\n    fontSize: 14,\n    padding: 5,\n    paddingRigh: 0,\n\n    [\"@media (max-width:1040px)\"]: {// eslint-disable-line no-useless-computed-key\n      width: \"90%\",\n    },\n  },\n  mobileInput: {\n    width: \"94%\",\n    display: \"block\",\n    fontSize: 16,\n    padding: 5,\n    paddingLeft: 20,\n\n    [\"@media (max-width:500px)\"]: {// eslint-disable-line no-useless-computed-key\n      width: \"90%\",\n    },\n  },\n})\n\nconst Folders = ({\n  folders,\n  isUserPressAddFolderButton,\n  pressAddFolderBtn,\n  addFolder,\n  saveFolderId,\n  mobile,\n  saveSelectedItemId,\n}) => {\n  const classes = useStyles()\n  const [currentFolder, setCurrentFolder] = useState({\n    folderId: null,\n    folderName: null,\n    notesInThisFolder: [],\n  })\n\n  const handleInputChange = (value) => {\n    setCurrentFolder((prevState) => {\n      return {\n        ...prevState,\n        folderId: `folderID-${+new Date()}`,\n        folderName: value,\n      }\n    })\n  }\n\n  return (\n    <>\n      <div>\n        {folders.length > 0 && (\n          <ul style={{ marginTop: \"0\" }}>\n            {folders.map((folder) => (\n              <Folder\n                allowedDropEffect=\"move\"\n                folder={folder}\n                key={folder.folderId}\n                mobile={mobile}\n              />\n            ))}\n\n            {isUserPressAddFolderButton && (\n              <div>\n                <input\n                  maxLength=\"20\"\n                  autoFocus\n                  placeholder=\"New Folder\"\n                  onChange={(e) => handleInputChange(e.target.value)}\n                  onBlur={() => {\n                    pressAddFolderBtn(false)\n                    if (\n                      currentFolder.folderName === null ||\n                      currentFolder.folderName.trim() === \"\"\n                    ) {\n                      return\n                    }\n                    addFolder(currentFolder)\n                    saveFolderId(currentFolder.folderId)\n                    saveSelectedItemId(currentFolder.folderId)\n                  }}\n                  type=\"text\"\n                  className={mobile ? classes.mobileInput : classes.input}\n                />\n              </div>\n            )}\n          </ul>\n        )}\n      </div>\n    </>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  folders: getFolders(state),\n  isUserPressAddFolderButton: getIsUserPressAddFolderBtn(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  addFolder: (folder) => dispatch(addFolder(folder)),\n  pressAddFolderBtn: (value) => dispatch(pressAddFolderBtn(value)),\n  changeFolderName: (folderName, folderId) =>\n    dispatch(changeFolderName(folderName, folderId)),\n  saveFolderId: (folderId) => dispatch(saveFolderId(folderId)),\n  saveSelectedItemId: (selectedId) => dispatch(saveSelectedItemId(selectedId)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Folders)\n","import React from \"react\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport DeleteIcon from \"@material-ui/icons/Delete\"\nimport { connect } from \"react-redux\"\nimport { deleteNote } from \"../../redux/actions\"\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    \"& > *\": {\n      margin: -6,\n    },\n  },\n}))\n\nconst DeleteNoteButton = ({\n  noteId,\n  deleteNote,\n}) => {\n  const classes = useStyles()\n\n  return (\n    <div\n      className={classes.root}\n      onClick={() => deleteNote(noteId)}\n    >\n      <IconButton aria-label=\"delete\">\n        <DeleteIcon fontSize=\"small\" />\n      </IconButton>\n    </div>\n  )\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteNote: (noteId) => dispatch(deleteNote(noteId)),\n})\n\nexport default connect(null, mapDispatchToProps)(DeleteNoteButton)\n","import React from \"react\"\nimport { makeStyles } from \"@material-ui/core/styles\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport EditIcon from \"@material-ui/icons/Edit\"\nimport { connect } from \"react-redux\"\n\nimport { pressEditNoteNameBtn, saveNoteId } from \"../../redux/actions\"\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    \"& > *\": {\n      margin: -6,\n\n      [\"@media (max-width:599px)\"]: {// eslint-disable-line no-useless-computed-key\n        marginLeft: 20,\n      },\n    },\n  },\n}))\n\nconst EditNoteNameBtn = ({ noteId, pressEditNoteNameBtn, saveNoteId }) => {\n  const classes = useStyles()\n\n  return (\n    <div\n      className={classes.root}\n      onClick={() => {\n        pressEditNoteNameBtn(true);\n        saveNoteId(noteId);\n      }}\n    >\n      <IconButton aria-label=\"delete\">\n        <EditIcon fontSize=\"small\" />\n      </IconButton>\n    </div>\n  )\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  pressEditNoteNameBtn: (value) => dispatch(pressEditNoteNameBtn(value)),\n  saveNoteId: (noteId) => dispatch(saveNoteId(noteId)),\n})\n\nexport default connect(null, mapDispatchToProps)(EditNoteNameBtn)\n","import React, { useState } from \"react\"\nimport cn from \"classnames\"\nimport { useDrag } from \"react-dnd\"\nimport { connect } from \"react-redux\"\nimport Box from \"@material-ui/core/Box\"\nimport { styled, makeStyles } from \"@material-ui/core/styles\"\nimport DeleteNoteBtn from \"./buttons/DeleteNoteBtn\"\nimport EditNoteNameBtn from \"./buttons/EditNoteNameBtn\"\n\nimport {\n  getSelectedNoteId,\n  getIsUserPressEditNoteNameBtn,\n  getFolders,\n} from \"../redux/store\"\nimport {\n  saveNoteId,\n  pressEditNoteNameBtn,\n  openDialog,\n  addNote,\n  changeNoteName,\n  deleteNoteOnDragEnd,\n  saveSelectedItemId,\n} from \"../redux/actions\"\n\nconst NoteWrapper = styled(Box)({\n  display: \"flex\",\n  width: 300,\n  alignItems: \"flex-end\",\n})\n\nconst useStyles = makeStyles(() => ({\n  editNoteNameInput: {\n    minWidth: 294,\n    fontSize: 14,\n    margin: \"5px 0\",\n    height: 22,\n\n    [\"@media (max-width:599px)\"]: {// eslint-disable-line no-useless-computed-key\n      fontSize: 16,\n      width: \"78vw\",\n      padding: 5,\n      paddingLeft: 20,\n    },\n    [\"@media (max-width:500px)\"]: {// eslint-disable-line no-useless-computed-key\n      width: \"90%\",\n    },\n  },\n  noteLabel: {\n    display: \"block\",\n    minWidth: 220,\n    fontSize: 14,\n    padding: 5,\n    paddingRight: 0,\n\n    [\"@media (max-width:599px)\"]: {// eslint-disable-line no-useless-computed-key\n      fontSize: 16,\n      padding: \"10px 0 10px 20px\",\n      minWidth: \"73vw\",\n    },\n    [\"@media (max-width:500px)\"]: {// eslint-disable-line no-useless-computed-key\n      minWidth: \"69vw\",\n    },\n    [\"@media (max-width:440px)\"]: {// eslint-disable-line no-useless-computed-key\n      minWidth: \"62vw\",\n    },\n    [\"@media (max-width:360px)\"]: {// eslint-disable-line no-useless-computed-key\n      minWidth: \"58vw\",\n      paddingLeft: 10,\n    },\n  },\n}))\n\nconst style = {\n  backgroundColor: \"white\",\n  width: \"fit-content\",\n}\n\nconst styleForMobile = {\n  backgroundColor: \"white\",\n  width: \"100%\",\n}\n\nconst itemTypesForReactDND = { BOX: \"box\" }\n\nconst Note = ({\n  note,\n  isUserPressEditNoteNameButton,\n  saveNoteId,\n  selectedNoteId,\n  pressEditNoteNameBtn,\n  openDialog,\n  addNote,\n  changeNoteName,\n  deleteNoteOnDragEnd,\n  folders,\n  saveSelectedItemId,\n  mobile,\n}) => {\n  const classes = useStyles()\n  const { noteName, noteId } = note\n  const [newNoteName, setNewNoteName] = useState(\"\")\n\n  const handleInputChange = (value) => {\n    setNewNoteName(value)\n  }\n\n  const item = { ...note, type: itemTypesForReactDND.BOX }\n  const [{ opacity }, drag] = useDrag({\n    item,\n    end(item, monitor) {\n      const dropResult = monitor.getDropResult()\n      if (item && dropResult) {\n        const isDropAllowed =\n          dropResult.allowedDropEffect === \"any\" ||\n          dropResult.allowedDropEffect === dropResult.dropEffect\n        if (isDropAllowed) {\n          // alert(\n          // `\n          //   You ${dropResult.dropEffect} \n          //   noteName - ${noteName} - ${noteId}\n          //   into ${dropResult.name}!\n          // `\n          // );\n          const folderIdOnDragEnd = monitor.getDropResult().name;\n          const droppedFolder = folders.find((folder, i) => {\n            let needFolder = null\n            if (i > 0) {\n              needFolder = folder.notesInThisFolder.some(\n                (note) => note.noteId === noteId\n              )\n            }\n            return needFolder\n          })\n\n          if (droppedFolder && droppedFolder.folderId) {\n            deleteNoteOnDragEnd(droppedFolder.folderId,noteId)\n          }\n          addNote(folderIdOnDragEnd, note)\n        }\n      }\n    },\n    collect: (monitor) => ({\n      opacity: monitor.isDragging() ? 0.4 : 1,\n    }),\n  })\n\n  if (selectedNoteId === noteId && isUserPressEditNoteNameButton) {\n    return (\n      <div>\n        <input\n          autoFocus\n          maxLength=\"20\"\n          type=\"text\"\n          placeholder=\"New Note\"\n          defaultValue={noteName}\n          className={classes.editNoteNameInput}\n          onChange={(e) => handleInputChange(e.target.value)}\n          onBlur={() => {\n            pressEditNoteNameBtn(false)\n            if (newNoteName === \"\") return\n            changeNoteName(newNoteName, noteId)\n          }}\n        />\n      </div>\n    )\n  } else {\n    return (\n      <div\n        ref={drag}\n        style={mobile ? { ...styleForMobile, opacity } : { ...style, opacity }}\n      >\n        <li\n          onDoubleClick={() => openDialog(true)}\n          onClick={() => {\n            saveNoteId(noteId);\n            saveSelectedItemId(noteId);\n          }}\n          className={cn(\"note-li \", {\n            selected: selectedNoteId === noteId,\n          })}\n        >\n          <NoteWrapper>\n            <label className={classes.noteLabel}>{noteName}</label>\n            <DeleteNoteBtn noteId={noteId} />\n            <EditNoteNameBtn noteId={noteId} />\n          </NoteWrapper>\n        </li>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isUserPressEditNoteNameButton: getIsUserPressEditNoteNameBtn(state),\n  selectedNoteId: getSelectedNoteId(state),\n  folders: getFolders(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  pressEditNoteNameBtn: (value) => dispatch(pressEditNoteNameBtn(value)),\n  saveNoteId: (noteId) => dispatch(saveNoteId(noteId)),\n  openDialog: (value) => dispatch(openDialog(value)),\n  addNote: (folderIdOnDragEnd, note) => dispatch(addNote(folderIdOnDragEnd, note)),\n  changeNoteName: (noteName, noteId) => dispatch(changeNoteName(noteName, noteId)),\n  deleteNoteOnDragEnd: (folderId, noteId) =>\n    dispatch(deleteNoteOnDragEnd(folderId, noteId)),\n  saveSelectedItemId: (itemId) => dispatch(saveSelectedItemId(itemId)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Note)\n","export default function findNoteBody(notes, selectedNoteIdForEditing) {\n  const noteBody = notes.find((note) => note.noteId === selectedNoteIdForEditing).noteBody\n  if (noteBody === null) return \"\"\n\n  return noteBody\n}\n","export default function notesInThisFolder(folders, selectedFolderId){\n  const folderAll = folders[0]\n  const notesInThisFolderInFolderAll = folderAll.notesInThisFolder\n  const needFolder = folders.filter(\n    folder => folder.folderId === selectedFolderId\n  )\n  const [folder] = needFolder\n  if (!folder) return notesInThisFolderInFolderAll\n  const { notesInThisFolder } = folder\n  if (notesInThisFolder) return notesInThisFolder\n\n  return []\n}\n","export default function findNoteName(notes, selectedNoteIdForEditing) {\n  const noteName = notes.find((note) => note.noteId === selectedNoteIdForEditing).noteName\n  if (noteName === null) return \"\"\n\n  return noteName\n}","import React from \"react\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Dialog from \"@material-ui/core/Dialog\"\nimport DialogContent from \"@material-ui/core/DialogContent\"\nimport DialogContentText from \"@material-ui/core/DialogContentText\"\nimport { connect } from \"react-redux\"\nimport findNoteBody from \"../helpers/findNoteBody\"\nimport findNoteName from \"../helpers/findNoteName\"\nimport notesInThisFolder from \"../helpers/notesInThisFolder\"\n\nimport {\n  getIsDialogOpened,\n  getSelectedFolderId,\n  getSelectedNoteId,\n  getFolders,\n} from \"../redux/store\"\nimport {\n  openDialog,\n  changeNoteName,\n  changeNoteBody,\n} from \"../redux/actions\"\n\nconst DialogForEditingNote = ({\n  folders,\n  isDialogOpened,\n  openDialog,\n  selectedNoteId,\n  changeNoteBody,\n  changeNoteName,\n  selectedFolderId,\n}) => {\n  const handleNoteBodyChanging = (value) => {\n    changeNoteBody(value, selectedNoteId)\n  }\n\n  const handleNoteNameChanging = (value) => {\n    changeNoteName(value, selectedNoteId)\n  }\n\n  return (\n    <div>\n      <Dialog\n        open={isDialogOpened}\n        onClose={() => openDialog(false)}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogContent>\n          <DialogContentText>Please change your note</DialogContentText>\n          <form\n            noValidate\n            autoComplete=\"off\"\n            style={{ display: \"flex\", flexDirection: \"column\" }}\n            onBlur={() => {openDialog(false)}}\n          >\n            <TextField\n              rows=\"2\"\n              multiline\n              label=\"Note name\"\n              variant=\"outlined\"\n              id=\"outlined-multiline-static\"\n              value={findNoteName(\n                notesInThisFolder(folders,selectedFolderId), selectedNoteId\n              )}\n              onChange={(e) => handleNoteNameChanging(e.target.value)}\n              style={{ marginBottom: \"20px\" }}\n            />\n            <TextField\n              rows=\"6\"\n              multiline\n              label=\"Note\"\n              variant=\"outlined\"\n              id=\"outlined-multiline-static\"\n              value={findNoteBody(\n                notesInThisFolder(folders,selectedFolderId), selectedNoteId\n              )}\n              onChange={(e) => handleNoteBodyChanging(e.target.value)}\n            />\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  folders: getFolders(state),\n  isDialogOpened: getIsDialogOpened(state),\n  selectedNoteId: getSelectedNoteId(state),\n  selectedFolderId: getSelectedFolderId(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  openDialog: (value) => dispatch(openDialog(value)),\n  changeNoteName: (noteName, noteId) => dispatch(changeNoteName(noteName, noteId)),\n  changeNoteBody: (noteBody, noteId) => dispatch(changeNoteBody(noteBody, noteId)),\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DialogForEditingNote)\n","import React, { useState } from \"react\"\nimport { connect } from \"react-redux\"\nimport Box from \"@material-ui/core/Box\"\nimport TextField from \"@material-ui/core/TextField\"\nimport { makeStyles, withStyles, styled } from \"@material-ui/core/styles\"\nimport Note from \"./Note\"\nimport findNoteBody from \"../helpers/findNoteBody\"\nimport notesInThisFolder from \"../helpers/notesInThisFolder\"\nimport Dialog from \"./Dialog\"\n\nimport {\n  getFolders,\n  getIsUserPressAddNoteNameBtn,\n  getIsDialogOpened,\n  getSelectedNoteId,\n  getIsFoldersHidden,\n  getSelectedFolderId,\n} from \"../redux/store\"\nimport {\n  pressAddNoteNameBtn,\n  saveNoteId,\n  addNote,\n  changeNoteBody,\n} from \"../redux/actions\"\n\nconst NoteBodyWrapper = styled(Box)({\n  borderLeft: \"1px solid rgb(153, 152, 152)\",\n})\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: 0,\n      [\"@media (max-width:599px)\"]: { // eslint-disable-line no-useless-computed-key\n        marginTop: 20,\n      },\n    },\n    \"& .MuiOutlinedInput-root\": {\n      borderRadius: 0,\n      paddingTop: 0,\n      width: 428,\n      height: 523,\n      borderBottomRightRadius: 10,\n\n      [\"@media (max-width:1040px)\"]: { // eslint-disable-line no-useless-computed-key\n        width: 303,\n        height: 82,\n      },\n      [\"@media (max-width:820px)\"]: { // eslint-disable-line no-useless-computed-key\n        height: 121,\n      },\n      [\"@media (max-width:600px)\"]: { // eslint-disable-line no-useless-computed-key\n        width: \"51vw\",\n        height: 222,\n      },\n      [\"@media (max-width:599px)\"]: { // eslint-disable-line no-useless-computed-key\n        width: \"99vw\",\n        borderBottomLeftRadius: 10,\n      },\n    },\n    \"& .MuiInputBase-inputMultiline\": {\n      height: 446,\n\n      [\"@media (max-width:1040px)\"]: { // eslint-disable-line no-useless-computed-key\n        paddingTop: 10,\n        height: 50,\n      },\n      [\"@media (max-width:600px)\"]: { // eslint-disable-line no-useless-computed-key\n        paddingTop: 20,\n        height: 176,\n      },\n    }\n  },\n  firstNoteinput: {\n    marginTop: 20,\n    width: 240,\n    height: 26,\n    fontSize: 14,\n\n    [\"@media (max-width:599px)\"]: { // eslint-disable-line no-useless-computed-key\n      width: \"94%\",\n      display: \"block\",\n      fontSize: 16,\n      padding: 5,\n      paddingLeft: 20,\n    },\n    [\"@media (max-width:460px)\"]: { // eslint-disable-line no-useless-computed-key\n      width: \"88vw\",\n    },\n    [\"@media (max-width:360px)\"]: { // eslint-disable-line no-useless-computed-key\n      width: \"86vw\",\n    },\n  },\n  input: {\n    width: \"96%\",\n    display: \"block\",\n    fontSize: 14,\n    height: 26,\n\n    [\"@media (max-width:599px)\"]: { // eslint-disable-line no-useless-computed-key\n      width: \"94%\",\n      display: \"block\",\n      fontSize: 16,\n      padding: 5,\n      paddingLeft: 20,\n    },\n    [\"@media (max-width:500px)\"]: { // eslint-disable-line no-useless-computed-key\n      width: \"88vw\",\n    },\n  }\n}));\n\nconst StyledTextFieldWhenFoldersHidden = withStyles(() => ({\n  root: {\n    \"& .MuiOutlinedInput-root\": {\n      width: 698,\n\n      [\"@media (max-width:1040px)\"]: { // eslint-disable-line no-useless-computed-key\n       width: 247,\n       height: 522,\n      },\n\n      [\"@media (max-width:600px)\"]: { // eslint-disable-line no-useless-computed-key\n        width: 261,\n      },\n    },\n\n    \"& .MuiInputBase-inputMultiline\": {\n      [\"@media (max-width:1040px)\"]: { // eslint-disable-line no-useless-computed-key\n        paddingTop: 10,\n        height: 446,\n      },\n\n      [\"@media (max-width:820px)\"]: { // eslint-disable-line no-useless-computed-key\n        height: 454,\n       },\n    }\n  }\n}))(TextField)\n\nconst Notes = ({\n  folders,\n  isUserPressAddNoteNameBtn,\n  pressAddNoteNameBtn,\n  isDialogOpened,\n  saveNoteId,\n  selectedNoteId,\n  isFoldersHidden,\n  addNote,\n  changeNoteBody,\n  selectedFolderId,\n  mobile,\n}) => {\n  const classes = useStyles()\n  const [currentNote, setCurrentNote] = useState({\n    noteId: null,\n    noteName: null,\n    noteBody: null,\n  })\n\n  const handleInputChange = (value) => {\n    setCurrentNote((prevState) => {\n      return {\n        ...prevState,\n        noteId: `noteId-${+new Date()}`,\n        noteName: value,\n      }\n    })\n  }\n\n  const handleTextFieldChange = (value) => {\n    changeNoteBody(value, selectedNoteId)\n  }\n\n  const isItAllNotesFolder = () => {\n    const folderAllNotes = folders.filter(\n      (folder) =>\n        folder.folderId === selectedFolderId &&\n        folder.folderId === \"folderAllNotes\"\n    );\n    const [folder] = folderAllNotes\n    if (!folder) return false\n\n    return true\n  }\n  const notes = notesInThisFolder(folders, selectedFolderId);\n\n  return (\n    <>\n      {isUserPressAddNoteNameBtn && notes.length < 1 && (\n        <input\n          autoFocus\n          type=\"text\"\n          maxLength=\"30\"\n          placeholder=\"New Note\"\n          className={classes.firstNoteinput}\n          onChange={(e) => handleInputChange(e.target.value)}\n          onBlur={() => {\n            pressAddNoteNameBtn(false)\n\n            if (\n              currentNote.noteName === null ||\n              currentNote.noteName.trim() === \"\"\n            ) {\n              return\n            }\n            \n            setCurrentNote({\n              noteId: null,\n              noteName: null,\n              noteBody: null,\n            })\n            saveNoteId(currentNote.noteId)\n\n            if (isItAllNotesFolder()) {\n              addNote(\"folderAllNotes\", currentNote)\n            } else {\n              addNote(\"folderAllNotes\", currentNote)\n              addNote(selectedFolderId, currentNote)\n            }\n          }}\n        />\n      )}\n      {notes.length > 0 && (\n        <>\n          <div className={classes.root}>\n            <ul>\n              {notes.map((note) => (\n                <Note note={note} key={note.noteId} mobile={mobile} />\n              ))}\n              {isUserPressAddNoteNameBtn && (\n                <div>\n                  <input\n                    autoFocus\n                    type=\"text\"\n                    maxLength=\"30\"\n                    placeholder=\"New Note\"\n                    className={classes.input}\n                    onChange={e => handleInputChange(e.target.value)}\n                    onBlur={() => {\n                      pressAddNoteNameBtn(false)\n\n                      if (\n                        currentNote.noteName === null ||\n                        currentNote.noteName.trim() === \"\"\n                      ) {\n                        return\n                      }\n                      saveNoteId(currentNote.noteId)\n\n                      if (isItAllNotesFolder()) {\n                        addNote(\"folderAllNotes\", currentNote)\n                      } else {\n                        addNote(\"folderAllNotes\", currentNote)\n                        addNote(selectedFolderId,currentNote)\n                      }\n                    }}\n                  />\n                </div>\n              )}\n            </ul>\n            {isDialogOpened && <Dialog />}\n          </div>\n          {notes.find((note) => note.noteId === selectedNoteId) && (\n            <NoteBodyWrapper>\n              <form className={classes.root} noValidate autoComplete=\"off\">\n                {!isFoldersHidden && (\n                  <TextField\n                    rows=\"22\"\n                    multiline\n                    label=\"Note\"\n                    variant=\"outlined\"\n                    id=\"outlined-multiline-static\"\n                    value={findNoteBody(notes, selectedNoteId)}\n                    onChange={(e) => handleTextFieldChange(e.target.value)}\n                  />\n                )}\n\n                {isFoldersHidden && (\n                  <StyledTextFieldWhenFoldersHidden\n                    rows=\"22\"\n                    multiline\n                    label=\"Note\"\n                    variant=\"outlined\"\n                    id=\"outlined-multiline-static\"\n                    value={findNoteBody(notes, selectedNoteId)}\n                    onChange={(e) => handleTextFieldChange(e.target.value)}\n                  />\n                )}\n              </form>\n            </NoteBodyWrapper>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  folders: getFolders(state),\n  isUserPressAddNoteNameBtn: getIsUserPressAddNoteNameBtn(state),\n  isDialogOpened: getIsDialogOpened(state),\n  isFoldersHidden: getIsFoldersHidden(state),\n  selectedFolderId: getSelectedFolderId(state),\n  selectedNoteId: getSelectedNoteId(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  pressAddNoteNameBtn: (value) => dispatch(pressAddNoteNameBtn(value)),\n  saveNoteId: (noteId) => dispatch(saveNoteId(noteId)),\n  addNote: (folderId, note) => dispatch(addNote(folderId, note)),\n  changeNoteBody: (noteBody, noteId) => dispatch(changeNoteBody(noteBody, noteId)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Notes)\n","import React from \"react\"\nimport { connect } from \"react-redux\"\nimport Box from \"@material-ui/core/Box\"\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\"\nimport { styled, makeStyles, useTheme } from \"@material-ui/core/styles\"\nimport AppHeader from \"./components/AppHeader\"\nimport Folders from \"./components/Folders\"\nimport AddFolderBtn from \"./components/buttons/AddFolderBtn\"\nimport Notes from \"./components/Notes\"\n\nimport { getIsFoldersHidden } from \"./redux/store\"\n\nconst Panels = styled(Box)({\n  display: \"flex\",\n})\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: \"100px auto\",\n    width: 1000,\n    height: 560,\n    border: \"1px solid #dfdfdf\",\n    borderRadius: 10,\n    boxShadow: \"0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)\",\n\n    [\"@media (max-width:1040px)\"]: {// eslint-disable-line no-useless-computed-key\n      width: 550,\n    },\n    [\"@media (max-width:599px)\"]: {// eslint-disable-line no-useless-computed-key\n      margin: 0,\n      height: 870,\n      width: \"100%\",\n      backgroundColor: \"rgb(228, 226, 229)\"\n    },\n  },\n  notesPanel: {\n    display: \"flex\",\n    width: \"100%\",\n    [\"@media (max-width:1040px)\"]: {// eslint-disable-line no-useless-computed-key\n      flexDirection: \"column\",\n      width: 306,\n    },\n  },\n  notesWhenFoldersHidden: {\n    display: \"flex\",\n    width: \"100%\",\n\n    [theme.breakpoints.between(\"sm\", \"820\")]: {\n      flexDirection: \"row\",\n    },\n  },\n\n  folders: {\n    width: 310,\n    height: 482,\n    position: \"relative\",\n    padding: 20,\n    borderRight: \"1px solid rgb(153, 152, 152)\",\n    backgroundColor: \"rgb(228, 226, 229)\",\n    borderBottomLeftRadius: 10,\n\n    [\"@media (max-width:1040px)\"]: {// eslint-disable-line no-useless-computed-key\n      width: 206,\n    },\n  },\n  hidden: {\n    display: \"none\",\n  },\n}))\n\nconst App = ({ isFoldersHidden }) => {\n  const classes = useStyles()\n  const theme = useTheme()\n  const matches = useMediaQuery(theme.breakpoints.up(\"sm\"))\n\n  if (!matches) {\n    return (\n      <div className={classes.root}>\n        <AppHeader mobile={true} />\n        <Folders mobile={true} />\n        <hr />\n        <Notes mobile={true} />\n      </div>\n    )\n  } else {\n    return (\n      <>\n        <div className={classes.root}>\n          <AppHeader />\n          <Panels>\n            <div className={isFoldersHidden ? classes.hidden : classes.folders}>\n              <Folders />\n              <AddFolderBtn />\n            </div>\n            <div\n              className={\n                isFoldersHidden\n                  ? classes.notesWhenFoldersHidden\n                  : classes.notesPanel\n              }\n            >\n              <Notes />\n            </div>\n          </Panels>\n        </div>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isFoldersHidden: getIsFoldersHidden(state),\n})\n\nexport default connect(mapStateToProps, null)(App)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport { DndProvider } from \"react-dnd\"\nimport Backend from \"react-dnd-html5-backend\"\nimport App from \"./App\"\nimport \"./styles.scss\"\nimport store from \"./redux/store\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <DndProvider backend={Backend}>\n        <App />\n      </DndProvider>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n)"],"sourceRoot":""}