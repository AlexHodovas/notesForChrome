{"version":3,"sources":["components/buttons/DotButtonsSimulation.js","redux/reducers/hideFoldersReducer.js","redux/types.js","redux/reducers/folderReducer.js","redux/reducers/saveFolderIdReducer.js","redux/reducers/pressAddFolderBtnReducer.js","redux/reducers/pressEditFolderNameBtnReducer.js","redux/reducers/noteReducer.js","redux/reducers/pressAddNoteNameBtnReducer.js","redux/reducers/pressEditNoteNameBtnReducer.js","redux/reducers/saveNoteIdReducer.js","redux/reducers/saveSelectedItemIdReducer.js","redux/reducers/dialogReducer.js","redux/store.js","redux/actions.js","components/buttons/HideFoldersBtn.js","helpers/allNotesIdInDeletedFolder.js","components/buttons/DeleteSelectedItemBtn.js","components/buttons/AddNoteBtn.js","components/AppHeader.js","components/buttons/DeleteFolderBtn.js","components/buttons/EditFolderNameBtn.js","components/ItemTypesForReactDND.js","components/Folder.js","components/Folders.js","components/buttons/AddFolderBtn.js","components/buttons/DeleteNoteBtn.js","components/buttons/EditNoteNameBtn.js","components/Note.js","helpers/findNoteBody.js","components/Dialog.js","components/Notes.js","App.js","index.js"],"names":["useStyles","makeStyles","dot","display","width","height","background","borderRadius","margin","DotsContainer","styled","Box","marginLeft","RedCircle","border","AmberCircle","GreenCircle","DotButtonsSimulation","classes","className","hideFoldersReducer","state","action","type","initialState","folderId","folderName","notesInThisFolder","folderReducer","folder","filter","map","index","note","noteId","noteBody","noteName","length","selectedItemIdFromAction","selectedItemId","includes","folderAllNotesId","arrayOfNotesIdThatWillBeDeleting","saveFolderIdForEditingReducer","pressAddFolderBtnReducer","value","pressEditFolderNameBtnReducer","noteReducer","pressAddNoteNameBtnReducer","pressEditNoteNameBtnReducer","saveNoteIdForEditingReducer","saveSelectedItemIdReducer","itemId","dialogReducer","getIsFoldersHidden","isFoldersHidden","getFolders","folders","getIsUserPressAddFolderBtn","isUserPressAddFolderBtn","getIsUserPressEditFolderNameBtn","isUserPressEditFolderNameBtn","getSelectedFolderIdForEditing","selectedFolderIdForEditing","getNotes","notes","getIsUserPressAddNoteNameBtn","isUserPressAddNoteNameBtn","getIsUserPressEditNoteNameBtn","isUserPressEditNoteNameBtn","getSelectedNoteIdForEditing","selectedNoteIdForEditing","getSelectedItemIdForDeleting","selectedItemIdForDeleting","getIsDialogOpened","isDialogOpened","rootReducer","combineReducers","saveFolderIdReducer","saveNoteIdReducer","store","createStore","setTimeout","console","log","pressAddFolderBtn","pressEditFolderNameBtn","changeFolderName","saveFolderId","changeNotesInThisFolder","pressAddNoteNameBtn","pressEditNoteNameBtn","changeNoteName","saveNoteId","changeNoteBody","saveSelectedItemId","openDialog","changeNoteBodyInNotesInThisFolder","updateFolderAll","StyledButton","withStyles","root","paddingTop","paddingBottom","paddingLeft","paddingRight","minWidth","backgroundColor","label","padding","Button","button","marginTop","connect","dispatch","hideFolders","variant","color","startIcon","onClick","allNotesIdInDeletedFolder","selectedElementId","deletedFolder","find","ids","i","push","deleteSelectedItem","arrayOfIds","AppHeaderWrapper","borderTopRightRadius","borderTopLeftRadius","borderBottom","AppHeader","DeleteSelectedItemBtn","theme","deleteFolder","IconButton","aria-label","fontSize","style","editFolderNameInput","folderNameInput","FolderStyled","alignItems","isUserPressEditFolderNameButton","allowedDropEffect","useState","newFolderName","setNewFolderName","useDrop","accept","ItemTypesForReactDND","drop","name","collect","monitor","isOver","canDrop","isActive","selectBackgroundColor","maxLength","autoFocus","placeholder","defaultValue","onChange","e","target","onBlur","cn","selected","ref","input","isUserPressAddFolderButton","addFolderFromProps","addFolder","currentFolder","setCurrentFolder","key","prevState","Date","position","bottom","boxShadow","textTransform","deleteNote","deleteNoteInNotesInThisFolder","NoteWrapper","editNoteNameInput","noteLabel","isUserPressEditNoteNameButton","folderIdOnDragEnd","changeNoteNameInNotesInThisFolder","deleteNoteInNotesInThisFolderOnDragEnd","newNoteName","setNewNoteName","item","useDrag","end","dropResult","getDropResult","dropEffect","droppedFolder","needFolder","some","opacity","isDragging","drag","onDoubleClick","DeleteNoteBtn","findNoteBody","newNoteBody","setNewNoteBody","Dialog","open","onClose","aria-labelledby","DialogContent","DialogContentText","noValidate","autoComplete","TextField","rows","multiline","id","DialogActions","NotesWrapper","NoteBodyWrapper","borderLeft","borderBottomRightRadius","firstNoteinput","StyledTextFieldWhenFoldersHidden","addNoteFromProps","addNote","currentNote","setCurrentNote","handleInputChange","handleTextFieldChange","isItAllNotesFolder","folderAllNotes","notesInThisFolderInFolderAll","AppContainer","Panels","NotesPanel","borderRight","borderBottomLeftRadius","hidden","AddFolderBtn","ReactDOM","render","StrictMode","DndProvider","backend","Backend","document","getElementById"],"mappings":"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","file":"static/js/main.ae22b330.chunk.js","sourcesContent":["import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport { styled, makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(() => ({\n  dot: {\n    display: \"inline-block\",\n    width: 10,\n    height: 10,\n    background: \"#f9f9f9\",\n    borderRadius: \"50%\",\n    margin: \"12px 8px 0 0\"\n  }\n}));\n\nconst DotsContainer = styled(Box)({\n  marginLeft: 10\n});\n\nconst RedCircle = styled(Box)({\n  background: \"#FF6057\",\n  border: \"1px solid #E14640\"\n});\n\nconst AmberCircle = styled(Box)({\n  background: \"#FFBD2E\",\n  border: \"1px solid #DFA123\"\n});\n\nconst GreenCircle = styled(Box)({\n  background: \"#27C93F\",\n  border: \"1px solid #1DAD2B\"\n});\n\nconst DotButtonsSimulation = () => {\n  const classes = useStyles();\n\n  return (\n    <DotsContainer>\n      <RedCircle className={classes.dot} />\n      <AmberCircle className={classes.dot} />\n      <GreenCircle className={classes.dot} />\n    </DotsContainer>\n  );\n};\n\nexport default DotButtonsSimulation;","import { HIDE_FOLDERS } from \"../types\";\n\nconst hideFoldersReducer = (state = false, action) => {\n  switch (action.type) {\n    case HIDE_FOLDERS:\n      return !state;\n\n    default:\n      return state;\n  }\n};\n\nexport default hideFoldersReducer;\n","// folders types\nexport const HIDE_FOLDERS = \"HIDE_FOLDERS\";\nexport const ADD_FOLDER = \"ADD_FOLDER\";\nexport const DELETE_FOLDER = \"DELETE_FOLDER\";\nexport const PRESS_ADD_FOLDER_BTN = \"PRESS_ADD_FOLDER_BTN\";\nexport const PRESS_EDIT_FOLDER_NAME_BTN = \"PRESS_EDIT_FOLDER_NAME_BTN\";\nexport const CHANGE_FOLDER_NAME = \"CHANGE_FOLDER_NAME\";\nexport const SAVE_FOLDER_ID = \"SAVE_FOLDER_ID\";\n\n// notes types\nexport const ADD_NOTE = \"ADD_NOTE\";\nexport const DELETE_NOTE = \"DELETE_NOTE\";\nexport const PRESS_ADD_NOTE_NAME_BTN = \"PRESS_ADD_NOTE_NAME_BTN\";\nexport const PRESS_EDIT_NOTE_NAME_BTN = \"PRESS_EDIT_NOTE_NAME_BTN\";\nexport const CHANGE_NOTE_NAME = \"CHANGE_NOTE_NAME\";\nexport const CHANGE_NOTE_BODY = \"CHANGE_NOTE_BODY\";\nexport const SAVE_NOTE_ID = \"SAVE_NOTE_ID\";\n\n// common types\nexport const SAVE_SELECTED_ITEM_ID = \"SAVE_SELECTED_ITEM_ID\";\nexport const DELETE_SELECTED_ITEM = \"DELETE_SELECTED_ITEM\";\nexport const IS_DIALOG_OPENED =\"IS_DIALOG_OPENED\";\nexport const UPDATE_FOLDER_ALL = \"UPDATE_FOLDER_ALL\";\nexport const CHANGE_NOTE_BODY_IN_NOTES_IN_THIS_FOLDER =\n  \"CHANGE_NOTE_BODY_IN_NOTES_IN_THIS_FOLDER\";\nexport const CHANGE_NOTES_IN_THIS_FOLDER = \"CHANGE_NOTES_IN_THIS_FOLDER\";\nexport const CHANGE_NOTE_NAME_IN_NOTES_IN_THIS_FOLDER =\n  \"CHANGE_NOTE_NAME_IN_NOTES_IN_THIS_FOLDER\";\nexport const DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER =\n  \"DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER\";\nexport const DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER_ON_DRAG_END =\n  \"DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER_ON_DRAG_END\";\n","import {\n  ADD_FOLDER,\n  DELETE_FOLDER,\n  CHANGE_FOLDER_NAME,\n  CHANGE_NOTES_IN_THIS_FOLDER,\n  CHANGE_NOTE_BODY_IN_NOTES_IN_THIS_FOLDER,\n  CHANGE_NOTE_NAME_IN_NOTES_IN_THIS_FOLDER,\n  DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER,\n  DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER_ON_DRAG_END,\n  DELETE_SELECTED_ITEM,\n  UPDATE_FOLDER_ALL,\n} from \"../types\";\n\nconst initialState = [\n  {\n    folderId: \"folderAllNotes\",\n    folderName: \"All\",\n    notesInThisFolder: []\n  }\n];\n\nconst folderReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_FOLDER:\n      return [\n        ...state,\n        {\n          folderId: action.folder.folderId,\n          folderName: action.folder.folderName,\n          notesInThisFolder: []\n        }\n      ];\n\n    case DELETE_FOLDER:\n      return state.filter(folder => folder.folderId !== action.folderId);\n\n    case CHANGE_FOLDER_NAME:\n      return state.map(folder => {\n        if (\n          action.folderId !== folder.folderId ||\n          folder.folderName === action.folderName\n        ) {\n          return folder;\n        }\n\n        return {\n          ...folder,\n          folderName: action.folderName\n        };\n      });\n\n    case CHANGE_NOTES_IN_THIS_FOLDER:\n      return state.map((folder, index) => {\n        if (\n          index === 0 &&\n          (action.folderId === \"folderAllNotes\") === folder.folderId\n        ) {\n          return {\n            ...folder,\n            notesInThisFolder: [...folder.notesInThisFolder, action.note]\n          };\n        }\n\n        if (folder.folderId === action.folderId) {\n          return {\n            ...folder,\n            notesInThisFolder: [...folder.notesInThisFolder, action.note]\n          };\n        } else {\n          return folder;\n        }\n      });\n\n    case DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER_ON_DRAG_END:\n      return state.map((folder, index) => {\n        if (\n          index === 0 &&\n          action.folderId === \"folderAllNotes\" &&\n          action.folderId === folder.folderId\n        ) {\n          return folder;\n        }\n\n        if (folder.folderId === action.folderId) {\n          return {\n            ...folder,\n            notesInThisFolder: folder.notesInThisFolder.filter(\n              note => note.noteId !== action.noteId\n            )\n          };\n        } else {\n          return folder;\n        }\n      });\n\n    case CHANGE_NOTE_BODY_IN_NOTES_IN_THIS_FOLDER:\n      return state.map(folder => {\n        return {\n          ...folder,\n          notesInThisFolder: folder.notesInThisFolder.map(note => {\n            if (\n              action.noteId !== note.noteId ||\n              action.noteBody === note.noteBody\n            ) {\n              return note;\n            }\n\n            return {\n              ...note,\n              noteBody: action.noteBody\n            };\n          })\n        };\n      });\n\n    case CHANGE_NOTE_NAME_IN_NOTES_IN_THIS_FOLDER:\n      return state.map(folder => {\n        return {\n          ...folder,\n          notesInThisFolder: folder.notesInThisFolder.map(note => {\n            if (\n              action.noteId !== note.noteId ||\n              action.noteName === note.noteName\n            ) {\n              return note;\n            }\n\n            return {\n              ...note,\n              noteName: action.noteName\n            };\n          })\n        };\n      });\n\n    case DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER:\n      return state.map(folder => {\n        if (folder.notesInThisFolder.length === 0) {\n          return {\n            ...folder,\n            notesInThisFolder: []\n          };\n        } else {\n          return {\n            ...folder,\n            notesInThisFolder: folder.notesInThisFolder.filter(\n              note => note.noteId !== action.noteId\n            )\n          };\n        }\n      });\n\n    case DELETE_SELECTED_ITEM:\n      const selectedItemIdFromAction = action.selectedItemId;\n\n      if (selectedItemIdFromAction.includes(\"folder\")) {\n        return state.filter((folder, index) => {\n          if (\n            index === 0 &&\n            selectedItemIdFromAction === \"folderAllNotes\" &&\n            selectedItemIdFromAction === folder.folderId\n          ) {\n            return folder;\n          } else {\n            return folder.folderId !== selectedItemIdFromAction;\n          }\n        });\n      } else {\n        return state.map(folder => {\n          return {\n            ...folder,\n            notesInThisFolder: folder.notesInThisFolder.filter(\n              note => note.noteId !== selectedItemIdFromAction\n            )\n          };\n        });\n      }\n\n    case UPDATE_FOLDER_ALL:\n      return state.map((folder, index) => {\n        if (\n          index === 0 &&\n          action.folderAllNotesId === \"folderAllNotes\" &&\n          action.folderAllNotesId === folder.folderId\n        ) {\n          return {\n            ...folder,\n            notesInThisFolder: folder.notesInThisFolder.filter(note => {\n              if (\n                action.arrayOfNotesIdThatWillBeDeleting.length > 0 &&\n                !action.arrayOfNotesIdThatWillBeDeleting.includes(note.noteId)\n              ) {\n                return note;\n              }\n            })\n          };\n        } else {\n          return folder;\n        }\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default folderReducer;\n","import { SAVE_FOLDER_ID } from \"../types\";\n\nconst saveFolderIdForEditingReducer = (state = 'folderAllNotes', action) => {\n  switch (action.type) {\n    case SAVE_FOLDER_ID:\n      return action.folderId;\n\n    default:\n      return state;\n  }\n};\n\nexport default saveFolderIdForEditingReducer;","import { PRESS_ADD_FOLDER_BTN } from \"../types\";\n\nconst pressAddFolderBtnReducer = (state = false, action) => {\n  switch (action.type) {\n    case PRESS_ADD_FOLDER_BTN:\n      return action.value;\n\n    default:\n      return state;\n  }\n};\n\nexport default pressAddFolderBtnReducer;","import { PRESS_EDIT_FOLDER_NAME_BTN } from \"../types\";\n\nconst pressEditFolderNameBtnReducer = (state = false, action) => {\n  switch (action.type) {\n    case PRESS_EDIT_FOLDER_NAME_BTN:\n      return action.value;\n\n    default:\n      return state;\n  }\n};\n\nexport default pressEditFolderNameBtnReducer;","import {\n  ADD_NOTE,\n  DELETE_NOTE,\n  CHANGE_NOTE_NAME,\n  CHANGE_NOTE_BODY,\n} from \"../types\";\n\nconst noteReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD_NOTE:\n      return [\n        ...state,\n        {\n          noteId: action.note.noteId,\n          noteName: action.note.noteName,\n          noteBody: action.note.noteBody\n        }\n      ];\n\n    case DELETE_NOTE:\n      return state.filter(note => note.noteId !== action.noteId);\n\n    case CHANGE_NOTE_NAME:\n      return state.map(note => {\n        if (\n          action.noteId !== note.noteId ||\n          note.noteName === action.noteName\n        ) {\n          return note;\n        }\n\n        return {\n          ...note,\n          noteName: action.noteName\n        };\n      });\n\n    case CHANGE_NOTE_BODY:\n      return state.map(note => {\n        if (\n          action.noteId !== note.noteId ||\n          note.noteBody === action.noteBody\n        ) {\n          return note;\n        }\n\n        return {\n          ...note,\n          noteBody: action.noteBody\n        };\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default noteReducer;\n","import { PRESS_ADD_NOTE_NAME_BTN } from \"../types\";\n\nconst pressAddNoteNameBtnReducer = (state = false, action) => {\n  switch (action.type) {\n    case PRESS_ADD_NOTE_NAME_BTN:\n      return action.value;\n\n    default:\n      return state;\n  }\n};\n\nexport default pressAddNoteNameBtnReducer;\n","import { PRESS_EDIT_NOTE_NAME_BTN } from \"../types\";\n\nconst pressEditNoteNameBtnReducer = (state = false, action) => {\n  switch (action.type) {\n    case PRESS_EDIT_NOTE_NAME_BTN:\n      return action.value;\n\n    default:\n      return state;\n  }\n};\n\nexport default pressEditNoteNameBtnReducer;","import { SAVE_NOTE_ID } from \"../types\";\n\nconst saveNoteIdForEditingReducer = (state = '', action) => {\n  switch (action.type) {\n    case SAVE_NOTE_ID:\n      return action.noteId;\n\n    default:\n      return state;\n  }\n};\n\nexport default saveNoteIdForEditingReducer;","import { SAVE_SELECTED_ITEM_ID } from \"../types\";\n\nconst saveSelectedItemIdReducer = (state = '', action) => {\n  switch (action.type) {\n    case SAVE_SELECTED_ITEM_ID:\n      return action.itemId;\n\n    default:\n      return state;\n  }\n};\n\nexport default saveSelectedItemIdReducer;","import { IS_DIALOG_OPENED } from \"../types\";\n\nconst dialogReducer = (state = false, action) => {\n  switch (action.type) {\n    case IS_DIALOG_OPENED:\n      return action.value;\n\n    default:\n      return state;\n  }\n};\n\nexport default dialogReducer;\n","import { createStore, combineReducers } from \"redux\";\n\n//reducers\nimport hideFoldersReducer from \"./reducers/hideFoldersReducer\";\nimport folderReducer from \"./reducers/folderReducer\";\nimport saveFolderIdReducer from \"./reducers/saveFolderIdReducer\";\nimport pressAddFolderBtnReducer from \"./reducers/pressAddFolderBtnReducer\";\nimport pressEditFolderNameBtnReducer from \"./reducers/pressEditFolderNameBtnReducer\";\nimport noteReducer from \"./reducers/noteReducer\";\nimport pressAddNoteNameBtnReducer from \"./reducers/pressAddNoteNameBtnReducer\";\nimport pressEditNoteNameBtnReducer from \"./reducers/pressEditNoteNameBtnReducer\";\nimport saveNoteIdReducer from \"./reducers/saveNoteIdReducer\";\nimport saveSelectedItemIdReducer from \"./reducers/saveSelectedItemIdReducer\";\nimport dialogReducer from \"./reducers/dialogReducer\";\n\n// selectors\nexport const getIsFoldersHidden = state => state.isFoldersHidden;\nexport const getFolders = state => state.folders;\nexport const getIsUserPressAddFolderBtn = state =>\n  state.isUserPressAddFolderBtn;\nexport const getIsUserPressEditFolderNameBtn = state =>\n  state.isUserPressEditFolderNameBtn;\nexport const getSelectedFolderIdForEditing = state =>\n  state.selectedFolderIdForEditing;\nexport const getNotes = state => state.notes;\nexport const getIsUserPressAddNoteNameBtn = state =>\n  state.isUserPressAddNoteNameBtn;\nexport const getIsUserPressEditNoteNameBtn = state =>\n  state.isUserPressEditNoteNameBtn;\nexport const getSelectedNoteIdForEditing = state =>\n  state.selectedNoteIdForEditing;\nexport const getSelectedItemIdForDeleting = state =>\n  state.selectedItemIdForDeleting;\nexport const getIsDialogOpened = state =>\n  state.isDialogOpened;\n\n//rootReducer\nconst rootReducer = combineReducers({\n  isFoldersHidden: hideFoldersReducer,\n  folders: folderReducer,\n  isUserPressAddFolderBtn: pressAddFolderBtnReducer,\n  isUserPressEditFolderNameBtn: pressEditFolderNameBtnReducer,\n  selectedFolderIdForEditing: saveFolderIdReducer,\n  notes: noteReducer,\n  isUserPressAddNoteNameBtn: pressAddNoteNameBtnReducer,\n  isUserPressEditNoteNameBtn: pressEditNoteNameBtnReducer,\n  selectedNoteIdForEditing: saveNoteIdReducer,\n  selectedItemIdForDeleting: saveSelectedItemIdReducer,\n  isDialogOpened: dialogReducer,\n});\n\nconst store = createStore(rootReducer);\n\nsetTimeout(() => {\n  console.log(\"smile :)\");\n}, 5000);\n\nexport default store;\n","import {\n  HIDE_FOLDERS,\n  ADD_FOLDER,\n  DELETE_FOLDER,\n  PRESS_ADD_FOLDER_BTN,\n  PRESS_EDIT_FOLDER_NAME_BTN,\n  CHANGE_FOLDER_NAME,\n  SAVE_FOLDER_ID,\n  ADD_NOTE,\n  DELETE_NOTE,\n  PRESS_ADD_NOTE_NAME_BTN,\n  PRESS_EDIT_NOTE_NAME_BTN,\n  CHANGE_NOTE_NAME,\n  SAVE_NOTE_ID,\n  CHANGE_NOTE_BODY,\n  SAVE_SELECTED_ITEM_ID,\n  DELETE_SELECTED_ITEM,\n  IS_DIALOG_OPENED,\n  UPDATE_FOLDER_ALL,\n  CHANGE_NOTE_BODY_IN_NOTES_IN_THIS_FOLDER,\n  CHANGE_NOTES_IN_THIS_FOLDER,\n  CHANGE_NOTE_NAME_IN_NOTES_IN_THIS_FOLDER,\n  DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER,\n  DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER_ON_DRAG_END\n} from \"./types\";\n\n// folders actions\nexport const hideFolders = () => ({ type: HIDE_FOLDERS });\nexport const addFolder = folder => ({ type: ADD_FOLDER, folder });\nexport const deleteFolder = folderId => ({ type: DELETE_FOLDER, folderId });\nexport const pressAddFolderBtn = value => ({\n  type: PRESS_ADD_FOLDER_BTN,\n  value\n});\nexport const pressEditFolderNameBtn = value => ({\n  type: PRESS_EDIT_FOLDER_NAME_BTN,\n  value\n});\nexport const changeFolderName = (folderName, folderId) => ({\n  type: CHANGE_FOLDER_NAME,\n  folderName,\n  folderId\n});\nexport const saveFolderId = folderId => ({\n  type: SAVE_FOLDER_ID,\n  folderId\n});\nexport const changeNotesInThisFolder = (folderId, note) => ({\n  type: CHANGE_NOTES_IN_THIS_FOLDER,\n  folderId,\n  note\n});\n\n// notes actions\nexport const addNote = note => ({ type: ADD_NOTE, note });\nexport const pressAddNoteNameBtn = value => ({\n  type: PRESS_ADD_NOTE_NAME_BTN,\n  value\n});\nexport const pressEditNoteNameBtn = value => ({\n  type: PRESS_EDIT_NOTE_NAME_BTN,\n  value\n});\nexport const changeNoteName = (noteName, noteId) => ({\n  type: CHANGE_NOTE_NAME,\n  noteName,\n  noteId\n});\nexport const saveNoteId = noteId => ({\n  type: SAVE_NOTE_ID,\n  noteId\n});\nexport const deleteNote = noteId => ({ type: DELETE_NOTE, noteId });\nexport const changeNoteBody = (noteBody, noteId) => ({\n  type: CHANGE_NOTE_BODY,\n  noteBody,\n  noteId\n});\n\n// common actions\nexport const saveSelectedItemId = itemId => ({\n  type: SAVE_SELECTED_ITEM_ID,\n  itemId\n});\nexport const openDialog = value => ({\n  type: IS_DIALOG_OPENED,\n  value\n});\nexport const changeNoteBodyInNotesInThisFolder = (noteBody, noteId) => ({\n  type: CHANGE_NOTE_BODY_IN_NOTES_IN_THIS_FOLDER,\n  noteBody,\n  noteId\n});\nexport const changeNoteNameInNotesInThisFolder = (noteName, noteId) => ({\n  type: CHANGE_NOTE_NAME_IN_NOTES_IN_THIS_FOLDER,\n  noteName,\n  noteId\n});\nexport const deleteNoteInNotesInThisFolder = noteId => ({\n  type: DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER,\n  noteId\n});\nexport const deleteNoteInNotesInThisFolderOnDragEnd = (folderId, noteId) => ({\n  type: DELETE_NOTE_IN_NOTES_IN_THIS_FOLDER_ON_DRAG_END,\n  folderId,\n  noteId\n});\nexport const deleteSelectedItem = selectedItemId => ({\n  type: DELETE_SELECTED_ITEM,\n  selectedItemId\n});\nexport const updateFolderAll = (\n  arrayOfNotesIdThatWillBeDeleting,\n  folderAllNotesId\n) => ({\n  type: UPDATE_FOLDER_ALL,\n  arrayOfNotesIdThatWillBeDeleting,\n  folderAllNotesId\n});\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport FolderIcon from \"@material-ui/icons/Folder\";\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\nimport { connect } from \"react-redux\";\nimport { getIsFoldersHidden } from \"../../redux/store\";\nimport { hideFolders } from \"../../redux/actions\";\n\nconst StyledButton = withStyles({\n  root: {\n    border: 0,\n    paddingTop: 2,\n    paddingBottom: 2,\n    paddingLeft: 12,\n    paddingRight: 0,\n    minWidth: 38,\n    backgroundColor: \"white\"\n  },\n  label: {\n    padding: 0\n  }\n})(Button);\n\nconst useStyles = makeStyles({\n  button: {\n    marginTop: 6,\n    marginLeft: 150\n  }\n});\n\nconst HideFoldersBtn = ({ isFoldersHidden, hideFolders }) => {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <StyledButton\n        variant=\"contained\"\n        color=\"default\"\n        className={classes.button}\n        startIcon={isFoldersHidden ? <FolderIcon /> : <FolderOpenIcon />}\n        onClick={() => hideFolders()}\n      >\n        {\"\"}\n      </StyledButton>\n    </div>\n  );\n};\nconst mapStateToProps = state => ({\n  isFoldersHidden: getIsFoldersHidden(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  hideFolders: () => dispatch(hideFolders())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HideFoldersBtn);\n","export default function allNotesIdInDeletedFolder(\n  folders, selectedElementId\n) {\n  const deletedFolder = folders.find(\n    folder => folder.folderId === selectedElementId\n  );\n  if (!deletedFolder) return [];\n  const ids = [];\n\n  for (let i = 0; i < deletedFolder.notesInThisFolder.length; i++) {\n    const note = deletedFolder.notesInThisFolder[i];\n    ids.push(note.noteId);\n  }\n\n  return ids;\n};","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport { connect } from \"react-redux\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport allNotesIdInDeletedFolder from \"../../helpers/allNotesIdInDeletedFolder\";\n\nimport {\n  getSelectedItemIdForDeleting,\n  getSelectedFolderIdForEditing,\n  getFolders\n} from \"../../redux/store\";\nimport { deleteSelectedItem, updateFolderAll } from \"../../redux/actions\";\n\nconst StyledButton = withStyles({\n  root: {\n    border: 0,\n    paddingTop: 2,\n    paddingBottom: 2,\n    paddingLeft: 12,\n    paddingRight: 0,\n    minWidth: 38,\n    backgroundColor: \"white\"\n  },\n  label: {\n    padding: 0\n  }\n})(Button);\n\nconst useStyles = makeStyles({\n  button: {\n    marginTop: 6,\n    marginLeft: 8\n  }\n});\n\nconst DeleteSelectedItem = ({\n  deleteSelectedItem,\n  selectedItemIdForDeleting,\n  folders,\n  updateFolderAll\n}) => {\n  const classes = useStyles();\n\n  const checkNeedFolderUpdate = () => {\n    if (selectedItemIdForDeleting.includes(\"folder\")) {\n      updateFolderAll(\n        allNotesIdInDeletedFolder(folders, selectedItemIdForDeleting),\n        \"folderAllNotes\"\n      );\n    }\n  };\n\n  return (\n    <div>\n      <StyledButton\n        variant=\"contained\"\n        color=\"default\"\n        className={classes.button}\n        startIcon={<DeleteForeverIcon />}\n        onClick={() => {\n          checkNeedFolderUpdate();\n          deleteSelectedItem(selectedItemIdForDeleting);\n        }}\n      >\n        {\"\"}\n      </StyledButton>\n    </div>\n  );\n};\nconst mapStateToProps = state => ({\n  selectedItemIdForDeleting: getSelectedItemIdForDeleting(state),\n  folders: getFolders(state),\n  selectedFolderIdForEditing: getSelectedFolderIdForEditing(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteSelectedItem: selectedItemId =>\n    dispatch(deleteSelectedItem(selectedItemId)),\n  updateFolderAll: (arrayOfIds, folderAllNotesId) =>\n    dispatch(updateFolderAll(arrayOfIds, folderAllNotesId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DeleteSelectedItem);\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport NoteAddIcon from \"@material-ui/icons/NoteAdd\";\nimport { connect } from \"react-redux\";\n\nimport { pressAddNoteNameBtn } from \"../../redux/actions\";\n\nconst StyledButton = withStyles({\n  root: {\n    border: 0,\n    paddingTop: 2,\n    paddingBottom: 2,\n    paddingLeft: 12,\n    paddingRight: 0,\n    minWidth: 38,\n    backgroundColor: \"white\"\n  },\n  label: {\n    padding: 0\n  }\n})(Button);\n\nconst useStyles = makeStyles(() => ({\n  button: {\n    marginTop: 6,\n    marginLeft: 8\n  }\n}));\n\nconst AddNote = ({ pressAddNoteNameBtn }) => {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <StyledButton\n        variant=\"contained\"\n        color=\"default\"\n        className={classes.button}\n        startIcon={<NoteAddIcon />}\n        onClick={() => {\n          pressAddNoteNameBtn(true);\n        }}\n      >\n        {\"\"}\n      </StyledButton>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  pressAddNoteNameBtn: value => dispatch(pressAddNoteNameBtn(value))\n});\n\nexport default connect(null, mapDispatchToProps)(AddNote);\n","import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport { styled } from \"@material-ui/core/styles\";\nimport DotButtonsSimulation from \"./buttons/DotButtonsSimulation\";\nimport HideFoldersBtn from \"./buttons/HideFoldersBtn\";\nimport DeleteSelectedItemBtn from \"./buttons/DeleteSelectedItemBtn\";\nimport AddNote from \"./buttons/AddNoteBtn\";\n\nconst AppHeaderWrapper = styled(Box)({\n  display: \"flex\",\n  backgroundColor: \"rgb(228, 226, 229)\",\n  height: 38,\n  borderTopRightRadius: 10,\n  borderTopLeftRadius: 10,\n  borderBottom: \"1px solid rgb(190, 190, 190)\"\n});\n\nconst AppHeader = () => (\n  <AppHeaderWrapper>\n    <DotButtonsSimulation />\n    <HideFoldersBtn />\n    <DeleteSelectedItemBtn />\n    <AddNote />\n  </AppHeaderWrapper>\n);\n\nexport default AppHeader;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { connect } from \"react-redux\";\nimport allNotesIdInDeletedFolder from \"../../helpers/allNotesIdInDeletedFolder\";\nimport {\n  getSelectedItemIdForDeleting,\n  getSelectedFolderIdForEditing,\n  getFolders\n} from \"../../redux/store\";\nimport {\n  updateFolderAll,\n  saveFolderId,\n  deleteFolder\n} from \"../../redux/actions\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& > *\": {\n      margin: -6\n    }\n  }\n}));\n\nconst DeleteFolderButton = ({\n  deleteFolder,\n  folderId,\n  folders,\n  updateFolderAll,\n  saveFolderId,\n  selectedFolderIdForEditing\n}) => {\n  const classes = useStyles();\n\n  const checkNeedFolderUpdate = () => {\n    if (\n      allNotesIdInDeletedFolder(folders, selectedFolderIdForEditing).length > 0\n    ) {\n      updateFolderAll(\n        allNotesIdInDeletedFolder(folders, selectedFolderIdForEditing),\n        \"folderAllNotes\"\n      );\n    }\n  };\n\n  return (\n    <div\n      className={classes.root}\n      onClick={() => {\n        saveFolderId(folderId);\n        checkNeedFolderUpdate();\n        deleteFolder(folderId);\n      }}\n    >\n      <IconButton aria-label=\"delete\">\n        <DeleteIcon fontSize=\"small\" />\n      </IconButton>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  selectedItemIdForDeleting: getSelectedItemIdForDeleting(state),\n  folders: getFolders(state),\n  selectedFolderIdForEditing: getSelectedFolderIdForEditing(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateFolderAll: (arrayOfIds, folderAllNotesId) =>\n    dispatch(updateFolderAll(arrayOfIds, folderAllNotesId)),\n  deleteFolder: folderId => dispatch(deleteFolder(folderId)),\n  saveFolderId: folderId => dispatch(saveFolderId(folderId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DeleteFolderButton);\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport { connect } from \"react-redux\";\n\nimport {\n  pressEditFolderNameBtn,\n  saveFolderId\n} from \"../../redux/actions\";\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    \"& > *\": {\n      margin: -6\n    }\n  }\n}));\n\nconst EditFolderNameBtn = ({\n  pressEditFolderNameBtn,\n  folderId,\n  saveFolderId\n}) => {\n  const classes = useStyles();\n\n  return (\n    <div\n      className={classes.root}\n      onClick={() => {\n        pressEditFolderNameBtn(true);\n        saveFolderId(folderId);\n      }}\n    >\n      <IconButton aria-label=\"delete\">\n        <EditIcon fontSize=\"small\" />\n      </IconButton>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  pressEditFolderNameBtn: value => dispatch(pressEditFolderNameBtn(value)),\n  saveFolderId: folderId => dispatch(saveFolderId(folderId))\n});\n\nexport default connect(null, mapDispatchToProps)(EditFolderNameBtn);\n","export default {\n  BOX: 'box',\n}","import React, { useState } from \"react\";\nimport cn from \"classnames\";\nimport { useDrop } from \"react-dnd\";\nimport { connect } from \"react-redux\";\nimport Box from \"@material-ui/core/Box\";\nimport DeleteFolderButton from \"./buttons/DeleteFolderBtn\";\nimport EditFolderNameButton from \"./buttons/EditFolderNameBtn\";\nimport ItemTypesForReactDND from \"./ItemTypesForReactDND\";\nimport { styled, makeStyles } from \"@material-ui/core/styles\";\n\nimport {\n  getSelectedFolderIdForEditing,\n  getIsUserPressEditFolderNameBtn\n} from \"../redux/store\";\nimport {\n  changeFolderName,\n  saveFolderId,\n  pressEditFolderNameBtn,\n  saveSelectedItemId,\n} from \"../redux/actions\";\n\nconst style = {\n  color: \"white\"\n};\n\nconst useStyles = makeStyles({\n  label: {\n    display: \"block\",\n    minWidth: 140,\n    fontSize: 14,\n    padding: 5,\n    paddingRight: 0\n  },\n  editFolderNameInput: {\n    fontSize: 14,\n    margin: \"5px 0\"\n  },\n  folderNameInput: {\n    width: 200,\n    fontSize: 14,\n    marginTop: 10\n  }\n});\n\nconst FolderStyled = styled(Box)({\n  display: \"flex\",\n  alignItems: \"flex-end\"\n});\n\nfunction selectBackgroundColor(isActive, canDrop, folderId) {\n  if (folderId === \"folderAllNotes\") return \"\";\n  if (isActive) return \"darkgreen\";\n  if (canDrop) return \"darkkhaki\";\n\n  return \"\";\n}\n\nconst Folder = ({\n  allowedDropEffect,\n  folder,\n  changeFolderName,\n  saveFolderId,\n  selectedFolderIdForEditing,\n  isUserPressEditFolderNameButton,\n  pressEditFolderNameBtn,\n  saveSelectedItemId\n}) => {\n  const classes = useStyles();\n  const { folderName, folderId } = folder;\n  const [newFolderName, setNewFolderName] = useState(\"\");\n\n  const handleInputChange = value => {\n    setNewFolderName(value);\n  };\n\n  const [{ canDrop, isOver }, drop] = useDrop({\n    accept: ItemTypesForReactDND.BOX,\n    drop: () => ({\n      name: folderId,\n      allowedDropEffect\n    }),\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  });\n  const isActive = canDrop && isOver;\n  const backgroundColor = selectBackgroundColor(isActive, canDrop, folderId);\n\n  if (\n    selectedFolderIdForEditing === folderId &&\n    isUserPressEditFolderNameButton\n  ) {\n    return (\n      <div>\n        <input\n          maxLength=\"20\"\n          autoFocus\n          placeholder=\"New Folder\"\n          defaultValue={folderName}\n          onChange={e => {\n            handleInputChange(e.target.value);\n            changeFolderName(newFolderName, folderId);\n          }}\n          onBlur={() => {\n            pressEditFolderNameBtn(false);\n          }}\n          type=\"text\"\n          className={classes.editFolderNameInput}\n        />\n      </div>\n    );\n  }\n\n  if (folderId === \"folderAllNotes\") {\n    return (\n      <div style={{ ...style, backgroundColor }}>\n        <li\n          onClick={() => {\n            saveFolderId(folderId);\n            saveSelectedItemId(folderId);\n          }}\n          className={cn(\"folder-li\", {\n            selected: selectedFolderIdForEditing === folderId\n          })}\n        >\n          <FolderStyled>\n            <label className={classes.label}>{folderName}</label>\n          </FolderStyled>\n        </li>\n      </div>\n    );\n  }\n\n  return (\n    <div ref={drop} style={{ ...style, backgroundColor }}>\n      <li\n        onClick={() => {\n          saveFolderId(folderId);\n          saveSelectedItemId(folderId);\n        }}\n        className={cn(\"folder-li\", {\n          selected: selectedFolderIdForEditing === folderId\n        })}\n      >\n        <FolderStyled>\n          <label className={classes.label}>{folderName}</label>\n          <DeleteFolderButton folderId={folderId} />\n          <EditFolderNameButton folderId={folderId} />\n        </FolderStyled>\n      </li>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  isUserPressEditFolderNameButton: getIsUserPressEditFolderNameBtn(state),\n  selectedFolderIdForEditing: getSelectedFolderIdForEditing(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  pressEditFolderNameBtn: value => dispatch(pressEditFolderNameBtn(value)),\n  changeFolderName: (folderName, folderId) =>\n    dispatch(changeFolderName(folderName, folderId)),\n  saveFolderId: folderId => dispatch(saveFolderId(folderId)),\n  saveSelectedItemId: folderId => dispatch(saveSelectedItemId(folderId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Folder);\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Folder from \"./Folder\";\nimport { getFolders, getIsUserPressAddFolderBtn } from \"../redux/store\";\nimport {\n  addFolder,\n  pressAddFolderBtn,\n  changeFolderName,\n  saveFolderId\n} from \"../redux/actions\";\n\nconst useStyles = makeStyles({\n  input: {\n    width: \"96%\",\n    display: \"block\",\n    fontSize: 14\n  }\n});\n\nconst Folders = ({\n  folders,\n  isUserPressAddFolderButton,\n  pressAddFolderBtn,\n  addFolderFromProps,\n  saveFolderId\n}) => {\n  const classes = useStyles();\n  const [currentFolder, setCurrentFolder] = useState({\n    folderId: null,\n    folderName: null,\n    notesInThisFolder: []\n  });\n\n  const handleInputChange = value => {\n    setCurrentFolder(prevState => {\n      return {\n        ...prevState,\n        folderId: `folderID-${+new Date()}`,\n        folderName: value\n      };\n    });\n  };\n\n  return (\n    <>\n      <div>\n        {folders.length > 0 && (\n          <ul>\n            {folders.map(folder => (\n              <Folder\n                allowedDropEffect=\"move\"\n                folder={folder}\n                key={folder.folderId}\n              />\n            ))}\n\n            {isUserPressAddFolderButton && (\n              <div>\n                <input\n                  maxLength=\"20\"\n                  autoFocus\n                  placeholder=\"New Folder\"\n                  onChange={e => handleInputChange(e.target.value)}\n                  onBlur={() => {\n                    addFolderFromProps(currentFolder);\n                    pressAddFolderBtn(false);\n                    saveFolderId(currentFolder.folderId);\n                  }}\n                  type=\"text\"\n                  className={classes.input}\n                />\n              </div>\n            )}\n          </ul>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  folders: getFolders(state),\n  isUserPressAddFolderButton: getIsUserPressAddFolderBtn(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addFolderFromProps: folder => dispatch(addFolder(folder)),\n  pressAddFolderBtn: value => dispatch(pressAddFolderBtn(value)),\n  changeFolderName: (folderName, folderId) =>\n    dispatch(changeFolderName(folderName, folderId)),\n  saveFolderId: folderId => dispatch(saveFolderId(folderId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Folders);\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport { connect } from \"react-redux\";\n\nimport { pressAddFolderBtn } from \"../../redux/actions\";\n\nconst StyledButton = withStyles({\n  root: {\n    position: \"absolute\",\n    bottom: 15,\n    backgroundColor: \"rgb(228, 226, 229)\",\n    boxShadow: \"none\",\n    border: \"none\",\n    textTransform: \"none\",\n    alignItems: \"center\",\n    \"&:hover\": {\n      backgroundColor: \"rgb(228, 226, 229)\",\n      border: \"none\",\n      boxShadow: \"none\"\n    }\n  },\n  label: {\n    padding: 0,\n    alignItems: \"none\"\n  }\n})(Button);\n\nconst AddFolderButton = ({ pressAddFolderBtn }) => (\n  <StyledButton\n    variant=\"contained\"\n    color=\"default\"\n    startIcon={<AddCircleIcon />}\n    onClick={() => pressAddFolderBtn(true)}\n  >\n    New&nbsp;Folder\n  </StyledButton>\n);\n\nconst mapDispatchToProps = dispatch => ({\n  pressAddFolderBtn: value => dispatch(pressAddFolderBtn(value))\n});\n\nexport default connect(null, mapDispatchToProps)(AddFolderButton);\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { connect } from \"react-redux\";\nimport { deleteNote, deleteNoteInNotesInThisFolder } from \"../../redux/actions\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& > *\": {\n      margin: -6\n    }\n  }\n}));\n\nconst DeleteNoteButton = ({\n  deleteNote,\n  noteId,\n  deleteNoteInNotesInThisFolder\n}) => {\n  const classes = useStyles();\n\n  return (\n    <div\n      className={classes.root}\n      onClick={() => {\n        deleteNote(noteId);\n        deleteNoteInNotesInThisFolder(noteId);\n      }}\n    >\n      <IconButton aria-label=\"delete\">\n        <DeleteIcon fontSize=\"small\" />\n      </IconButton>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  deleteNote: noteId => dispatch(deleteNote(noteId)),\n  deleteNoteInNotesInThisFolder: noteId =>\n    dispatch(deleteNoteInNotesInThisFolder(noteId))\n});\n\nexport default connect(null, mapDispatchToProps)(DeleteNoteButton);\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport { connect } from \"react-redux\";\n\nimport { pressEditNoteNameBtn, saveNoteId } from \"../../redux/actions\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& > *\": {\n      margin: -6\n    }\n  }\n}));\n\nconst EditNoteNameBtn = ({ noteId, pressEditNoteNameBtn, saveNoteId }) => {\n  const classes = useStyles();\n\n  return (\n    <div\n      className={classes.root}\n      onClick={() => {\n        pressEditNoteNameBtn(true);\n        saveNoteId(noteId);\n      }}\n    >\n      <IconButton aria-label=\"delete\">\n        <EditIcon fontSize=\"small\" />\n      </IconButton>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  pressEditNoteNameBtn: value => dispatch(pressEditNoteNameBtn(value)),\n  saveNoteId: noteId => dispatch(saveNoteId(noteId))\n});\n\nexport default connect(null, mapDispatchToProps)(EditNoteNameBtn);\n","import React, { useState } from \"react\";\nimport cn from \"classnames\";\nimport { useDrag } from \"react-dnd\";\nimport { connect } from \"react-redux\";\nimport Box from \"@material-ui/core/Box\";\nimport { styled, makeStyles } from \"@material-ui/core/styles\";\nimport DeleteNoteBtn from \"./buttons/DeleteNoteBtn\";\nimport EditNoteNameBtn from \"./buttons/EditNoteNameBtn\";\nimport ItemTypesForReactDND from \"./ItemTypesForReactDND\";\n\nimport {\n  getSelectedNoteIdForEditing,\n  getIsUserPressEditNoteNameBtn,\n  getFolders\n} from \"../redux/store\";\nimport {\n  changeNoteName,\n  saveNoteId,\n  pressEditNoteNameBtn,\n  openDialog,\n  changeNotesInThisFolder,\n  changeNoteNameInNotesInThisFolder,\n  deleteNoteInNotesInThisFolderOnDragEnd,\n  saveSelectedItemId\n} from \"../redux/actions\";\n\nconst NoteWrapper = styled(Box)({\n  display: \"flex\",\n  width: 300,\n  alignItems: \"flex-end\"\n});\n\nconst useStyles = makeStyles(() => ({\n  editNoteNameInput: {\n    minWidth: 294,\n    fontSize: 14,\n    margin: \"5px 0\"\n  },\n  noteLabel: {\n    display: \"block\",\n    minWidth: 220,\n    fontSize: 14,\n    padding: 5,\n    paddingRight: 0\n  }\n}));\n\nconst style = {\n  backgroundColor: \"white\"\n};\n\nconst Note = ({\n  note,\n  changeNoteName,\n  isUserPressEditNoteNameButton,\n  saveNoteId,\n  selectedNoteIdForEditing,\n  pressEditNoteNameBtn,\n  openDialog,\n  changeNotesInThisFolder,\n  changeNoteNameInNotesInThisFolder,\n  deleteNoteInNotesInThisFolderOnDragEnd,\n  folders,\n  saveSelectedItemId\n}) => {\n  const classes = useStyles();\n  const { noteName, noteId } = note;\n  const [newNoteName, setNewNoteName] = useState(\"\");\n\n  const handleInputChange = value => {\n    setNewNoteName(value);\n  };\n\n  const item = { ...note, type: ItemTypesForReactDND.BOX };\n  const [{ opacity }, drag] = useDrag({\n    item,\n    end(item, monitor) {\n      const dropResult = monitor.getDropResult();\n      if (item && dropResult) {\n        const isDropAllowed =\n          dropResult.allowedDropEffect === \"any\" ||\n          dropResult.allowedDropEffect === dropResult.dropEffect;\n        if (isDropAllowed) {\n          // alert(\n          //   `You ${dropResult.dropEffect} noteName - ${noteName} - ${noteId}into ${dropResult.name}!`\n          // );\n          const folderIdOnDragEnd = monitor.getDropResult().name;\n          const droppedFolder = folders.find((folder, i) => {\n            let needFolder = null;\n            if (i > 0) {\n              needFolder = folder.notesInThisFolder.some(\n                note => note.noteId === noteId\n              );\n            }\n            return needFolder;\n          });\n\n          if (droppedFolder) {\n            if (droppedFolder.folderId) {\n              deleteNoteInNotesInThisFolderOnDragEnd(\n                droppedFolder.folderId,\n                noteId\n              );\n            }\n          }\n          changeNotesInThisFolder(folderIdOnDragEnd, note);\n        }\n      }\n    },\n    collect: monitor => ({\n      opacity: monitor.isDragging() ? 0.4 : 1\n    })\n  });\n\n  if (selectedNoteIdForEditing === noteId && isUserPressEditNoteNameButton) {\n    return (\n      <div>\n        <input\n          autoFocus\n          maxLength=\"20\"\n          type=\"text\"\n          placeholder=\"New Note\"\n          defaultValue={noteName}\n          className={classes.editNoteNameInput}\n          onChange={e => handleInputChange(e.target.value)}\n          onBlur={() => {\n            changeNoteName(newNoteName, noteId);\n            changeNoteNameInNotesInThisFolder(newNoteName, noteId);\n            pressEditNoteNameBtn(false);\n          }}\n        />\n      </div>\n    );\n  } else {\n    return (\n      <div ref={drag} style={{ ...style, opacity }}>\n        <li\n          onDoubleClick={() => openDialog(true)}\n          onClick={() => {\n            saveNoteId(noteId);\n            saveSelectedItemId(noteId);\n          }}\n          className={cn(\"note-li \", {\n            selected: selectedNoteIdForEditing === noteId\n          })}\n        >\n          <NoteWrapper>\n            <label className={classes.noteLabel}>{noteName}</label>\n            <DeleteNoteBtn noteId={noteId} />\n            <EditNoteNameBtn noteId={noteId} />\n          </NoteWrapper>\n        </li>\n      </div>\n    );\n  }\n};\n\nconst mapStateToProps = state => ({\n  isUserPressEditNoteNameButton: getIsUserPressEditNoteNameBtn(state),\n  selectedNoteIdForEditing: getSelectedNoteIdForEditing(state),\n\n  folders: getFolders(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  pressEditNoteNameBtn: value => dispatch(pressEditNoteNameBtn(value)),\n  changeNoteName: (noteName, noteId) =>\n    dispatch(changeNoteName(noteName, noteId)),\n  saveNoteId: noteId => dispatch(saveNoteId(noteId)),\n  openDialog: value => dispatch(openDialog(value)),\n  changeNotesInThisFolder: (folderIdOnDragEnd, note) =>\n    dispatch(changeNotesInThisFolder(folderIdOnDragEnd, note)),\n  changeNoteNameInNotesInThisFolder: (noteName, noteId) =>\n    dispatch(changeNoteNameInNotesInThisFolder(noteName, noteId)),\n  deleteNoteInNotesInThisFolderOnDragEnd: (folderId, noteId) =>\n    dispatch(deleteNoteInNotesInThisFolderOnDragEnd(folderId, noteId)),\n  saveSelectedItemId: itemId => dispatch(saveSelectedItemId(itemId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Note);\n","export default function findNoteBody(notes, selectedNoteIdForEditing) {\n  const noteBody = notes.find(note => note.noteId === selectedNoteIdForEditing)\n    .noteBody;\n  if (noteBody === null) return \"\";\n\n  return noteBody;\n}\n","import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport { connect } from \"react-redux\";\nimport findNoteBody from \"../helpers/findNoteBody\";\n\nimport {\n  getIsDialogOpened,\n  getSelectedNoteIdForEditing,\n  getNotes\n} from \"../redux/store\";\nimport {\n  openDialog,\n  changeNoteBody,\n  changeNoteBodyInNotesInThisFolder\n} from \"../redux/actions\";\n\nconst DialogForEditingNoteBody = ({\n  notes,\n  changeNoteBody,\n  isDialogOpened,\n  openDialog,\n  selectedNoteIdForEditing,\n  changeNoteBodyInNotesInThisFolder\n}) => {\n  const [newNoteBody, setNewNoteBody] = useState(\"\");\n\n  const handleTextFieldChange = value => {\n    setNewNoteBody(value);\n    changeNoteBody(value, selectedNoteIdForEditing);\n  };\n\n  return (\n    <div>\n      <Dialog\n        open={isDialogOpened}\n        onClose={() => openDialog(false)}\n        aria-labelledby=\"form-dialog-title\"\n      >\n        <DialogContent>\n          <DialogContentText>\n            Please change your note and press confirm\n          </DialogContentText>\n          <form noValidate autoComplete=\"off\">\n            <TextField\n              rows=\"6\"\n              multiline\n              label=\"Note\"\n              variant=\"outlined\"\n              id=\"outlined-multiline-static\"\n              value={findNoteBody(notes, selectedNoteIdForEditing)}\n              onChange={e => handleTextFieldChange(e.target.value)}\n            />\n          </form>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={() => {\n              openDialog(false);\n              changeNoteBodyInNotesInThisFolder(\n                newNoteBody,\n                selectedNoteIdForEditing\n              );\n            }}\n            color=\"primary\"\n          >\n            Confirm\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  isDialogOpened: getIsDialogOpened(state),\n  selectedNoteIdForEditing: getSelectedNoteIdForEditing(state),\n  notes: getNotes(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  openDialog: value => dispatch(openDialog(value)),\n  changeNoteBody: (noteBody, noteId) =>\n    dispatch(changeNoteBody(noteBody, noteId)),\n  changeNoteBodyInNotesInThisFolder: (noteBody, noteId) =>\n    dispatch(changeNoteBodyInNotesInThisFolder(noteBody, noteId))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DialogForEditingNoteBody);\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Box from \"@material-ui/core/Box\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles, withStyles, styled } from \"@material-ui/core/styles\";\nimport Note from \"./Note\";\nimport findNoteBody from \"../helpers/findNoteBody\";\nimport ItemTypesForReactDND from \"./ItemTypesForReactDND\";\nimport Dialog from \"./Dialog\";\n\nimport {\n  getNotes,\n  getFolders,\n  getIsUserPressAddNoteNameBtn,\n  getIsDialogOpened,\n  getSelectedNoteIdForEditing,\n  getIsFoldersHidden,\n  getSelectedFolderIdForEditing\n} from \"../redux/store\";\nimport {\n  addNote,\n  pressAddNoteNameBtn,\n  changeNoteName,\n  saveNoteId,\n  changeNoteBody,\n  changeNotesInThisFolder,\n  changeNoteBodyInNotesInThisFolder\n} from \"../redux/actions\";\n\nconst NotesWrapper = styled(Box)({\n  padding: \"20px 0 20px 20px\"\n});\n\nconst NoteBodyWrapper = styled(Box)({\n  borderLeft: \"1px solid rgb(153, 152, 152)\"\n});\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: 0\n    },\n    \"& .MuiOutlinedInput-root\": {\n      borderRadius: 0,\n      paddingTop: 0,\n      width: 410,\n      height: 523,\n      borderBottomRightRadius: 10\n    }\n  },\n  firstNoteinput: {\n    marginLeft: 20,\n    marginTop: 30,\n    height: 16,\n    width: 240,\n    fontSize: 14\n  },\n  input: {\n    width: \"96%\",\n    display: \"block\",\n    fontSize: 14\n  }\n}));\n\nconst StyledTextFieldWhenFoldersHidden = withStyles({\n  root: {\n    \"& .MuiOutlinedInput-root\": {\n      width: 677\n    }\n  }\n})(TextField);\n\nconst Notes = ({\n  notes,\n  folders,\n  isUserPressAddNoteNameBtn,\n  pressAddNoteNameBtn,\n  addNoteFromProps,\n  isDialogOpened,\n  saveNoteId,\n  changeNoteBody,\n  selectedNoteIdForEditing,\n  isFoldersHidden,\n  changeNotesInThisFolder,\n  changeNoteBodyInNotesInThisFolder,\n  selectedFolderIdForEditing\n}) => {\n  const classes = useStyles();\n\n  const [currentNote, setCurrentNote] = useState({\n    noteId: null,\n    noteName: null,\n    noteBody: null,\n    type: ItemTypesForReactDND.BOX\n  });\n\n  const handleInputChange = value => {\n    setCurrentNote(prevState => {\n      return {\n        ...prevState,\n        noteId: `noteId-${+new Date()}`,\n        noteName: value\n      };\n    });\n  };\n\n  const handleTextFieldChange = value => {\n    changeNoteBody(value, selectedNoteIdForEditing);\n    changeNoteBodyInNotesInThisFolder(value, selectedNoteIdForEditing);\n  };\n\n  const isItAllNotesFolder = () => {\n    const folderAllNotes = folders.filter(\n      folder =>\n        folder.folderId === selectedFolderIdForEditing &&\n        folder.folderId === \"folderAllNotes\"\n    );\n    const [folder] = folderAllNotes;\n    if (!folder) return false;\n\n    return true;\n  };\n\n  const notesInThisFolder = () => {\n    const folderAll = folders[0];\n    const notesInThisFolderInFolderAll = folderAll.notesInThisFolder;\n    const needFolder = folders.filter(\n      folder => folder.folderId === selectedFolderIdForEditing\n    );\n    const [folder] = needFolder;\n    if (!folder) return notesInThisFolderInFolderAll;\n    const { notesInThisFolder } = folder;\n    if (notesInThisFolder) return notesInThisFolder;\n\n    return [];\n  };\n\n  return (\n    <>\n      {isUserPressAddNoteNameBtn && notesInThisFolder().length < 1 && (\n        <input\n          autoFocus\n          type=\"text\"\n          maxLength=\"30\"\n          placeholder=\"New Note\"\n          className={classes.firstNoteinput}\n          onChange={e => handleInputChange(e.target.value)}\n          onBlur={() => {\n            addNoteFromProps(currentNote);\n            pressAddNoteNameBtn(false);\n            setCurrentNote({\n              noteId: null,\n              noteName: null,\n              noteBody: null,\n              type: ItemTypesForReactDND.BOX\n            });\n            saveNoteId(currentNote.noteId);\n\n            if (isItAllNotesFolder()) {\n              changeNotesInThisFolder(\"folderAllNotes\", currentNote);\n            } else {\n              changeNotesInThisFolder(\"folderAllNotes\", currentNote);\n              changeNotesInThisFolder(selectedFolderIdForEditing, currentNote);\n            }\n          }}\n        />\n      )}\n      {notesInThisFolder().length > 0 && (\n        <>\n          <NotesWrapper>\n            <ul>\n              {notesInThisFolder().map(note => (\n                <Note note={note} key={note.noteId} />\n              ))}\n              {isUserPressAddNoteNameBtn && (\n                <div>\n                  <input\n                    autoFocus\n                    type=\"text\"\n                    maxLength=\"30\"\n                    placeholder=\"New Note\"\n                    className={classes.input}\n                    onChange={e => handleInputChange(e.target.value)}\n                    onBlur={() => {\n                      addNoteFromProps(currentNote);\n                      pressAddNoteNameBtn(false);\n                      saveNoteId(currentNote.noteId);\n\n                      if (isItAllNotesFolder()) {\n                        changeNotesInThisFolder(\"folderAllNotes\", currentNote);\n                      } else {\n                        changeNotesInThisFolder(\"folderAllNotes\", currentNote);\n                        changeNotesInThisFolder(\n                          selectedFolderIdForEditing,\n                          currentNote\n                        );\n                      }\n                    }}\n                  />\n                </div>\n              )}\n            </ul>\n            {isDialogOpened && <Dialog />}\n          </NotesWrapper>\n          {notes.find(note => note.noteId === selectedNoteIdForEditing) && (\n            <NoteBodyWrapper>\n              <form className={classes.root} noValidate autoComplete=\"off\">\n                {!isFoldersHidden && (\n                  <TextField\n                    rows=\"22\"\n                    multiline\n                    label=\"Note\"\n                    variant=\"outlined\"\n                    id=\"outlined-multiline-static\"\n                    className={classes.root}\n                    value={findNoteBody(notes, selectedNoteIdForEditing)}\n                    onChange={e => handleTextFieldChange(e.target.value)}\n                  />\n                )}\n\n                {isFoldersHidden && (\n                  <StyledTextFieldWhenFoldersHidden\n                    rows=\"22\"\n                    multiline\n                    label=\"Note\"\n                    variant=\"outlined\"\n                    id=\"outlined-multiline-static\"\n                    className={classes.root}\n                    value={findNoteBody(notes, selectedNoteIdForEditing)}\n                    onChange={e => handleTextFieldChange(e.target.value)}\n                  />\n                )}\n              </form>\n            </NoteBodyWrapper>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  notes: getNotes(state),\n  folders: getFolders(state),\n  isUserPressAddNoteNameBtn: getIsUserPressAddNoteNameBtn(state),\n  isDialogOpened: getIsDialogOpened(state),\n  selectedNoteIdForEditing: getSelectedNoteIdForEditing(state),\n  isFoldersHidden: getIsFoldersHidden(state),\n  selectedFolderIdForEditing: getSelectedFolderIdForEditing(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addNoteFromProps: note => dispatch(addNote(note)),\n  pressAddNoteNameBtn: value => dispatch(pressAddNoteNameBtn(value)),\n  changeFolderName: (noteName, noteId) =>\n    dispatch(changeNoteName(noteName, noteId)),\n  saveNoteId: noteId => dispatch(saveNoteId(noteId)),\n  changeNoteBody: (noteBody, noteId) =>\n    dispatch(changeNoteBody(noteBody, noteId)),\n  changeNotesInThisFolder: (folderId, note) =>\n    dispatch(changeNotesInThisFolder(folderId, note)),\n  changeNoteBodyInNotesInThisFolder: (noteBody, noteId) =>\n    dispatch(changeNoteBodyInNotesInThisFolder(noteBody, noteId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Notes);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Box from \"@material-ui/core/Box\";\nimport { styled, makeStyles } from \"@material-ui/core/styles\";\nimport AppHeader from \"./components/AppHeader\";\nimport Folders from \"./components/Folders\";\nimport AddFolderBtn from \"./components/buttons/AddFolderBtn\";\nimport Notes from \"./components/Notes\";\n\nimport { getIsFoldersHidden } from \"./redux/store\";\n\nconst AppContainer = styled(Box)({\n  margin: \"100px auto\",\n  width: 1000,\n  height: 560,\n  border: \"1px solid #dfdfdf\",\n  borderRadius: 10,\n  boxShadow: \"0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)\"\n});\n\nconst Panels = styled(Box)({\n  display: \"flex\"\n});\n\nconst NotesPanel = styled(Box)({\n  display: \"flex\",\n  width: \"100%\"\n});\n\nconst useStyles = makeStyles({\n  root: {\n    width: 310,\n    height: 482,\n    position: \"relative\",\n    padding: 20,\n    borderRight: \"1px solid rgb(153, 152, 152)\",\n    backgroundColor: \"rgb(228, 226, 229)\",\n    borderBottomLeftRadius: 10\n  },\n  hidden: {\n    display: \"none\"\n  }\n});\n\nconst App = ({ isFoldersHidden }) => {\n  const classes = useStyles();\n\n  return (\n    <AppContainer>\n      <AppHeader />\n      <Panels>\n        <div \n          className={isFoldersHidden ? classes.hidden : classes.root}\n        >\n          <Folders />\n          <AddFolderBtn />\n        </div>\n        <NotesPanel>\n          <Notes />\n        </NotesPanel>\n      </Panels>\n    </AppContainer>\n  );\n};\n\nconst mapStateToProps = state => ({\n  isFoldersHidden: getIsFoldersHidden(state)\n});\n\nexport default connect(mapStateToProps, null)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\nimport App from \"./App\";\nimport \"./styles.scss\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <DndProvider backend={Backend}>\n        <App />\n      </DndProvider>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}